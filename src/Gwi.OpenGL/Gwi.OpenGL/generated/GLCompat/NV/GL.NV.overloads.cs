// This file is auto generated, do not edit.
using System;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;

namespace Gwi.OpenGL.GLCompat
{
#pragma warning disable IDE1006 // Naming Styles

    public static class NVOverloads
    {
        // CreateSemaphoresNV overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void CreateSemaphoresNV(this GL.NVExtension glInstance, Span<uint> semaphores)
        {
            var n = (int)(semaphores.Length);
            fixed (uint* semaphores_ptr = semaphores) // SpanOrArrayLayer
            {
                glInstance.CreateSemaphoresNV(n, semaphores_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void CreateSemaphoresNV(this GL.NVExtension glInstance, uint[] semaphores)
        {
            var n = (int)(semaphores.Length);
            fixed (uint* semaphores_ptr = semaphores) // SpanOrArrayLayer
            {
                glInstance.CreateSemaphoresNV(n, semaphores_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void CreateSemaphoresNV(this GL.NVExtension glInstance, int n, ref uint semaphores)
        {
            fixed (uint* semaphores_ptr = &semaphores) // RefInsteadOfPointerLayer
            {
                glInstance.CreateSemaphoresNV(n, semaphores_ptr);
            }
        }

        // SemaphoreParameterivNV overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void SemaphoreParameterivNV(this GL.NVExtension glInstance, uint semaphore, SemaphoreParameterName pname, in int parameters)
        {
            fixed (int* parameters_ptr = &parameters) // RefInsteadOfPointerLayer
            {
                glInstance.SemaphoreParameterivNV(semaphore, pname, parameters_ptr);
            }
        }

        // GetSemaphoreParameterivNV overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void GetSemaphoreParameterivNV(this GL.NVExtension glInstance, uint semaphore, SemaphoreParameterName pname, ref int parameters)
        {
            fixed (int* parameters_ptr = &parameters) // RefInsteadOfPointerLayer
            {
                glInstance.GetSemaphoreParameterivNV(semaphore, pname, parameters_ptr);
            }
        }

        // MultiDrawArraysIndirectBindlessNV overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.VoidPtrToIntPtrOverloader
        public static unsafe void MultiDrawArraysIndirectBindlessNV(this GL.NVExtension glInstance, PrimitiveType mode, IntPtr indirect, int drawCount, int stride, int vertexBufferCount)
        {
            var indirect_vptr = (void*)indirect;
            glInstance.MultiDrawArraysIndirectBindlessNV(mode, indirect_vptr, drawCount, stride, vertexBufferCount);
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void MultiDrawArraysIndirectBindlessNV<T1>(this GL.NVExtension glInstance, PrimitiveType mode, in T1 indirect, int drawCount, int stride, int vertexBufferCount)
            where T1 : unmanaged
        {
            fixed (void* indirect_ptr = &indirect) // RefInsteadOfPointerLayer
            {
                glInstance.MultiDrawArraysIndirectBindlessNV(mode, indirect_ptr, drawCount, stride, vertexBufferCount);
            }
        }

        // MultiDrawElementsIndirectBindlessNV overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.VoidPtrToIntPtrOverloader
        public static unsafe void MultiDrawElementsIndirectBindlessNV(this GL.NVExtension glInstance, PrimitiveType mode, DrawElementsType type, IntPtr indirect, int drawCount, int stride, int vertexBufferCount)
        {
            var indirect_vptr = (void*)indirect;
            glInstance.MultiDrawElementsIndirectBindlessNV(mode, type, indirect_vptr, drawCount, stride, vertexBufferCount);
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void MultiDrawElementsIndirectBindlessNV<T1>(this GL.NVExtension glInstance, PrimitiveType mode, DrawElementsType type, in T1 indirect, int drawCount, int stride, int vertexBufferCount)
            where T1 : unmanaged
        {
            fixed (void* indirect_ptr = &indirect) // RefInsteadOfPointerLayer
            {
                glInstance.MultiDrawElementsIndirectBindlessNV(mode, type, indirect_ptr, drawCount, stride, vertexBufferCount);
            }
        }

        // MultiDrawArraysIndirectBindlessCountNV overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.VoidPtrToIntPtrOverloader
        public static unsafe void MultiDrawArraysIndirectBindlessCountNV(this GL.NVExtension glInstance, PrimitiveType mode, IntPtr indirect, int drawCount, int maxDrawCount, int stride, int vertexBufferCount)
        {
            var indirect_vptr = (void*)indirect;
            glInstance.MultiDrawArraysIndirectBindlessCountNV(mode, indirect_vptr, drawCount, maxDrawCount, stride, vertexBufferCount);
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void MultiDrawArraysIndirectBindlessCountNV<T1>(this GL.NVExtension glInstance, PrimitiveType mode, in T1 indirect, int drawCount, int maxDrawCount, int stride, int vertexBufferCount)
            where T1 : unmanaged
        {
            fixed (void* indirect_ptr = &indirect) // RefInsteadOfPointerLayer
            {
                glInstance.MultiDrawArraysIndirectBindlessCountNV(mode, indirect_ptr, drawCount, maxDrawCount, stride, vertexBufferCount);
            }
        }

        // MultiDrawElementsIndirectBindlessCountNV overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.VoidPtrToIntPtrOverloader
        public static unsafe void MultiDrawElementsIndirectBindlessCountNV(this GL.NVExtension glInstance, PrimitiveType mode, DrawElementsType type, IntPtr indirect, int drawCount, int maxDrawCount, int stride, int vertexBufferCount)
        {
            var indirect_vptr = (void*)indirect;
            glInstance.MultiDrawElementsIndirectBindlessCountNV(mode, type, indirect_vptr, drawCount, maxDrawCount, stride, vertexBufferCount);
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void MultiDrawElementsIndirectBindlessCountNV<T1>(this GL.NVExtension glInstance, PrimitiveType mode, DrawElementsType type, in T1 indirect, int drawCount, int maxDrawCount, int stride, int vertexBufferCount)
            where T1 : unmanaged
        {
            fixed (void* indirect_ptr = &indirect) // RefInsteadOfPointerLayer
            {
                glInstance.MultiDrawElementsIndirectBindlessCountNV(mode, type, indirect_ptr, drawCount, maxDrawCount, stride, vertexBufferCount);
            }
        }

        // GetImageHandleNV overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.BoolOverloader
        public static unsafe ulong GetImageHandleNV(this GL.NVExtension glInstance, TextureHandle texture, int level, bool layered, int layer, PixelFormat format)
        {
            ulong returnValue;
            var layered_byte = (byte)(layered ? 1 : 0);
            returnValue = glInstance.GetImageHandleNV(texture, level, layered_byte, layer, format);
            return returnValue;
        }

        // UniformHandleui64vNV overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void UniformHandleui64vNV(this GL.NVExtension glInstance, int location, ReadOnlySpan<ulong> value)
        {
            var count = (int)(value.Length);
            fixed (ulong* value_ptr = value) // SpanOrArrayLayer
            {
                glInstance.UniformHandleui64vNV(location, count, value_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void UniformHandleui64vNV(this GL.NVExtension glInstance, int location, ulong[] value)
        {
            var count = (int)(value.Length);
            fixed (ulong* value_ptr = value) // SpanOrArrayLayer
            {
                glInstance.UniformHandleui64vNV(location, count, value_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void UniformHandleui64vNV(this GL.NVExtension glInstance, int location, int count, in ulong value)
        {
            fixed (ulong* value_ptr = &value) // RefInsteadOfPointerLayer
            {
                glInstance.UniformHandleui64vNV(location, count, value_ptr);
            }
        }

        // ProgramUniformHandleui64vNV overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void ProgramUniformHandleui64vNV(this GL.NVExtension glInstance, ProgramHandle program, int location, ReadOnlySpan<ulong> values)
        {
            var count = (int)(values.Length);
            fixed (ulong* values_ptr = values) // SpanOrArrayLayer
            {
                glInstance.ProgramUniformHandleui64vNV(program, location, count, values_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void ProgramUniformHandleui64vNV(this GL.NVExtension glInstance, ProgramHandle program, int location, ulong[] values)
        {
            var count = (int)(values.Length);
            fixed (ulong* values_ptr = values) // SpanOrArrayLayer
            {
                glInstance.ProgramUniformHandleui64vNV(program, location, count, values_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void ProgramUniformHandleui64vNV(this GL.NVExtension glInstance, ProgramHandle program, int location, int count, in ulong values)
        {
            fixed (ulong* values_ptr = &values) // RefInsteadOfPointerLayer
            {
                glInstance.ProgramUniformHandleui64vNV(program, location, count, values_ptr);
            }
        }

        // CreateStatesNV overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void CreateStatesNV(this GL.NVExtension glInstance, Span<uint> states)
        {
            var n = (int)(states.Length);
            fixed (uint* states_ptr = states) // SpanOrArrayLayer
            {
                glInstance.CreateStatesNV(n, states_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void CreateStatesNV(this GL.NVExtension glInstance, uint[] states)
        {
            var n = (int)(states.Length);
            fixed (uint* states_ptr = states) // SpanOrArrayLayer
            {
                glInstance.CreateStatesNV(n, states_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void CreateStatesNV(this GL.NVExtension glInstance, int n, ref uint states)
        {
            fixed (uint* states_ptr = &states) // RefInsteadOfPointerLayer
            {
                glInstance.CreateStatesNV(n, states_ptr);
            }
        }

        // DeleteStatesNV overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void DeleteStatesNV(this GL.NVExtension glInstance, ReadOnlySpan<uint> states)
        {
            var n = (int)(states.Length);
            fixed (uint* states_ptr = states) // SpanOrArrayLayer
            {
                glInstance.DeleteStatesNV(n, states_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void DeleteStatesNV(this GL.NVExtension glInstance, uint[] states)
        {
            var n = (int)(states.Length);
            fixed (uint* states_ptr = states) // SpanOrArrayLayer
            {
                glInstance.DeleteStatesNV(n, states_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void DeleteStatesNV(this GL.NVExtension glInstance, int n, in uint states)
        {
            fixed (uint* states_ptr = &states) // RefInsteadOfPointerLayer
            {
                glInstance.DeleteStatesNV(n, states_ptr);
            }
        }

        // DrawCommandsNV overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void DrawCommandsNV(this GL.NVExtension glInstance, GLEnum primitiveMode, uint buffer, in IntPtr indirects, in int sizes, uint count)
        {
            fixed (IntPtr* indirects_ptr = &indirects) // RefInsteadOfPointerLayer
            fixed (int* sizes_ptr = &sizes) // RefInsteadOfPointerLayer
            {
                glInstance.DrawCommandsNV(primitiveMode, buffer, indirects_ptr, sizes_ptr, count);
            }
        }

        // DrawCommandsAddressNV overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void DrawCommandsAddressNV(this GL.NVExtension glInstance, GLEnum primitiveMode, in ulong indirects, in int sizes, uint count)
        {
            fixed (ulong* indirects_ptr = &indirects) // RefInsteadOfPointerLayer
            fixed (int* sizes_ptr = &sizes) // RefInsteadOfPointerLayer
            {
                glInstance.DrawCommandsAddressNV(primitiveMode, indirects_ptr, sizes_ptr, count);
            }
        }

        // DrawCommandsStatesNV overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void DrawCommandsStatesNV(this GL.NVExtension glInstance, BufferHandle buffer, in IntPtr indirects, in int sizes, in uint states, in uint fbos, uint count)
        {
            fixed (IntPtr* indirects_ptr = &indirects) // RefInsteadOfPointerLayer
            fixed (int* sizes_ptr = &sizes) // RefInsteadOfPointerLayer
            fixed (uint* states_ptr = &states) // RefInsteadOfPointerLayer
            fixed (uint* fbos_ptr = &fbos) // RefInsteadOfPointerLayer
            {
                glInstance.DrawCommandsStatesNV(buffer, indirects_ptr, sizes_ptr, states_ptr, fbos_ptr, count);
            }
        }

        // DrawCommandsStatesAddressNV overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void DrawCommandsStatesAddressNV(this GL.NVExtension glInstance, in ulong indirects, in int sizes, in uint states, in uint fbos, uint count)
        {
            fixed (ulong* indirects_ptr = &indirects) // RefInsteadOfPointerLayer
            fixed (int* sizes_ptr = &sizes) // RefInsteadOfPointerLayer
            fixed (uint* states_ptr = &states) // RefInsteadOfPointerLayer
            fixed (uint* fbos_ptr = &fbos) // RefInsteadOfPointerLayer
            {
                glInstance.DrawCommandsStatesAddressNV(indirects_ptr, sizes_ptr, states_ptr, fbos_ptr, count);
            }
        }

        // CreateCommandListsNV overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void CreateCommandListsNV(this GL.NVExtension glInstance, Span<uint> lists)
        {
            var n = (int)(lists.Length);
            fixed (uint* lists_ptr = lists) // SpanOrArrayLayer
            {
                glInstance.CreateCommandListsNV(n, lists_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void CreateCommandListsNV(this GL.NVExtension glInstance, uint[] lists)
        {
            var n = (int)(lists.Length);
            fixed (uint* lists_ptr = lists) // SpanOrArrayLayer
            {
                glInstance.CreateCommandListsNV(n, lists_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void CreateCommandListsNV(this GL.NVExtension glInstance, int n, ref uint lists)
        {
            fixed (uint* lists_ptr = &lists) // RefInsteadOfPointerLayer
            {
                glInstance.CreateCommandListsNV(n, lists_ptr);
            }
        }

        // DeleteCommandListsNV overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void DeleteCommandListsNV(this GL.NVExtension glInstance, ReadOnlySpan<uint> lists)
        {
            var n = (int)(lists.Length);
            fixed (uint* lists_ptr = lists) // SpanOrArrayLayer
            {
                glInstance.DeleteCommandListsNV(n, lists_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void DeleteCommandListsNV(this GL.NVExtension glInstance, uint[] lists)
        {
            var n = (int)(lists.Length);
            fixed (uint* lists_ptr = lists) // SpanOrArrayLayer
            {
                glInstance.DeleteCommandListsNV(n, lists_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void DeleteCommandListsNV(this GL.NVExtension glInstance, int n, in uint lists)
        {
            fixed (uint* lists_ptr = &lists) // RefInsteadOfPointerLayer
            {
                glInstance.DeleteCommandListsNV(n, lists_ptr);
            }
        }

        // ListDrawCommandsStatesClientNV overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void ListDrawCommandsStatesClientNV(this GL.NVExtension glInstance, uint list, uint segment, void** indirects, ReadOnlySpan<int> sizes, ReadOnlySpan<uint> states, ReadOnlySpan<uint> fbos, uint count)
        {
            fixed (int* sizes_ptr = sizes) // SpanOrArrayLayer
            {
                fixed (uint* states_ptr = states) // SpanOrArrayLayer
                {
                    fixed (uint* fbos_ptr = fbos) // SpanOrArrayLayer
                    {
                        glInstance.ListDrawCommandsStatesClientNV(list, segment, indirects, sizes_ptr, states_ptr, fbos_ptr, count);
                    }
                }
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void ListDrawCommandsStatesClientNV(this GL.NVExtension glInstance, uint list, uint segment, void** indirects, int[] sizes, uint[] states, uint[] fbos, uint count)
        {
            fixed (int* sizes_ptr = sizes) // SpanOrArrayLayer
            {
                fixed (uint* states_ptr = states) // SpanOrArrayLayer
                {
                    fixed (uint* fbos_ptr = fbos) // SpanOrArrayLayer
                    {
                        glInstance.ListDrawCommandsStatesClientNV(list, segment, indirects, sizes_ptr, states_ptr, fbos_ptr, count);
                    }
                }
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void ListDrawCommandsStatesClientNV(this GL.NVExtension glInstance, uint list, uint segment, void** indirects, in int sizes, in uint states, in uint fbos, uint count)
        {
            fixed (int* sizes_ptr = &sizes) // RefInsteadOfPointerLayer
            fixed (uint* states_ptr = &states) // RefInsteadOfPointerLayer
            fixed (uint* fbos_ptr = &fbos) // RefInsteadOfPointerLayer
            {
                glInstance.ListDrawCommandsStatesClientNV(list, segment, indirects, sizes_ptr, states_ptr, fbos_ptr, count);
            }
        }

        // GetVkProcAddrNV overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.Transformer
        public static unsafe IntPtr GetVkProcAddrNV(this GL.NVExtension glInstance, string name)
        {
            IntPtr returnValue;
            byte* name_ptr = (byte*)Marshal.StringToCoTaskMemUTF8(name);
            returnValue = glInstance.GetVkProcAddrNV(name_ptr);
            Marshal.FreeCoTaskMem((IntPtr)name_ptr);
            return returnValue;
        }

        // MapControlPointsNV overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.VoidPtrToIntPtrOverloader
        public static unsafe void MapControlPointsNV(this GL.NVExtension glInstance, EvalTargetNV target, uint index, MapTypeNV type, int ustride, int vstride, int uorder, int vorder, bool packed, IntPtr points)
        {
            var points_vptr = (void*)points;
            var packed_byte = (byte)(packed ? 1 : 0);
            glInstance.MapControlPointsNV(target, index, type, ustride, vstride, uorder, vorder, packed_byte, points_vptr);
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void MapControlPointsNV<T1>(this GL.NVExtension glInstance, EvalTargetNV target, uint index, MapTypeNV type, int ustride, int vstride, int uorder, int vorder, bool packed, ReadOnlySpan<T1> points)
            where T1 : unmanaged
        {
            fixed (void* points_ptr = points) // SpanOrArrayLayer
            {
                var packed_byte = (byte)(packed ? 1 : 0);
                glInstance.MapControlPointsNV(target, index, type, ustride, vstride, uorder, vorder, packed_byte, points_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void MapControlPointsNV<T1>(this GL.NVExtension glInstance, EvalTargetNV target, uint index, MapTypeNV type, int ustride, int vstride, int uorder, int vorder, bool packed, T1[] points)
            where T1 : unmanaged
        {
            fixed (void* points_ptr = points) // SpanOrArrayLayer
            {
                var packed_byte = (byte)(packed ? 1 : 0);
                glInstance.MapControlPointsNV(target, index, type, ustride, vstride, uorder, vorder, packed_byte, points_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void MapControlPointsNV<T1>(this GL.NVExtension glInstance, EvalTargetNV target, uint index, MapTypeNV type, int ustride, int vstride, int uorder, int vorder, bool packed, in T1 points)
            where T1 : unmanaged
        {
            fixed (void* points_ptr = &points) // RefInsteadOfPointerLayer
            {
                var packed_byte = (byte)(packed ? 1 : 0);
                glInstance.MapControlPointsNV(target, index, type, ustride, vstride, uorder, vorder, packed_byte, points_ptr);
            }
        }

        // MapParameterivNV overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void MapParameterivNV(this GL.NVExtension glInstance, EvalTargetNV target, MapParameterNV pname, ReadOnlySpan<int> parameters)
        {
            fixed (int* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.MapParameterivNV(target, pname, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void MapParameterivNV(this GL.NVExtension glInstance, EvalTargetNV target, MapParameterNV pname, int[] parameters)
        {
            fixed (int* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.MapParameterivNV(target, pname, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void MapParameterivNV(this GL.NVExtension glInstance, EvalTargetNV target, MapParameterNV pname, in int parameters)
        {
            fixed (int* parameters_ptr = &parameters) // RefInsteadOfPointerLayer
            {
                glInstance.MapParameterivNV(target, pname, parameters_ptr);
            }
        }

        // MapParameterfvNV overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void MapParameterfvNV(this GL.NVExtension glInstance, EvalTargetNV target, MapParameterNV pname, ReadOnlySpan<float> parameters)
        {
            fixed (float* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.MapParameterfvNV(target, pname, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void MapParameterfvNV(this GL.NVExtension glInstance, EvalTargetNV target, MapParameterNV pname, float[] parameters)
        {
            fixed (float* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.MapParameterfvNV(target, pname, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void MapParameterfvNV(this GL.NVExtension glInstance, EvalTargetNV target, MapParameterNV pname, in float parameters)
        {
            fixed (float* parameters_ptr = &parameters) // RefInsteadOfPointerLayer
            {
                glInstance.MapParameterfvNV(target, pname, parameters_ptr);
            }
        }

        // GetMapControlPointsNV overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.VoidPtrToIntPtrOverloader
        public static unsafe void GetMapControlPointsNV(this GL.NVExtension glInstance, EvalTargetNV target, uint index, MapTypeNV type, int ustride, int vstride, bool packed, IntPtr points)
        {
            var points_vptr = (void*)points;
            var packed_byte = (byte)(packed ? 1 : 0);
            glInstance.GetMapControlPointsNV(target, index, type, ustride, vstride, packed_byte, points_vptr);
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetMapControlPointsNV<T1>(this GL.NVExtension glInstance, EvalTargetNV target, uint index, MapTypeNV type, int ustride, int vstride, bool packed, Span<T1> points)
            where T1 : unmanaged
        {
            fixed (void* points_ptr = points) // SpanOrArrayLayer
            {
                var packed_byte = (byte)(packed ? 1 : 0);
                glInstance.GetMapControlPointsNV(target, index, type, ustride, vstride, packed_byte, points_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetMapControlPointsNV<T1>(this GL.NVExtension glInstance, EvalTargetNV target, uint index, MapTypeNV type, int ustride, int vstride, bool packed, T1[] points)
            where T1 : unmanaged
        {
            fixed (void* points_ptr = points) // SpanOrArrayLayer
            {
                var packed_byte = (byte)(packed ? 1 : 0);
                glInstance.GetMapControlPointsNV(target, index, type, ustride, vstride, packed_byte, points_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void GetMapControlPointsNV<T1>(this GL.NVExtension glInstance, EvalTargetNV target, uint index, MapTypeNV type, int ustride, int vstride, bool packed, ref T1 points)
            where T1 : unmanaged
        {
            fixed (void* points_ptr = &points) // RefInsteadOfPointerLayer
            {
                var packed_byte = (byte)(packed ? 1 : 0);
                glInstance.GetMapControlPointsNV(target, index, type, ustride, vstride, packed_byte, points_ptr);
            }
        }

        // GetMapParameterivNV overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetMapParameterivNV(this GL.NVExtension glInstance, EvalTargetNV target, MapParameterNV pname, Span<int> parameters)
        {
            fixed (int* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.GetMapParameterivNV(target, pname, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetMapParameterivNV(this GL.NVExtension glInstance, EvalTargetNV target, MapParameterNV pname, int[] parameters)
        {
            fixed (int* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.GetMapParameterivNV(target, pname, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void GetMapParameterivNV(this GL.NVExtension glInstance, EvalTargetNV target, MapParameterNV pname, ref int parameters)
        {
            fixed (int* parameters_ptr = &parameters) // RefInsteadOfPointerLayer
            {
                glInstance.GetMapParameterivNV(target, pname, parameters_ptr);
            }
        }

        // GetMapParameterfvNV overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetMapParameterfvNV(this GL.NVExtension glInstance, EvalTargetNV target, MapParameterNV pname, Span<float> parameters)
        {
            fixed (float* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.GetMapParameterfvNV(target, pname, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetMapParameterfvNV(this GL.NVExtension glInstance, EvalTargetNV target, MapParameterNV pname, float[] parameters)
        {
            fixed (float* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.GetMapParameterfvNV(target, pname, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void GetMapParameterfvNV(this GL.NVExtension glInstance, EvalTargetNV target, MapParameterNV pname, ref float parameters)
        {
            fixed (float* parameters_ptr = &parameters) // RefInsteadOfPointerLayer
            {
                glInstance.GetMapParameterfvNV(target, pname, parameters_ptr);
            }
        }

        // GetMapAttribParameterivNV overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetMapAttribParameterivNV(this GL.NVExtension glInstance, EvalTargetNV target, uint index, MapAttribParameterNV pname, Span<int> parameters)
        {
            fixed (int* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.GetMapAttribParameterivNV(target, index, pname, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetMapAttribParameterivNV(this GL.NVExtension glInstance, EvalTargetNV target, uint index, MapAttribParameterNV pname, int[] parameters)
        {
            fixed (int* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.GetMapAttribParameterivNV(target, index, pname, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void GetMapAttribParameterivNV(this GL.NVExtension glInstance, EvalTargetNV target, uint index, MapAttribParameterNV pname, ref int parameters)
        {
            fixed (int* parameters_ptr = &parameters) // RefInsteadOfPointerLayer
            {
                glInstance.GetMapAttribParameterivNV(target, index, pname, parameters_ptr);
            }
        }

        // GetMapAttribParameterfvNV overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetMapAttribParameterfvNV(this GL.NVExtension glInstance, EvalTargetNV target, uint index, MapAttribParameterNV pname, Span<float> parameters)
        {
            fixed (float* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.GetMapAttribParameterfvNV(target, index, pname, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetMapAttribParameterfvNV(this GL.NVExtension glInstance, EvalTargetNV target, uint index, MapAttribParameterNV pname, float[] parameters)
        {
            fixed (float* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.GetMapAttribParameterfvNV(target, index, pname, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void GetMapAttribParameterfvNV(this GL.NVExtension glInstance, EvalTargetNV target, uint index, MapAttribParameterNV pname, ref float parameters)
        {
            fixed (float* parameters_ptr = &parameters) // RefInsteadOfPointerLayer
            {
                glInstance.GetMapAttribParameterfvNV(target, index, pname, parameters_ptr);
            }
        }

        // GetMultisamplefvNV overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetMultisamplefvNV(this GL.NVExtension glInstance, GetMultisamplePNameNV pname, uint index, Span<float> val)
        {
            fixed (float* val_ptr = val) // SpanOrArrayLayer
            {
                glInstance.GetMultisamplefvNV(pname, index, val_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetMultisamplefvNV(this GL.NVExtension glInstance, GetMultisamplePNameNV pname, uint index, float[] val)
        {
            fixed (float* val_ptr = val) // SpanOrArrayLayer
            {
                glInstance.GetMultisamplefvNV(pname, index, val_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void GetMultisamplefvNV(this GL.NVExtension glInstance, GetMultisamplePNameNV pname, uint index, ref float val)
        {
            fixed (float* val_ptr = &val) // RefInsteadOfPointerLayer
            {
                glInstance.GetMultisamplefvNV(pname, index, val_ptr);
            }
        }

        // DeleteFencesNV overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void DeleteFencesNV(this GL.NVExtension glInstance, ReadOnlySpan<uint> fences)
        {
            var n = (int)(fences.Length);
            fixed (uint* fences_ptr = fences) // SpanOrArrayLayer
            {
                glInstance.DeleteFencesNV(n, fences_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void DeleteFencesNV(this GL.NVExtension glInstance, uint[] fences)
        {
            var n = (int)(fences.Length);
            fixed (uint* fences_ptr = fences) // SpanOrArrayLayer
            {
                glInstance.DeleteFencesNV(n, fences_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void DeleteFencesNV(this GL.NVExtension glInstance, int n, in uint fences)
        {
            fixed (uint* fences_ptr = &fences) // RefInsteadOfPointerLayer
            {
                glInstance.DeleteFencesNV(n, fences_ptr);
            }
        }

        // GenFencesNV overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GenFencesNV(this GL.NVExtension glInstance, Span<uint> fences)
        {
            var n = (int)(fences.Length);
            fixed (uint* fences_ptr = fences) // SpanOrArrayLayer
            {
                glInstance.GenFencesNV(n, fences_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GenFencesNV(this GL.NVExtension glInstance, uint[] fences)
        {
            var n = (int)(fences.Length);
            fixed (uint* fences_ptr = fences) // SpanOrArrayLayer
            {
                glInstance.GenFencesNV(n, fences_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void GenFencesNV(this GL.NVExtension glInstance, int n, ref uint fences)
        {
            fixed (uint* fences_ptr = &fences) // RefInsteadOfPointerLayer
            {
                glInstance.GenFencesNV(n, fences_ptr);
            }
        }

        // GetFenceivNV overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetFenceivNV(this GL.NVExtension glInstance, uint fence, FenceParameterNameNV pname, Span<int> parameters)
        {
            fixed (int* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.GetFenceivNV(fence, pname, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetFenceivNV(this GL.NVExtension glInstance, uint fence, FenceParameterNameNV pname, int[] parameters)
        {
            fixed (int* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.GetFenceivNV(fence, pname, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void GetFenceivNV(this GL.NVExtension glInstance, uint fence, FenceParameterNameNV pname, ref int parameters)
        {
            fixed (int* parameters_ptr = &parameters) // RefInsteadOfPointerLayer
            {
                glInstance.GetFenceivNV(fence, pname, parameters_ptr);
            }
        }

        // ProgramNamedParameter4fNV overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void ProgramNamedParameter4fNV(this GL.NVExtension glInstance, ProgramHandle id, int len, ReadOnlySpan<byte> name, float x, float y, float z, float w)
        {
            fixed (byte* name_ptr = name) // SpanOrArrayLayer
            {
                glInstance.ProgramNamedParameter4fNV(id, len, name_ptr, x, y, z, w);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void ProgramNamedParameter4fNV(this GL.NVExtension glInstance, ProgramHandle id, int len, byte[] name, float x, float y, float z, float w)
        {
            fixed (byte* name_ptr = name) // SpanOrArrayLayer
            {
                glInstance.ProgramNamedParameter4fNV(id, len, name_ptr, x, y, z, w);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void ProgramNamedParameter4fNV(this GL.NVExtension glInstance, ProgramHandle id, int len, in byte name, float x, float y, float z, float w)
        {
            fixed (byte* name_ptr = &name) // RefInsteadOfPointerLayer
            {
                glInstance.ProgramNamedParameter4fNV(id, len, name_ptr, x, y, z, w);
            }
        }

        // ProgramNamedParameter4fvNV overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void ProgramNamedParameter4fvNV(this GL.NVExtension glInstance, ProgramHandle id, int len, ReadOnlySpan<byte> name, ReadOnlySpan<float> v)
        {
            fixed (byte* name_ptr = name) // SpanOrArrayLayer
            {
                fixed (float* v_ptr = v) // SpanOrArrayLayer
                {
                    glInstance.ProgramNamedParameter4fvNV(id, len, name_ptr, v_ptr);
                }
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void ProgramNamedParameter4fvNV(this GL.NVExtension glInstance, ProgramHandle id, int len, byte[] name, float[] v)
        {
            fixed (byte* name_ptr = name) // SpanOrArrayLayer
            {
                fixed (float* v_ptr = v) // SpanOrArrayLayer
                {
                    glInstance.ProgramNamedParameter4fvNV(id, len, name_ptr, v_ptr);
                }
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void ProgramNamedParameter4fvNV(this GL.NVExtension glInstance, ProgramHandle id, int len, in byte name, in float v)
        {
            fixed (byte* name_ptr = &name) // RefInsteadOfPointerLayer
            fixed (float* v_ptr = &v) // RefInsteadOfPointerLayer
            {
                glInstance.ProgramNamedParameter4fvNV(id, len, name_ptr, v_ptr);
            }
        }

        // ProgramNamedParameter4dNV overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void ProgramNamedParameter4dNV(this GL.NVExtension glInstance, ProgramHandle id, int len, ReadOnlySpan<byte> name, double x, double y, double z, double w)
        {
            fixed (byte* name_ptr = name) // SpanOrArrayLayer
            {
                glInstance.ProgramNamedParameter4dNV(id, len, name_ptr, x, y, z, w);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void ProgramNamedParameter4dNV(this GL.NVExtension glInstance, ProgramHandle id, int len, byte[] name, double x, double y, double z, double w)
        {
            fixed (byte* name_ptr = name) // SpanOrArrayLayer
            {
                glInstance.ProgramNamedParameter4dNV(id, len, name_ptr, x, y, z, w);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void ProgramNamedParameter4dNV(this GL.NVExtension glInstance, ProgramHandle id, int len, in byte name, double x, double y, double z, double w)
        {
            fixed (byte* name_ptr = &name) // RefInsteadOfPointerLayer
            {
                glInstance.ProgramNamedParameter4dNV(id, len, name_ptr, x, y, z, w);
            }
        }

        // ProgramNamedParameter4dvNV overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void ProgramNamedParameter4dvNV(this GL.NVExtension glInstance, ProgramHandle id, int len, ReadOnlySpan<byte> name, ReadOnlySpan<double> v)
        {
            fixed (byte* name_ptr = name) // SpanOrArrayLayer
            {
                fixed (double* v_ptr = v) // SpanOrArrayLayer
                {
                    glInstance.ProgramNamedParameter4dvNV(id, len, name_ptr, v_ptr);
                }
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void ProgramNamedParameter4dvNV(this GL.NVExtension glInstance, ProgramHandle id, int len, byte[] name, double[] v)
        {
            fixed (byte* name_ptr = name) // SpanOrArrayLayer
            {
                fixed (double* v_ptr = v) // SpanOrArrayLayer
                {
                    glInstance.ProgramNamedParameter4dvNV(id, len, name_ptr, v_ptr);
                }
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void ProgramNamedParameter4dvNV(this GL.NVExtension glInstance, ProgramHandle id, int len, in byte name, in double v)
        {
            fixed (byte* name_ptr = &name) // RefInsteadOfPointerLayer
            fixed (double* v_ptr = &v) // RefInsteadOfPointerLayer
            {
                glInstance.ProgramNamedParameter4dvNV(id, len, name_ptr, v_ptr);
            }
        }

        // GetProgramNamedParameterfvNV overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetProgramNamedParameterfvNV(this GL.NVExtension glInstance, ProgramHandle id, int len, ReadOnlySpan<byte> name, Span<float> parameters)
        {
            fixed (byte* name_ptr = name) // SpanOrArrayLayer
            {
                fixed (float* parameters_ptr = parameters) // SpanOrArrayLayer
                {
                    glInstance.GetProgramNamedParameterfvNV(id, len, name_ptr, parameters_ptr);
                }
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetProgramNamedParameterfvNV(this GL.NVExtension glInstance, ProgramHandle id, int len, byte[] name, float[] parameters)
        {
            fixed (byte* name_ptr = name) // SpanOrArrayLayer
            {
                fixed (float* parameters_ptr = parameters) // SpanOrArrayLayer
                {
                    glInstance.GetProgramNamedParameterfvNV(id, len, name_ptr, parameters_ptr);
                }
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void GetProgramNamedParameterfvNV(this GL.NVExtension glInstance, ProgramHandle id, int len, in byte name, ref float parameters)
        {
            fixed (byte* name_ptr = &name) // RefInsteadOfPointerLayer
            fixed (float* parameters_ptr = &parameters) // RefInsteadOfPointerLayer
            {
                glInstance.GetProgramNamedParameterfvNV(id, len, name_ptr, parameters_ptr);
            }
        }

        // GetProgramNamedParameterdvNV overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetProgramNamedParameterdvNV(this GL.NVExtension glInstance, ProgramHandle id, int len, ReadOnlySpan<byte> name, Span<double> parameters)
        {
            fixed (byte* name_ptr = name) // SpanOrArrayLayer
            {
                fixed (double* parameters_ptr = parameters) // SpanOrArrayLayer
                {
                    glInstance.GetProgramNamedParameterdvNV(id, len, name_ptr, parameters_ptr);
                }
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetProgramNamedParameterdvNV(this GL.NVExtension glInstance, ProgramHandle id, int len, byte[] name, double[] parameters)
        {
            fixed (byte* name_ptr = name) // SpanOrArrayLayer
            {
                fixed (double* parameters_ptr = parameters) // SpanOrArrayLayer
                {
                    glInstance.GetProgramNamedParameterdvNV(id, len, name_ptr, parameters_ptr);
                }
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void GetProgramNamedParameterdvNV(this GL.NVExtension glInstance, ProgramHandle id, int len, in byte name, ref double parameters)
        {
            fixed (byte* name_ptr = &name) // RefInsteadOfPointerLayer
            fixed (double* parameters_ptr = &parameters) // RefInsteadOfPointerLayer
            {
                glInstance.GetProgramNamedParameterdvNV(id, len, name_ptr, parameters_ptr);
            }
        }

        // RasterSamplesEXT overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.BoolOverloader
        public static unsafe void RasterSamplesEXT(this GL.NVExtension glInstance, uint samples, bool fixedsamplelocations)
        {
            var fixedsamplelocations_byte = (byte)(fixedsamplelocations ? 1 : 0);
            glInstance.RasterSamplesEXT(samples, fixedsamplelocations_byte);
        }

        // CoverageModulationTableNV overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void CoverageModulationTableNV(this GL.NVExtension glInstance, ReadOnlySpan<float> v)
        {
            var n = (int)(v.Length);
            fixed (float* v_ptr = v) // SpanOrArrayLayer
            {
                glInstance.CoverageModulationTableNV(n, v_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void CoverageModulationTableNV(this GL.NVExtension glInstance, float[] v)
        {
            var n = (int)(v.Length);
            fixed (float* v_ptr = v) // SpanOrArrayLayer
            {
                glInstance.CoverageModulationTableNV(n, v_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void CoverageModulationTableNV(this GL.NVExtension glInstance, int n, in float v)
        {
            fixed (float* v_ptr = &v) // RefInsteadOfPointerLayer
            {
                glInstance.CoverageModulationTableNV(n, v_ptr);
            }
        }

        // GetCoverageModulationTableNV overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void GetCoverageModulationTableNV(this GL.NVExtension glInstance, int bufSize, ref float v)
        {
            fixed (float* v_ptr = &v) // RefInsteadOfPointerLayer
            {
                glInstance.GetCoverageModulationTableNV(bufSize, v_ptr);
            }
        }

        // ProgramLocalParameterI4ivNV overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void ProgramLocalParameterI4ivNV(this GL.NVExtension glInstance, ProgramTarget target, uint index, ReadOnlySpan<int> parameters)
        {
            fixed (int* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.ProgramLocalParameterI4ivNV(target, index, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void ProgramLocalParameterI4ivNV(this GL.NVExtension glInstance, ProgramTarget target, uint index, int[] parameters)
        {
            fixed (int* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.ProgramLocalParameterI4ivNV(target, index, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void ProgramLocalParameterI4ivNV(this GL.NVExtension glInstance, ProgramTarget target, uint index, in int parameters)
        {
            fixed (int* parameters_ptr = &parameters) // RefInsteadOfPointerLayer
            {
                glInstance.ProgramLocalParameterI4ivNV(target, index, parameters_ptr);
            }
        }

        // ProgramLocalParametersI4ivNV overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void ProgramLocalParametersI4ivNV(this GL.NVExtension glInstance, ProgramTarget target, uint index, ReadOnlySpan<int> parameters)
        {
            var count = (int)(parameters.Length / 4);
            fixed (int* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.ProgramLocalParametersI4ivNV(target, index, count, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void ProgramLocalParametersI4ivNV(this GL.NVExtension glInstance, ProgramTarget target, uint index, int[] parameters)
        {
            var count = (int)(parameters.Length / 4);
            fixed (int* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.ProgramLocalParametersI4ivNV(target, index, count, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void ProgramLocalParametersI4ivNV(this GL.NVExtension glInstance, ProgramTarget target, uint index, int count, in int parameters)
        {
            fixed (int* parameters_ptr = &parameters) // RefInsteadOfPointerLayer
            {
                glInstance.ProgramLocalParametersI4ivNV(target, index, count, parameters_ptr);
            }
        }

        // ProgramLocalParameterI4uivNV overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void ProgramLocalParameterI4uivNV(this GL.NVExtension glInstance, ProgramTarget target, uint index, ReadOnlySpan<uint> parameters)
        {
            fixed (uint* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.ProgramLocalParameterI4uivNV(target, index, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void ProgramLocalParameterI4uivNV(this GL.NVExtension glInstance, ProgramTarget target, uint index, uint[] parameters)
        {
            fixed (uint* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.ProgramLocalParameterI4uivNV(target, index, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void ProgramLocalParameterI4uivNV(this GL.NVExtension glInstance, ProgramTarget target, uint index, in uint parameters)
        {
            fixed (uint* parameters_ptr = &parameters) // RefInsteadOfPointerLayer
            {
                glInstance.ProgramLocalParameterI4uivNV(target, index, parameters_ptr);
            }
        }

        // ProgramLocalParametersI4uivNV overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void ProgramLocalParametersI4uivNV(this GL.NVExtension glInstance, ProgramTarget target, uint index, ReadOnlySpan<uint> parameters)
        {
            var count = (int)(parameters.Length / 4);
            fixed (uint* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.ProgramLocalParametersI4uivNV(target, index, count, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void ProgramLocalParametersI4uivNV(this GL.NVExtension glInstance, ProgramTarget target, uint index, uint[] parameters)
        {
            var count = (int)(parameters.Length / 4);
            fixed (uint* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.ProgramLocalParametersI4uivNV(target, index, count, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void ProgramLocalParametersI4uivNV(this GL.NVExtension glInstance, ProgramTarget target, uint index, int count, in uint parameters)
        {
            fixed (uint* parameters_ptr = &parameters) // RefInsteadOfPointerLayer
            {
                glInstance.ProgramLocalParametersI4uivNV(target, index, count, parameters_ptr);
            }
        }

        // ProgramEnvParameterI4ivNV overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void ProgramEnvParameterI4ivNV(this GL.NVExtension glInstance, ProgramTarget target, uint index, ReadOnlySpan<int> parameters)
        {
            fixed (int* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.ProgramEnvParameterI4ivNV(target, index, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void ProgramEnvParameterI4ivNV(this GL.NVExtension glInstance, ProgramTarget target, uint index, int[] parameters)
        {
            fixed (int* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.ProgramEnvParameterI4ivNV(target, index, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void ProgramEnvParameterI4ivNV(this GL.NVExtension glInstance, ProgramTarget target, uint index, in int parameters)
        {
            fixed (int* parameters_ptr = &parameters) // RefInsteadOfPointerLayer
            {
                glInstance.ProgramEnvParameterI4ivNV(target, index, parameters_ptr);
            }
        }

        // ProgramEnvParametersI4ivNV overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void ProgramEnvParametersI4ivNV(this GL.NVExtension glInstance, ProgramTarget target, uint index, ReadOnlySpan<int> parameters)
        {
            var count = (int)(parameters.Length / 4);
            fixed (int* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.ProgramEnvParametersI4ivNV(target, index, count, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void ProgramEnvParametersI4ivNV(this GL.NVExtension glInstance, ProgramTarget target, uint index, int[] parameters)
        {
            var count = (int)(parameters.Length / 4);
            fixed (int* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.ProgramEnvParametersI4ivNV(target, index, count, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void ProgramEnvParametersI4ivNV(this GL.NVExtension glInstance, ProgramTarget target, uint index, int count, in int parameters)
        {
            fixed (int* parameters_ptr = &parameters) // RefInsteadOfPointerLayer
            {
                glInstance.ProgramEnvParametersI4ivNV(target, index, count, parameters_ptr);
            }
        }

        // ProgramEnvParameterI4uivNV overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void ProgramEnvParameterI4uivNV(this GL.NVExtension glInstance, ProgramTarget target, uint index, ReadOnlySpan<uint> parameters)
        {
            fixed (uint* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.ProgramEnvParameterI4uivNV(target, index, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void ProgramEnvParameterI4uivNV(this GL.NVExtension glInstance, ProgramTarget target, uint index, uint[] parameters)
        {
            fixed (uint* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.ProgramEnvParameterI4uivNV(target, index, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void ProgramEnvParameterI4uivNV(this GL.NVExtension glInstance, ProgramTarget target, uint index, in uint parameters)
        {
            fixed (uint* parameters_ptr = &parameters) // RefInsteadOfPointerLayer
            {
                glInstance.ProgramEnvParameterI4uivNV(target, index, parameters_ptr);
            }
        }

        // ProgramEnvParametersI4uivNV overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void ProgramEnvParametersI4uivNV(this GL.NVExtension glInstance, ProgramTarget target, uint index, ReadOnlySpan<uint> parameters)
        {
            var count = (int)(parameters.Length / 4);
            fixed (uint* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.ProgramEnvParametersI4uivNV(target, index, count, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void ProgramEnvParametersI4uivNV(this GL.NVExtension glInstance, ProgramTarget target, uint index, uint[] parameters)
        {
            var count = (int)(parameters.Length / 4);
            fixed (uint* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.ProgramEnvParametersI4uivNV(target, index, count, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void ProgramEnvParametersI4uivNV(this GL.NVExtension glInstance, ProgramTarget target, uint index, int count, in uint parameters)
        {
            fixed (uint* parameters_ptr = &parameters) // RefInsteadOfPointerLayer
            {
                glInstance.ProgramEnvParametersI4uivNV(target, index, count, parameters_ptr);
            }
        }

        // GetProgramLocalParameterIivNV overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetProgramLocalParameterIivNV(this GL.NVExtension glInstance, ProgramTarget target, uint index, Span<int> parameters)
        {
            fixed (int* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.GetProgramLocalParameterIivNV(target, index, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetProgramLocalParameterIivNV(this GL.NVExtension glInstance, ProgramTarget target, uint index, int[] parameters)
        {
            fixed (int* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.GetProgramLocalParameterIivNV(target, index, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void GetProgramLocalParameterIivNV(this GL.NVExtension glInstance, ProgramTarget target, uint index, ref int parameters)
        {
            fixed (int* parameters_ptr = &parameters) // RefInsteadOfPointerLayer
            {
                glInstance.GetProgramLocalParameterIivNV(target, index, parameters_ptr);
            }
        }

        // GetProgramLocalParameterIuivNV overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetProgramLocalParameterIuivNV(this GL.NVExtension glInstance, ProgramTarget target, uint index, Span<uint> parameters)
        {
            fixed (uint* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.GetProgramLocalParameterIuivNV(target, index, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetProgramLocalParameterIuivNV(this GL.NVExtension glInstance, ProgramTarget target, uint index, uint[] parameters)
        {
            fixed (uint* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.GetProgramLocalParameterIuivNV(target, index, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void GetProgramLocalParameterIuivNV(this GL.NVExtension glInstance, ProgramTarget target, uint index, ref uint parameters)
        {
            fixed (uint* parameters_ptr = &parameters) // RefInsteadOfPointerLayer
            {
                glInstance.GetProgramLocalParameterIuivNV(target, index, parameters_ptr);
            }
        }

        // GetProgramEnvParameterIivNV overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetProgramEnvParameterIivNV(this GL.NVExtension glInstance, ProgramTarget target, uint index, Span<int> parameters)
        {
            fixed (int* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.GetProgramEnvParameterIivNV(target, index, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetProgramEnvParameterIivNV(this GL.NVExtension glInstance, ProgramTarget target, uint index, int[] parameters)
        {
            fixed (int* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.GetProgramEnvParameterIivNV(target, index, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void GetProgramEnvParameterIivNV(this GL.NVExtension glInstance, ProgramTarget target, uint index, ref int parameters)
        {
            fixed (int* parameters_ptr = &parameters) // RefInsteadOfPointerLayer
            {
                glInstance.GetProgramEnvParameterIivNV(target, index, parameters_ptr);
            }
        }

        // GetProgramEnvParameterIuivNV overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetProgramEnvParameterIuivNV(this GL.NVExtension glInstance, ProgramTarget target, uint index, Span<uint> parameters)
        {
            fixed (uint* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.GetProgramEnvParameterIuivNV(target, index, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetProgramEnvParameterIuivNV(this GL.NVExtension glInstance, ProgramTarget target, uint index, uint[] parameters)
        {
            fixed (uint* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.GetProgramEnvParameterIuivNV(target, index, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void GetProgramEnvParameterIuivNV(this GL.NVExtension glInstance, ProgramTarget target, uint index, ref uint parameters)
        {
            fixed (uint* parameters_ptr = &parameters) // RefInsteadOfPointerLayer
            {
                glInstance.GetProgramEnvParameterIuivNV(target, index, parameters_ptr);
            }
        }

        // ProgramSubroutineParametersuivNV overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void ProgramSubroutineParametersuivNV(this GL.NVExtension glInstance, GLEnum target, ReadOnlySpan<uint> parameters)
        {
            var count = (int)(parameters.Length);
            fixed (uint* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.ProgramSubroutineParametersuivNV(target, count, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void ProgramSubroutineParametersuivNV(this GL.NVExtension glInstance, GLEnum target, uint[] parameters)
        {
            var count = (int)(parameters.Length);
            fixed (uint* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.ProgramSubroutineParametersuivNV(target, count, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void ProgramSubroutineParametersuivNV(this GL.NVExtension glInstance, GLEnum target, int count, in uint parameters)
        {
            fixed (uint* parameters_ptr = &parameters) // RefInsteadOfPointerLayer
            {
                glInstance.ProgramSubroutineParametersuivNV(target, count, parameters_ptr);
            }
        }

        // GetProgramSubroutineParameteruivNV overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetProgramSubroutineParameteruivNV(this GL.NVExtension glInstance, GLEnum target, uint index, Span<uint> param)
        {
            fixed (uint* param_ptr = param) // SpanOrArrayLayer
            {
                glInstance.GetProgramSubroutineParameteruivNV(target, index, param_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetProgramSubroutineParameteruivNV(this GL.NVExtension glInstance, GLEnum target, uint index, uint[] param)
        {
            fixed (uint* param_ptr = param) // SpanOrArrayLayer
            {
                glInstance.GetProgramSubroutineParameteruivNV(target, index, param_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void GetProgramSubroutineParameteruivNV(this GL.NVExtension glInstance, GLEnum target, uint index, ref uint param)
        {
            fixed (uint* param_ptr = &param) // RefInsteadOfPointerLayer
            {
                glInstance.GetProgramSubroutineParameteruivNV(target, index, param_ptr);
            }
        }

        // Uniform1i64vNV overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void Uniform1i64vNV(this GL.NVExtension glInstance, int location, ReadOnlySpan<long> value)
        {
            var count = (int)(value.Length / 1);
            fixed (long* value_ptr = value) // SpanOrArrayLayer
            {
                glInstance.Uniform1i64vNV(location, count, value_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void Uniform1i64vNV(this GL.NVExtension glInstance, int location, long[] value)
        {
            var count = (int)(value.Length / 1);
            fixed (long* value_ptr = value) // SpanOrArrayLayer
            {
                glInstance.Uniform1i64vNV(location, count, value_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void Uniform1i64vNV(this GL.NVExtension glInstance, int location, int count, in long value)
        {
            fixed (long* value_ptr = &value) // RefInsteadOfPointerLayer
            {
                glInstance.Uniform1i64vNV(location, count, value_ptr);
            }
        }

        // Uniform2i64vNV overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void Uniform2i64vNV(this GL.NVExtension glInstance, int location, ReadOnlySpan<long> value)
        {
            var count = (int)(value.Length / 2);
            fixed (long* value_ptr = value) // SpanOrArrayLayer
            {
                glInstance.Uniform2i64vNV(location, count, value_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void Uniform2i64vNV(this GL.NVExtension glInstance, int location, long[] value)
        {
            var count = (int)(value.Length / 2);
            fixed (long* value_ptr = value) // SpanOrArrayLayer
            {
                glInstance.Uniform2i64vNV(location, count, value_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void Uniform2i64vNV(this GL.NVExtension glInstance, int location, int count, in long value)
        {
            fixed (long* value_ptr = &value) // RefInsteadOfPointerLayer
            {
                glInstance.Uniform2i64vNV(location, count, value_ptr);
            }
        }

        // Uniform3i64vNV overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void Uniform3i64vNV(this GL.NVExtension glInstance, int location, ReadOnlySpan<long> value)
        {
            var count = (int)(value.Length / 3);
            fixed (long* value_ptr = value) // SpanOrArrayLayer
            {
                glInstance.Uniform3i64vNV(location, count, value_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void Uniform3i64vNV(this GL.NVExtension glInstance, int location, long[] value)
        {
            var count = (int)(value.Length / 3);
            fixed (long* value_ptr = value) // SpanOrArrayLayer
            {
                glInstance.Uniform3i64vNV(location, count, value_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void Uniform3i64vNV(this GL.NVExtension glInstance, int location, int count, in long value)
        {
            fixed (long* value_ptr = &value) // RefInsteadOfPointerLayer
            {
                glInstance.Uniform3i64vNV(location, count, value_ptr);
            }
        }

        // Uniform4i64vNV overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void Uniform4i64vNV(this GL.NVExtension glInstance, int location, ReadOnlySpan<long> value)
        {
            var count = (int)(value.Length / 4);
            fixed (long* value_ptr = value) // SpanOrArrayLayer
            {
                glInstance.Uniform4i64vNV(location, count, value_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void Uniform4i64vNV(this GL.NVExtension glInstance, int location, long[] value)
        {
            var count = (int)(value.Length / 4);
            fixed (long* value_ptr = value) // SpanOrArrayLayer
            {
                glInstance.Uniform4i64vNV(location, count, value_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void Uniform4i64vNV(this GL.NVExtension glInstance, int location, int count, in long value)
        {
            fixed (long* value_ptr = &value) // RefInsteadOfPointerLayer
            {
                glInstance.Uniform4i64vNV(location, count, value_ptr);
            }
        }

        // Uniform1ui64vNV overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void Uniform1ui64vNV(this GL.NVExtension glInstance, int location, ReadOnlySpan<ulong> value)
        {
            var count = (int)(value.Length / 1);
            fixed (ulong* value_ptr = value) // SpanOrArrayLayer
            {
                glInstance.Uniform1ui64vNV(location, count, value_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void Uniform1ui64vNV(this GL.NVExtension glInstance, int location, ulong[] value)
        {
            var count = (int)(value.Length / 1);
            fixed (ulong* value_ptr = value) // SpanOrArrayLayer
            {
                glInstance.Uniform1ui64vNV(location, count, value_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void Uniform1ui64vNV(this GL.NVExtension glInstance, int location, int count, in ulong value)
        {
            fixed (ulong* value_ptr = &value) // RefInsteadOfPointerLayer
            {
                glInstance.Uniform1ui64vNV(location, count, value_ptr);
            }
        }

        // Uniform2ui64vNV overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void Uniform2ui64vNV(this GL.NVExtension glInstance, int location, ReadOnlySpan<ulong> value)
        {
            var count = (int)(value.Length / 2);
            fixed (ulong* value_ptr = value) // SpanOrArrayLayer
            {
                glInstance.Uniform2ui64vNV(location, count, value_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void Uniform2ui64vNV(this GL.NVExtension glInstance, int location, ulong[] value)
        {
            var count = (int)(value.Length / 2);
            fixed (ulong* value_ptr = value) // SpanOrArrayLayer
            {
                glInstance.Uniform2ui64vNV(location, count, value_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void Uniform2ui64vNV(this GL.NVExtension glInstance, int location, int count, in ulong value)
        {
            fixed (ulong* value_ptr = &value) // RefInsteadOfPointerLayer
            {
                glInstance.Uniform2ui64vNV(location, count, value_ptr);
            }
        }

        // Uniform3ui64vNV overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void Uniform3ui64vNV(this GL.NVExtension glInstance, int location, ReadOnlySpan<ulong> value)
        {
            var count = (int)(value.Length / 3);
            fixed (ulong* value_ptr = value) // SpanOrArrayLayer
            {
                glInstance.Uniform3ui64vNV(location, count, value_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void Uniform3ui64vNV(this GL.NVExtension glInstance, int location, ulong[] value)
        {
            var count = (int)(value.Length / 3);
            fixed (ulong* value_ptr = value) // SpanOrArrayLayer
            {
                glInstance.Uniform3ui64vNV(location, count, value_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void Uniform3ui64vNV(this GL.NVExtension glInstance, int location, int count, in ulong value)
        {
            fixed (ulong* value_ptr = &value) // RefInsteadOfPointerLayer
            {
                glInstance.Uniform3ui64vNV(location, count, value_ptr);
            }
        }

        // Uniform4ui64vNV overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void Uniform4ui64vNV(this GL.NVExtension glInstance, int location, ReadOnlySpan<ulong> value)
        {
            var count = (int)(value.Length / 4);
            fixed (ulong* value_ptr = value) // SpanOrArrayLayer
            {
                glInstance.Uniform4ui64vNV(location, count, value_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void Uniform4ui64vNV(this GL.NVExtension glInstance, int location, ulong[] value)
        {
            var count = (int)(value.Length / 4);
            fixed (ulong* value_ptr = value) // SpanOrArrayLayer
            {
                glInstance.Uniform4ui64vNV(location, count, value_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void Uniform4ui64vNV(this GL.NVExtension glInstance, int location, int count, in ulong value)
        {
            fixed (ulong* value_ptr = &value) // RefInsteadOfPointerLayer
            {
                glInstance.Uniform4ui64vNV(location, count, value_ptr);
            }
        }

        // GetUniformi64vNV overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetUniformi64vNV(this GL.NVExtension glInstance, ProgramHandle program, int location, Span<long> parameters)
        {
            fixed (long* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.GetUniformi64vNV(program, location, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetUniformi64vNV(this GL.NVExtension glInstance, ProgramHandle program, int location, long[] parameters)
        {
            fixed (long* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.GetUniformi64vNV(program, location, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void GetUniformi64vNV(this GL.NVExtension glInstance, ProgramHandle program, int location, ref long parameters)
        {
            fixed (long* parameters_ptr = &parameters) // RefInsteadOfPointerLayer
            {
                glInstance.GetUniformi64vNV(program, location, parameters_ptr);
            }
        }

        // ProgramUniform1i64vNV overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void ProgramUniform1i64vNV(this GL.NVExtension glInstance, ProgramHandle program, int location, ReadOnlySpan<long> value)
        {
            var count = (int)(value.Length);
            fixed (long* value_ptr = value) // SpanOrArrayLayer
            {
                glInstance.ProgramUniform1i64vNV(program, location, count, value_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void ProgramUniform1i64vNV(this GL.NVExtension glInstance, ProgramHandle program, int location, long[] value)
        {
            var count = (int)(value.Length);
            fixed (long* value_ptr = value) // SpanOrArrayLayer
            {
                glInstance.ProgramUniform1i64vNV(program, location, count, value_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void ProgramUniform1i64vNV(this GL.NVExtension glInstance, ProgramHandle program, int location, int count, in long value)
        {
            fixed (long* value_ptr = &value) // RefInsteadOfPointerLayer
            {
                glInstance.ProgramUniform1i64vNV(program, location, count, value_ptr);
            }
        }

        // ProgramUniform2i64vNV overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void ProgramUniform2i64vNV(this GL.NVExtension glInstance, ProgramHandle program, int location, ReadOnlySpan<long> value)
        {
            var count = (int)(value.Length / 2);
            fixed (long* value_ptr = value) // SpanOrArrayLayer
            {
                glInstance.ProgramUniform2i64vNV(program, location, count, value_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void ProgramUniform2i64vNV(this GL.NVExtension glInstance, ProgramHandle program, int location, long[] value)
        {
            var count = (int)(value.Length / 2);
            fixed (long* value_ptr = value) // SpanOrArrayLayer
            {
                glInstance.ProgramUniform2i64vNV(program, location, count, value_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void ProgramUniform2i64vNV(this GL.NVExtension glInstance, ProgramHandle program, int location, int count, in long value)
        {
            fixed (long* value_ptr = &value) // RefInsteadOfPointerLayer
            {
                glInstance.ProgramUniform2i64vNV(program, location, count, value_ptr);
            }
        }

        // ProgramUniform3i64vNV overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void ProgramUniform3i64vNV(this GL.NVExtension glInstance, ProgramHandle program, int location, ReadOnlySpan<long> value)
        {
            var count = (int)(value.Length / 3);
            fixed (long* value_ptr = value) // SpanOrArrayLayer
            {
                glInstance.ProgramUniform3i64vNV(program, location, count, value_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void ProgramUniform3i64vNV(this GL.NVExtension glInstance, ProgramHandle program, int location, long[] value)
        {
            var count = (int)(value.Length / 3);
            fixed (long* value_ptr = value) // SpanOrArrayLayer
            {
                glInstance.ProgramUniform3i64vNV(program, location, count, value_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void ProgramUniform3i64vNV(this GL.NVExtension glInstance, ProgramHandle program, int location, int count, in long value)
        {
            fixed (long* value_ptr = &value) // RefInsteadOfPointerLayer
            {
                glInstance.ProgramUniform3i64vNV(program, location, count, value_ptr);
            }
        }

        // ProgramUniform4i64vNV overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void ProgramUniform4i64vNV(this GL.NVExtension glInstance, ProgramHandle program, int location, ReadOnlySpan<long> value)
        {
            var count = (int)(value.Length / 4);
            fixed (long* value_ptr = value) // SpanOrArrayLayer
            {
                glInstance.ProgramUniform4i64vNV(program, location, count, value_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void ProgramUniform4i64vNV(this GL.NVExtension glInstance, ProgramHandle program, int location, long[] value)
        {
            var count = (int)(value.Length / 4);
            fixed (long* value_ptr = value) // SpanOrArrayLayer
            {
                glInstance.ProgramUniform4i64vNV(program, location, count, value_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void ProgramUniform4i64vNV(this GL.NVExtension glInstance, ProgramHandle program, int location, int count, in long value)
        {
            fixed (long* value_ptr = &value) // RefInsteadOfPointerLayer
            {
                glInstance.ProgramUniform4i64vNV(program, location, count, value_ptr);
            }
        }

        // ProgramUniform1ui64vNV overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void ProgramUniform1ui64vNV(this GL.NVExtension glInstance, ProgramHandle program, int location, ReadOnlySpan<ulong> value)
        {
            var count = (int)(value.Length);
            fixed (ulong* value_ptr = value) // SpanOrArrayLayer
            {
                glInstance.ProgramUniform1ui64vNV(program, location, count, value_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void ProgramUniform1ui64vNV(this GL.NVExtension glInstance, ProgramHandle program, int location, ulong[] value)
        {
            var count = (int)(value.Length);
            fixed (ulong* value_ptr = value) // SpanOrArrayLayer
            {
                glInstance.ProgramUniform1ui64vNV(program, location, count, value_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void ProgramUniform1ui64vNV(this GL.NVExtension glInstance, ProgramHandle program, int location, int count, in ulong value)
        {
            fixed (ulong* value_ptr = &value) // RefInsteadOfPointerLayer
            {
                glInstance.ProgramUniform1ui64vNV(program, location, count, value_ptr);
            }
        }

        // ProgramUniform2ui64vNV overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void ProgramUniform2ui64vNV(this GL.NVExtension glInstance, ProgramHandle program, int location, ReadOnlySpan<ulong> value)
        {
            var count = (int)(value.Length / 2);
            fixed (ulong* value_ptr = value) // SpanOrArrayLayer
            {
                glInstance.ProgramUniform2ui64vNV(program, location, count, value_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void ProgramUniform2ui64vNV(this GL.NVExtension glInstance, ProgramHandle program, int location, ulong[] value)
        {
            var count = (int)(value.Length / 2);
            fixed (ulong* value_ptr = value) // SpanOrArrayLayer
            {
                glInstance.ProgramUniform2ui64vNV(program, location, count, value_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void ProgramUniform2ui64vNV(this GL.NVExtension glInstance, ProgramHandle program, int location, int count, in ulong value)
        {
            fixed (ulong* value_ptr = &value) // RefInsteadOfPointerLayer
            {
                glInstance.ProgramUniform2ui64vNV(program, location, count, value_ptr);
            }
        }

        // ProgramUniform3ui64vNV overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void ProgramUniform3ui64vNV(this GL.NVExtension glInstance, ProgramHandle program, int location, ReadOnlySpan<ulong> value)
        {
            var count = (int)(value.Length / 3);
            fixed (ulong* value_ptr = value) // SpanOrArrayLayer
            {
                glInstance.ProgramUniform3ui64vNV(program, location, count, value_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void ProgramUniform3ui64vNV(this GL.NVExtension glInstance, ProgramHandle program, int location, ulong[] value)
        {
            var count = (int)(value.Length / 3);
            fixed (ulong* value_ptr = value) // SpanOrArrayLayer
            {
                glInstance.ProgramUniform3ui64vNV(program, location, count, value_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void ProgramUniform3ui64vNV(this GL.NVExtension glInstance, ProgramHandle program, int location, int count, in ulong value)
        {
            fixed (ulong* value_ptr = &value) // RefInsteadOfPointerLayer
            {
                glInstance.ProgramUniform3ui64vNV(program, location, count, value_ptr);
            }
        }

        // ProgramUniform4ui64vNV overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void ProgramUniform4ui64vNV(this GL.NVExtension glInstance, ProgramHandle program, int location, ReadOnlySpan<ulong> value)
        {
            var count = (int)(value.Length / 4);
            fixed (ulong* value_ptr = value) // SpanOrArrayLayer
            {
                glInstance.ProgramUniform4ui64vNV(program, location, count, value_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void ProgramUniform4ui64vNV(this GL.NVExtension glInstance, ProgramHandle program, int location, ulong[] value)
        {
            var count = (int)(value.Length / 4);
            fixed (ulong* value_ptr = value) // SpanOrArrayLayer
            {
                glInstance.ProgramUniform4ui64vNV(program, location, count, value_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void ProgramUniform4ui64vNV(this GL.NVExtension glInstance, ProgramHandle program, int location, int count, in ulong value)
        {
            fixed (ulong* value_ptr = &value) // RefInsteadOfPointerLayer
            {
                glInstance.ProgramUniform4ui64vNV(program, location, count, value_ptr);
            }
        }

        // Vertex2hvNV overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void Vertex2hvNV(this GL.NVExtension glInstance, ReadOnlySpan<Half> v)
        {
            fixed (Half* v_ptr = v) // SpanOrArrayLayer
            {
                glInstance.Vertex2hvNV(v_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void Vertex2hvNV(this GL.NVExtension glInstance, Half[] v)
        {
            fixed (Half* v_ptr = v) // SpanOrArrayLayer
            {
                glInstance.Vertex2hvNV(v_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void Vertex2hvNV(this GL.NVExtension glInstance, in Half v)
        {
            fixed (Half* v_ptr = &v) // RefInsteadOfPointerLayer
            {
                glInstance.Vertex2hvNV(v_ptr);
            }
        }

        // Vertex3hvNV overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void Vertex3hvNV(this GL.NVExtension glInstance, ReadOnlySpan<Half> v)
        {
            fixed (Half* v_ptr = v) // SpanOrArrayLayer
            {
                glInstance.Vertex3hvNV(v_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void Vertex3hvNV(this GL.NVExtension glInstance, Half[] v)
        {
            fixed (Half* v_ptr = v) // SpanOrArrayLayer
            {
                glInstance.Vertex3hvNV(v_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void Vertex3hvNV(this GL.NVExtension glInstance, in Half v)
        {
            fixed (Half* v_ptr = &v) // RefInsteadOfPointerLayer
            {
                glInstance.Vertex3hvNV(v_ptr);
            }
        }

        // Vertex4hvNV overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void Vertex4hvNV(this GL.NVExtension glInstance, ReadOnlySpan<Half> v)
        {
            fixed (Half* v_ptr = v) // SpanOrArrayLayer
            {
                glInstance.Vertex4hvNV(v_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void Vertex4hvNV(this GL.NVExtension glInstance, Half[] v)
        {
            fixed (Half* v_ptr = v) // SpanOrArrayLayer
            {
                glInstance.Vertex4hvNV(v_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void Vertex4hvNV(this GL.NVExtension glInstance, in Half v)
        {
            fixed (Half* v_ptr = &v) // RefInsteadOfPointerLayer
            {
                glInstance.Vertex4hvNV(v_ptr);
            }
        }

        // Normal3hvNV overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void Normal3hvNV(this GL.NVExtension glInstance, ReadOnlySpan<Half> v)
        {
            fixed (Half* v_ptr = v) // SpanOrArrayLayer
            {
                glInstance.Normal3hvNV(v_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void Normal3hvNV(this GL.NVExtension glInstance, Half[] v)
        {
            fixed (Half* v_ptr = v) // SpanOrArrayLayer
            {
                glInstance.Normal3hvNV(v_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void Normal3hvNV(this GL.NVExtension glInstance, in Half v)
        {
            fixed (Half* v_ptr = &v) // RefInsteadOfPointerLayer
            {
                glInstance.Normal3hvNV(v_ptr);
            }
        }

        // Color3hvNV overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void Color3hvNV(this GL.NVExtension glInstance, ReadOnlySpan<Half> v)
        {
            fixed (Half* v_ptr = v) // SpanOrArrayLayer
            {
                glInstance.Color3hvNV(v_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void Color3hvNV(this GL.NVExtension glInstance, Half[] v)
        {
            fixed (Half* v_ptr = v) // SpanOrArrayLayer
            {
                glInstance.Color3hvNV(v_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void Color3hvNV(this GL.NVExtension glInstance, in Half v)
        {
            fixed (Half* v_ptr = &v) // RefInsteadOfPointerLayer
            {
                glInstance.Color3hvNV(v_ptr);
            }
        }

        // Color4hvNV overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void Color4hvNV(this GL.NVExtension glInstance, ReadOnlySpan<Half> v)
        {
            fixed (Half* v_ptr = v) // SpanOrArrayLayer
            {
                glInstance.Color4hvNV(v_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void Color4hvNV(this GL.NVExtension glInstance, Half[] v)
        {
            fixed (Half* v_ptr = v) // SpanOrArrayLayer
            {
                glInstance.Color4hvNV(v_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void Color4hvNV(this GL.NVExtension glInstance, in Half v)
        {
            fixed (Half* v_ptr = &v) // RefInsteadOfPointerLayer
            {
                glInstance.Color4hvNV(v_ptr);
            }
        }

        // TexCoord1hvNV overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void TexCoord1hvNV(this GL.NVExtension glInstance, ReadOnlySpan<Half> v)
        {
            fixed (Half* v_ptr = v) // SpanOrArrayLayer
            {
                glInstance.TexCoord1hvNV(v_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void TexCoord1hvNV(this GL.NVExtension glInstance, Half[] v)
        {
            fixed (Half* v_ptr = v) // SpanOrArrayLayer
            {
                glInstance.TexCoord1hvNV(v_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void TexCoord1hvNV(this GL.NVExtension glInstance, in Half v)
        {
            fixed (Half* v_ptr = &v) // RefInsteadOfPointerLayer
            {
                glInstance.TexCoord1hvNV(v_ptr);
            }
        }

        // TexCoord2hvNV overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void TexCoord2hvNV(this GL.NVExtension glInstance, ReadOnlySpan<Half> v)
        {
            fixed (Half* v_ptr = v) // SpanOrArrayLayer
            {
                glInstance.TexCoord2hvNV(v_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void TexCoord2hvNV(this GL.NVExtension glInstance, Half[] v)
        {
            fixed (Half* v_ptr = v) // SpanOrArrayLayer
            {
                glInstance.TexCoord2hvNV(v_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void TexCoord2hvNV(this GL.NVExtension glInstance, in Half v)
        {
            fixed (Half* v_ptr = &v) // RefInsteadOfPointerLayer
            {
                glInstance.TexCoord2hvNV(v_ptr);
            }
        }

        // TexCoord3hvNV overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void TexCoord3hvNV(this GL.NVExtension glInstance, ReadOnlySpan<Half> v)
        {
            fixed (Half* v_ptr = v) // SpanOrArrayLayer
            {
                glInstance.TexCoord3hvNV(v_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void TexCoord3hvNV(this GL.NVExtension glInstance, Half[] v)
        {
            fixed (Half* v_ptr = v) // SpanOrArrayLayer
            {
                glInstance.TexCoord3hvNV(v_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void TexCoord3hvNV(this GL.NVExtension glInstance, in Half v)
        {
            fixed (Half* v_ptr = &v) // RefInsteadOfPointerLayer
            {
                glInstance.TexCoord3hvNV(v_ptr);
            }
        }

        // TexCoord4hvNV overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void TexCoord4hvNV(this GL.NVExtension glInstance, ReadOnlySpan<Half> v)
        {
            fixed (Half* v_ptr = v) // SpanOrArrayLayer
            {
                glInstance.TexCoord4hvNV(v_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void TexCoord4hvNV(this GL.NVExtension glInstance, Half[] v)
        {
            fixed (Half* v_ptr = v) // SpanOrArrayLayer
            {
                glInstance.TexCoord4hvNV(v_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void TexCoord4hvNV(this GL.NVExtension glInstance, in Half v)
        {
            fixed (Half* v_ptr = &v) // RefInsteadOfPointerLayer
            {
                glInstance.TexCoord4hvNV(v_ptr);
            }
        }

        // MultiTexCoord1hvNV overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void MultiTexCoord1hvNV(this GL.NVExtension glInstance, TextureUnit target, ReadOnlySpan<Half> v)
        {
            fixed (Half* v_ptr = v) // SpanOrArrayLayer
            {
                glInstance.MultiTexCoord1hvNV(target, v_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void MultiTexCoord1hvNV(this GL.NVExtension glInstance, TextureUnit target, Half[] v)
        {
            fixed (Half* v_ptr = v) // SpanOrArrayLayer
            {
                glInstance.MultiTexCoord1hvNV(target, v_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void MultiTexCoord1hvNV(this GL.NVExtension glInstance, TextureUnit target, in Half v)
        {
            fixed (Half* v_ptr = &v) // RefInsteadOfPointerLayer
            {
                glInstance.MultiTexCoord1hvNV(target, v_ptr);
            }
        }

        // MultiTexCoord2hvNV overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void MultiTexCoord2hvNV(this GL.NVExtension glInstance, TextureUnit target, ReadOnlySpan<Half> v)
        {
            fixed (Half* v_ptr = v) // SpanOrArrayLayer
            {
                glInstance.MultiTexCoord2hvNV(target, v_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void MultiTexCoord2hvNV(this GL.NVExtension glInstance, TextureUnit target, Half[] v)
        {
            fixed (Half* v_ptr = v) // SpanOrArrayLayer
            {
                glInstance.MultiTexCoord2hvNV(target, v_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void MultiTexCoord2hvNV(this GL.NVExtension glInstance, TextureUnit target, in Half v)
        {
            fixed (Half* v_ptr = &v) // RefInsteadOfPointerLayer
            {
                glInstance.MultiTexCoord2hvNV(target, v_ptr);
            }
        }

        // MultiTexCoord3hvNV overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void MultiTexCoord3hvNV(this GL.NVExtension glInstance, TextureUnit target, ReadOnlySpan<Half> v)
        {
            fixed (Half* v_ptr = v) // SpanOrArrayLayer
            {
                glInstance.MultiTexCoord3hvNV(target, v_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void MultiTexCoord3hvNV(this GL.NVExtension glInstance, TextureUnit target, Half[] v)
        {
            fixed (Half* v_ptr = v) // SpanOrArrayLayer
            {
                glInstance.MultiTexCoord3hvNV(target, v_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void MultiTexCoord3hvNV(this GL.NVExtension glInstance, TextureUnit target, in Half v)
        {
            fixed (Half* v_ptr = &v) // RefInsteadOfPointerLayer
            {
                glInstance.MultiTexCoord3hvNV(target, v_ptr);
            }
        }

        // MultiTexCoord4hvNV overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void MultiTexCoord4hvNV(this GL.NVExtension glInstance, TextureUnit target, ReadOnlySpan<Half> v)
        {
            fixed (Half* v_ptr = v) // SpanOrArrayLayer
            {
                glInstance.MultiTexCoord4hvNV(target, v_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void MultiTexCoord4hvNV(this GL.NVExtension glInstance, TextureUnit target, Half[] v)
        {
            fixed (Half* v_ptr = v) // SpanOrArrayLayer
            {
                glInstance.MultiTexCoord4hvNV(target, v_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void MultiTexCoord4hvNV(this GL.NVExtension glInstance, TextureUnit target, in Half v)
        {
            fixed (Half* v_ptr = &v) // RefInsteadOfPointerLayer
            {
                glInstance.MultiTexCoord4hvNV(target, v_ptr);
            }
        }

        // FogCoordhvNV overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void FogCoordhvNV(this GL.NVExtension glInstance, ReadOnlySpan<Half> fog)
        {
            fixed (Half* fog_ptr = fog) // SpanOrArrayLayer
            {
                glInstance.FogCoordhvNV(fog_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void FogCoordhvNV(this GL.NVExtension glInstance, Half[] fog)
        {
            fixed (Half* fog_ptr = fog) // SpanOrArrayLayer
            {
                glInstance.FogCoordhvNV(fog_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void FogCoordhvNV(this GL.NVExtension glInstance, in Half fog)
        {
            fixed (Half* fog_ptr = &fog) // RefInsteadOfPointerLayer
            {
                glInstance.FogCoordhvNV(fog_ptr);
            }
        }

        // SecondaryColor3hvNV overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void SecondaryColor3hvNV(this GL.NVExtension glInstance, ReadOnlySpan<Half> v)
        {
            fixed (Half* v_ptr = v) // SpanOrArrayLayer
            {
                glInstance.SecondaryColor3hvNV(v_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void SecondaryColor3hvNV(this GL.NVExtension glInstance, Half[] v)
        {
            fixed (Half* v_ptr = v) // SpanOrArrayLayer
            {
                glInstance.SecondaryColor3hvNV(v_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void SecondaryColor3hvNV(this GL.NVExtension glInstance, in Half v)
        {
            fixed (Half* v_ptr = &v) // RefInsteadOfPointerLayer
            {
                glInstance.SecondaryColor3hvNV(v_ptr);
            }
        }

        // VertexWeighthvNV overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void VertexWeighthvNV(this GL.NVExtension glInstance, ReadOnlySpan<Half> weight)
        {
            fixed (Half* weight_ptr = weight) // SpanOrArrayLayer
            {
                glInstance.VertexWeighthvNV(weight_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void VertexWeighthvNV(this GL.NVExtension glInstance, Half[] weight)
        {
            fixed (Half* weight_ptr = weight) // SpanOrArrayLayer
            {
                glInstance.VertexWeighthvNV(weight_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void VertexWeighthvNV(this GL.NVExtension glInstance, in Half weight)
        {
            fixed (Half* weight_ptr = &weight) // RefInsteadOfPointerLayer
            {
                glInstance.VertexWeighthvNV(weight_ptr);
            }
        }

        // VertexAttrib1hvNV overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void VertexAttrib1hvNV(this GL.NVExtension glInstance, uint index, ReadOnlySpan<Half> v)
        {
            fixed (Half* v_ptr = v) // SpanOrArrayLayer
            {
                glInstance.VertexAttrib1hvNV(index, v_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void VertexAttrib1hvNV(this GL.NVExtension glInstance, uint index, Half[] v)
        {
            fixed (Half* v_ptr = v) // SpanOrArrayLayer
            {
                glInstance.VertexAttrib1hvNV(index, v_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void VertexAttrib1hvNV(this GL.NVExtension glInstance, uint index, in Half v)
        {
            fixed (Half* v_ptr = &v) // RefInsteadOfPointerLayer
            {
                glInstance.VertexAttrib1hvNV(index, v_ptr);
            }
        }

        // VertexAttrib2hvNV overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void VertexAttrib2hvNV(this GL.NVExtension glInstance, uint index, ReadOnlySpan<Half> v)
        {
            fixed (Half* v_ptr = v) // SpanOrArrayLayer
            {
                glInstance.VertexAttrib2hvNV(index, v_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void VertexAttrib2hvNV(this GL.NVExtension glInstance, uint index, Half[] v)
        {
            fixed (Half* v_ptr = v) // SpanOrArrayLayer
            {
                glInstance.VertexAttrib2hvNV(index, v_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void VertexAttrib2hvNV(this GL.NVExtension glInstance, uint index, in Half v)
        {
            fixed (Half* v_ptr = &v) // RefInsteadOfPointerLayer
            {
                glInstance.VertexAttrib2hvNV(index, v_ptr);
            }
        }

        // VertexAttrib3hvNV overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void VertexAttrib3hvNV(this GL.NVExtension glInstance, uint index, ReadOnlySpan<Half> v)
        {
            fixed (Half* v_ptr = v) // SpanOrArrayLayer
            {
                glInstance.VertexAttrib3hvNV(index, v_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void VertexAttrib3hvNV(this GL.NVExtension glInstance, uint index, Half[] v)
        {
            fixed (Half* v_ptr = v) // SpanOrArrayLayer
            {
                glInstance.VertexAttrib3hvNV(index, v_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void VertexAttrib3hvNV(this GL.NVExtension glInstance, uint index, in Half v)
        {
            fixed (Half* v_ptr = &v) // RefInsteadOfPointerLayer
            {
                glInstance.VertexAttrib3hvNV(index, v_ptr);
            }
        }

        // VertexAttrib4hvNV overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void VertexAttrib4hvNV(this GL.NVExtension glInstance, uint index, ReadOnlySpan<Half> v)
        {
            fixed (Half* v_ptr = v) // SpanOrArrayLayer
            {
                glInstance.VertexAttrib4hvNV(index, v_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void VertexAttrib4hvNV(this GL.NVExtension glInstance, uint index, Half[] v)
        {
            fixed (Half* v_ptr = v) // SpanOrArrayLayer
            {
                glInstance.VertexAttrib4hvNV(index, v_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void VertexAttrib4hvNV(this GL.NVExtension glInstance, uint index, in Half v)
        {
            fixed (Half* v_ptr = &v) // RefInsteadOfPointerLayer
            {
                glInstance.VertexAttrib4hvNV(index, v_ptr);
            }
        }

        // VertexAttribs1hvNV overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void VertexAttribs1hvNV(this GL.NVExtension glInstance, uint index, ReadOnlySpan<Half> v)
        {
            var n = (int)(v.Length);
            fixed (Half* v_ptr = v) // SpanOrArrayLayer
            {
                glInstance.VertexAttribs1hvNV(index, n, v_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void VertexAttribs1hvNV(this GL.NVExtension glInstance, uint index, Half[] v)
        {
            var n = (int)(v.Length);
            fixed (Half* v_ptr = v) // SpanOrArrayLayer
            {
                glInstance.VertexAttribs1hvNV(index, n, v_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void VertexAttribs1hvNV(this GL.NVExtension glInstance, uint index, int n, in Half v)
        {
            fixed (Half* v_ptr = &v) // RefInsteadOfPointerLayer
            {
                glInstance.VertexAttribs1hvNV(index, n, v_ptr);
            }
        }

        // VertexAttribs2hvNV overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void VertexAttribs2hvNV(this GL.NVExtension glInstance, uint index, ReadOnlySpan<Half> v)
        {
            var n = (int)(v.Length);
            fixed (Half* v_ptr = v) // SpanOrArrayLayer
            {
                glInstance.VertexAttribs2hvNV(index, n, v_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void VertexAttribs2hvNV(this GL.NVExtension glInstance, uint index, Half[] v)
        {
            var n = (int)(v.Length);
            fixed (Half* v_ptr = v) // SpanOrArrayLayer
            {
                glInstance.VertexAttribs2hvNV(index, n, v_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void VertexAttribs2hvNV(this GL.NVExtension glInstance, uint index, int n, in Half v)
        {
            fixed (Half* v_ptr = &v) // RefInsteadOfPointerLayer
            {
                glInstance.VertexAttribs2hvNV(index, n, v_ptr);
            }
        }

        // VertexAttribs3hvNV overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void VertexAttribs3hvNV(this GL.NVExtension glInstance, uint index, ReadOnlySpan<Half> v)
        {
            var n = (int)(v.Length);
            fixed (Half* v_ptr = v) // SpanOrArrayLayer
            {
                glInstance.VertexAttribs3hvNV(index, n, v_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void VertexAttribs3hvNV(this GL.NVExtension glInstance, uint index, Half[] v)
        {
            var n = (int)(v.Length);
            fixed (Half* v_ptr = v) // SpanOrArrayLayer
            {
                glInstance.VertexAttribs3hvNV(index, n, v_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void VertexAttribs3hvNV(this GL.NVExtension glInstance, uint index, int n, in Half v)
        {
            fixed (Half* v_ptr = &v) // RefInsteadOfPointerLayer
            {
                glInstance.VertexAttribs3hvNV(index, n, v_ptr);
            }
        }

        // VertexAttribs4hvNV overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void VertexAttribs4hvNV(this GL.NVExtension glInstance, uint index, ReadOnlySpan<Half> v)
        {
            var n = (int)(v.Length);
            fixed (Half* v_ptr = v) // SpanOrArrayLayer
            {
                glInstance.VertexAttribs4hvNV(index, n, v_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void VertexAttribs4hvNV(this GL.NVExtension glInstance, uint index, Half[] v)
        {
            var n = (int)(v.Length);
            fixed (Half* v_ptr = v) // SpanOrArrayLayer
            {
                glInstance.VertexAttribs4hvNV(index, n, v_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void VertexAttribs4hvNV(this GL.NVExtension glInstance, uint index, int n, in Half v)
        {
            fixed (Half* v_ptr = &v) // RefInsteadOfPointerLayer
            {
                glInstance.VertexAttribs4hvNV(index, n, v_ptr);
            }
        }

        // GetInternalformatSampleivNV overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetInternalformatSampleivNV(this GL.NVExtension glInstance, TextureTarget target, InternalFormat internalformat, int samples, InternalFormatPName pname, Span<int> parameters)
        {
            var count = (int)(parameters.Length);
            fixed (int* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.GetInternalformatSampleivNV(target, internalformat, samples, pname, count, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetInternalformatSampleivNV(this GL.NVExtension glInstance, TextureTarget target, InternalFormat internalformat, int samples, InternalFormatPName pname, int[] parameters)
        {
            var count = (int)(parameters.Length);
            fixed (int* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.GetInternalformatSampleivNV(target, internalformat, samples, pname, count, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void GetInternalformatSampleivNV(this GL.NVExtension glInstance, TextureTarget target, InternalFormat internalformat, int samples, InternalFormatPName pname, int count, ref int parameters)
        {
            fixed (int* parameters_ptr = &parameters) // RefInsteadOfPointerLayer
            {
                glInstance.GetInternalformatSampleivNV(target, internalformat, samples, pname, count, parameters_ptr);
            }
        }

        // MulticastBufferSubDataNV overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.VoidPtrToIntPtrOverloader
        public static unsafe void MulticastBufferSubDataNV(this GL.NVExtension glInstance, GLEnum gpuMask, BufferHandle buffer, IntPtr offset, nint size, IntPtr data)
        {
            var data_vptr = (void*)data;
            glInstance.MulticastBufferSubDataNV(gpuMask, buffer, offset, size, data_vptr);
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void MulticastBufferSubDataNV<T1>(this GL.NVExtension glInstance, GLEnum gpuMask, BufferHandle buffer, IntPtr offset, nint size, in T1 data)
            where T1 : unmanaged
        {
            fixed (void* data_ptr = &data) // RefInsteadOfPointerLayer
            {
                glInstance.MulticastBufferSubDataNV(gpuMask, buffer, offset, size, data_ptr);
            }
        }

        // MulticastFramebufferSampleLocationsfvNV overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void MulticastFramebufferSampleLocationsfvNV(this GL.NVExtension glInstance, uint gpu, FramebufferHandle framebuffer, uint start, int count, in float v)
        {
            fixed (float* v_ptr = &v) // RefInsteadOfPointerLayer
            {
                glInstance.MulticastFramebufferSampleLocationsfvNV(gpu, framebuffer, start, count, v_ptr);
            }
        }

        // MulticastGetQueryObjectivNV overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void MulticastGetQueryObjectivNV(this GL.NVExtension glInstance, uint gpu, uint id, GLEnum pname, ref int parameters)
        {
            fixed (int* parameters_ptr = &parameters) // RefInsteadOfPointerLayer
            {
                glInstance.MulticastGetQueryObjectivNV(gpu, id, pname, parameters_ptr);
            }
        }

        // MulticastGetQueryObjectuivNV overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void MulticastGetQueryObjectuivNV(this GL.NVExtension glInstance, uint gpu, uint id, GLEnum pname, ref uint parameters)
        {
            fixed (uint* parameters_ptr = &parameters) // RefInsteadOfPointerLayer
            {
                glInstance.MulticastGetQueryObjectuivNV(gpu, id, pname, parameters_ptr);
            }
        }

        // MulticastGetQueryObjecti64vNV overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void MulticastGetQueryObjecti64vNV(this GL.NVExtension glInstance, uint gpu, uint id, GLEnum pname, ref long parameters)
        {
            fixed (long* parameters_ptr = &parameters) // RefInsteadOfPointerLayer
            {
                glInstance.MulticastGetQueryObjecti64vNV(gpu, id, pname, parameters_ptr);
            }
        }

        // MulticastGetQueryObjectui64vNV overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void MulticastGetQueryObjectui64vNV(this GL.NVExtension glInstance, uint gpu, uint id, GLEnum pname, ref ulong parameters)
        {
            fixed (ulong* parameters_ptr = &parameters) // RefInsteadOfPointerLayer
            {
                glInstance.MulticastGetQueryObjectui64vNV(gpu, id, pname, parameters_ptr);
            }
        }

        // GetMemoryObjectDetachedResourcesuivNV overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void GetMemoryObjectDetachedResourcesuivNV(this GL.NVExtension glInstance, uint memory, GLEnum pname, int first, int count, ref uint parameters)
        {
            fixed (uint* parameters_ptr = &parameters) // RefInsteadOfPointerLayer
            {
                glInstance.GetMemoryObjectDetachedResourcesuivNV(memory, pname, first, count, parameters_ptr);
            }
        }

        // BufferPageCommitmentMemNV overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.BoolOverloader
        public static unsafe void BufferPageCommitmentMemNV(this GL.NVExtension glInstance, BufferStorageTarget target, IntPtr offset, nint size, uint memory, ulong memOffset, bool commit)
        {
            var commit_byte = (byte)(commit ? 1 : 0);
            glInstance.BufferPageCommitmentMemNV(target, offset, size, memory, memOffset, commit_byte);
        }

        // TexPageCommitmentMemNV overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.BoolOverloader
        public static unsafe void TexPageCommitmentMemNV(this GL.NVExtension glInstance, TextureTarget target, int layer, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, uint memory, ulong offset, bool commit)
        {
            var commit_byte = (byte)(commit ? 1 : 0);
            glInstance.TexPageCommitmentMemNV(target, layer, level, xoffset, yoffset, zoffset, width, height, depth, memory, offset, commit_byte);
        }

        // NamedBufferPageCommitmentMemNV overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.BoolOverloader
        public static unsafe void NamedBufferPageCommitmentMemNV(this GL.NVExtension glInstance, BufferHandle buffer, IntPtr offset, nint size, uint memory, ulong memOffset, bool commit)
        {
            var commit_byte = (byte)(commit ? 1 : 0);
            glInstance.NamedBufferPageCommitmentMemNV(buffer, offset, size, memory, memOffset, commit_byte);
        }

        // TexturePageCommitmentMemNV overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.BoolOverloader
        public static unsafe void TexturePageCommitmentMemNV(this GL.NVExtension glInstance, TextureHandle texture, int layer, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, uint memory, ulong offset, bool commit)
        {
            var commit_byte = (byte)(commit ? 1 : 0);
            glInstance.TexturePageCommitmentMemNV(texture, layer, level, xoffset, yoffset, zoffset, width, height, depth, memory, offset, commit_byte);
        }

        // GenOcclusionQueriesNV overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GenOcclusionQueriesNV(this GL.NVExtension glInstance, Span<uint> ids)
        {
            var n = (int)(ids.Length);
            fixed (uint* ids_ptr = ids) // SpanOrArrayLayer
            {
                glInstance.GenOcclusionQueriesNV(n, ids_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GenOcclusionQueriesNV(this GL.NVExtension glInstance, uint[] ids)
        {
            var n = (int)(ids.Length);
            fixed (uint* ids_ptr = ids) // SpanOrArrayLayer
            {
                glInstance.GenOcclusionQueriesNV(n, ids_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void GenOcclusionQueriesNV(this GL.NVExtension glInstance, int n, ref uint ids)
        {
            fixed (uint* ids_ptr = &ids) // RefInsteadOfPointerLayer
            {
                glInstance.GenOcclusionQueriesNV(n, ids_ptr);
            }
        }

        // DeleteOcclusionQueriesNV overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void DeleteOcclusionQueriesNV(this GL.NVExtension glInstance, ReadOnlySpan<uint> ids)
        {
            var n = (int)(ids.Length);
            fixed (uint* ids_ptr = ids) // SpanOrArrayLayer
            {
                glInstance.DeleteOcclusionQueriesNV(n, ids_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void DeleteOcclusionQueriesNV(this GL.NVExtension glInstance, uint[] ids)
        {
            var n = (int)(ids.Length);
            fixed (uint* ids_ptr = ids) // SpanOrArrayLayer
            {
                glInstance.DeleteOcclusionQueriesNV(n, ids_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void DeleteOcclusionQueriesNV(this GL.NVExtension glInstance, int n, in uint ids)
        {
            fixed (uint* ids_ptr = &ids) // RefInsteadOfPointerLayer
            {
                glInstance.DeleteOcclusionQueriesNV(n, ids_ptr);
            }
        }

        // GetOcclusionQueryivNV overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetOcclusionQueryivNV(this GL.NVExtension glInstance, uint id, OcclusionQueryParameterNameNV pname, Span<int> parameters)
        {
            fixed (int* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.GetOcclusionQueryivNV(id, pname, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetOcclusionQueryivNV(this GL.NVExtension glInstance, uint id, OcclusionQueryParameterNameNV pname, int[] parameters)
        {
            fixed (int* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.GetOcclusionQueryivNV(id, pname, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void GetOcclusionQueryivNV(this GL.NVExtension glInstance, uint id, OcclusionQueryParameterNameNV pname, ref int parameters)
        {
            fixed (int* parameters_ptr = &parameters) // RefInsteadOfPointerLayer
            {
                glInstance.GetOcclusionQueryivNV(id, pname, parameters_ptr);
            }
        }

        // GetOcclusionQueryuivNV overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetOcclusionQueryuivNV(this GL.NVExtension glInstance, uint id, OcclusionQueryParameterNameNV pname, Span<uint> parameters)
        {
            fixed (uint* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.GetOcclusionQueryuivNV(id, pname, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetOcclusionQueryuivNV(this GL.NVExtension glInstance, uint id, OcclusionQueryParameterNameNV pname, uint[] parameters)
        {
            fixed (uint* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.GetOcclusionQueryuivNV(id, pname, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void GetOcclusionQueryuivNV(this GL.NVExtension glInstance, uint id, OcclusionQueryParameterNameNV pname, ref uint parameters)
        {
            fixed (uint* parameters_ptr = &parameters) // RefInsteadOfPointerLayer
            {
                glInstance.GetOcclusionQueryuivNV(id, pname, parameters_ptr);
            }
        }

        // ProgramBufferParametersfvNV overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void ProgramBufferParametersfvNV(this GL.NVExtension glInstance, ProgramTarget target, uint bindingIndex, uint wordIndex, ReadOnlySpan<float> parameters)
        {
            var count = (int)(parameters.Length);
            fixed (float* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.ProgramBufferParametersfvNV(target, bindingIndex, wordIndex, count, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void ProgramBufferParametersfvNV(this GL.NVExtension glInstance, ProgramTarget target, uint bindingIndex, uint wordIndex, float[] parameters)
        {
            var count = (int)(parameters.Length);
            fixed (float* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.ProgramBufferParametersfvNV(target, bindingIndex, wordIndex, count, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void ProgramBufferParametersfvNV(this GL.NVExtension glInstance, ProgramTarget target, uint bindingIndex, uint wordIndex, int count, in float parameters)
        {
            fixed (float* parameters_ptr = &parameters) // RefInsteadOfPointerLayer
            {
                glInstance.ProgramBufferParametersfvNV(target, bindingIndex, wordIndex, count, parameters_ptr);
            }
        }

        // ProgramBufferParametersIivNV overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void ProgramBufferParametersIivNV(this GL.NVExtension glInstance, ProgramTarget target, uint bindingIndex, uint wordIndex, ReadOnlySpan<int> parameters)
        {
            var count = (int)(parameters.Length);
            fixed (int* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.ProgramBufferParametersIivNV(target, bindingIndex, wordIndex, count, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void ProgramBufferParametersIivNV(this GL.NVExtension glInstance, ProgramTarget target, uint bindingIndex, uint wordIndex, int[] parameters)
        {
            var count = (int)(parameters.Length);
            fixed (int* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.ProgramBufferParametersIivNV(target, bindingIndex, wordIndex, count, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void ProgramBufferParametersIivNV(this GL.NVExtension glInstance, ProgramTarget target, uint bindingIndex, uint wordIndex, int count, in int parameters)
        {
            fixed (int* parameters_ptr = &parameters) // RefInsteadOfPointerLayer
            {
                glInstance.ProgramBufferParametersIivNV(target, bindingIndex, wordIndex, count, parameters_ptr);
            }
        }

        // ProgramBufferParametersIuivNV overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void ProgramBufferParametersIuivNV(this GL.NVExtension glInstance, ProgramTarget target, uint bindingIndex, uint wordIndex, ReadOnlySpan<uint> parameters)
        {
            var count = (int)(parameters.Length);
            fixed (uint* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.ProgramBufferParametersIuivNV(target, bindingIndex, wordIndex, count, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void ProgramBufferParametersIuivNV(this GL.NVExtension glInstance, ProgramTarget target, uint bindingIndex, uint wordIndex, uint[] parameters)
        {
            var count = (int)(parameters.Length);
            fixed (uint* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.ProgramBufferParametersIuivNV(target, bindingIndex, wordIndex, count, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void ProgramBufferParametersIuivNV(this GL.NVExtension glInstance, ProgramTarget target, uint bindingIndex, uint wordIndex, int count, in uint parameters)
        {
            fixed (uint* parameters_ptr = &parameters) // RefInsteadOfPointerLayer
            {
                glInstance.ProgramBufferParametersIuivNV(target, bindingIndex, wordIndex, count, parameters_ptr);
            }
        }

        // PathCommandsNV overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void PathCommandsNV(this GL.NVExtension glInstance, uint path, ReadOnlySpan<byte> commands, int numCoords, PathCoordType coordType, IntPtr coords)
        {
            var numCommands = (int)(commands.Length);
            fixed (byte* commands_ptr = commands) // SpanOrArrayLayer
            {
                var coords_vptr = (void*)coords;
                glInstance.PathCommandsNV(path, numCommands, commands_ptr, numCoords, coordType, coords_vptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void PathCommandsNV(this GL.NVExtension glInstance, uint path, byte[] commands, int numCoords, PathCoordType coordType, IntPtr coords)
        {
            var numCommands = (int)(commands.Length);
            fixed (byte* commands_ptr = commands) // SpanOrArrayLayer
            {
                var coords_vptr = (void*)coords;
                glInstance.PathCommandsNV(path, numCommands, commands_ptr, numCoords, coordType, coords_vptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void PathCommandsNV(this GL.NVExtension glInstance, uint path, int numCommands, in byte commands, int numCoords, PathCoordType coordType, IntPtr coords)
        {
            fixed (byte* commands_ptr = &commands) // RefInsteadOfPointerLayer
            {
                var coords_vptr = (void*)coords;
                glInstance.PathCommandsNV(path, numCommands, commands_ptr, numCoords, coordType, coords_vptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void PathCommandsNV<T1>(this GL.NVExtension glInstance, uint path, ReadOnlySpan<byte> commands, int numCoords, PathCoordType coordType, ReadOnlySpan<T1> coords)
            where T1 : unmanaged
        {
            var numCommands = (int)(commands.Length);
            fixed (byte* commands_ptr = commands) // SpanOrArrayLayer
            {
                fixed (void* coords_ptr = coords) // SpanOrArrayLayer
                {
                    glInstance.PathCommandsNV(path, numCommands, commands_ptr, numCoords, coordType, coords_ptr);
                }
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void PathCommandsNV<T1>(this GL.NVExtension glInstance, uint path, byte[] commands, int numCoords, PathCoordType coordType, T1[] coords)
            where T1 : unmanaged
        {
            var numCommands = (int)(commands.Length);
            fixed (byte* commands_ptr = commands) // SpanOrArrayLayer
            {
                fixed (void* coords_ptr = coords) // SpanOrArrayLayer
                {
                    glInstance.PathCommandsNV(path, numCommands, commands_ptr, numCoords, coordType, coords_ptr);
                }
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void PathCommandsNV<T1>(this GL.NVExtension glInstance, uint path, int numCommands, in byte commands, int numCoords, PathCoordType coordType, in T1 coords)
            where T1 : unmanaged
        {
            fixed (byte* commands_ptr = &commands) // RefInsteadOfPointerLayer
            fixed (void* coords_ptr = &coords) // RefInsteadOfPointerLayer
            {
                glInstance.PathCommandsNV(path, numCommands, commands_ptr, numCoords, coordType, coords_ptr);
            }
        }

        // PathCoordsNV overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.VoidPtrToIntPtrOverloader
        public static unsafe void PathCoordsNV(this GL.NVExtension glInstance, uint path, int numCoords, PathCoordType coordType, IntPtr coords)
        {
            var coords_vptr = (void*)coords;
            glInstance.PathCoordsNV(path, numCoords, coordType, coords_vptr);
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void PathCoordsNV<T1>(this GL.NVExtension glInstance, uint path, int numCoords, PathCoordType coordType, ReadOnlySpan<T1> coords)
            where T1 : unmanaged
        {
            fixed (void* coords_ptr = coords) // SpanOrArrayLayer
            {
                glInstance.PathCoordsNV(path, numCoords, coordType, coords_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void PathCoordsNV<T1>(this GL.NVExtension glInstance, uint path, int numCoords, PathCoordType coordType, T1[] coords)
            where T1 : unmanaged
        {
            fixed (void* coords_ptr = coords) // SpanOrArrayLayer
            {
                glInstance.PathCoordsNV(path, numCoords, coordType, coords_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void PathCoordsNV<T1>(this GL.NVExtension glInstance, uint path, int numCoords, PathCoordType coordType, in T1 coords)
            where T1 : unmanaged
        {
            fixed (void* coords_ptr = &coords) // RefInsteadOfPointerLayer
            {
                glInstance.PathCoordsNV(path, numCoords, coordType, coords_ptr);
            }
        }

        // PathSubCommandsNV overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void PathSubCommandsNV(this GL.NVExtension glInstance, uint path, int commandStart, int commandsToDelete, ReadOnlySpan<byte> commands, int numCoords, PathCoordType coordType, IntPtr coords)
        {
            var numCommands = (int)(commands.Length);
            fixed (byte* commands_ptr = commands) // SpanOrArrayLayer
            {
                var coords_vptr = (void*)coords;
                glInstance.PathSubCommandsNV(path, commandStart, commandsToDelete, numCommands, commands_ptr, numCoords, coordType, coords_vptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void PathSubCommandsNV(this GL.NVExtension glInstance, uint path, int commandStart, int commandsToDelete, byte[] commands, int numCoords, PathCoordType coordType, IntPtr coords)
        {
            var numCommands = (int)(commands.Length);
            fixed (byte* commands_ptr = commands) // SpanOrArrayLayer
            {
                var coords_vptr = (void*)coords;
                glInstance.PathSubCommandsNV(path, commandStart, commandsToDelete, numCommands, commands_ptr, numCoords, coordType, coords_vptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void PathSubCommandsNV(this GL.NVExtension glInstance, uint path, int commandStart, int commandsToDelete, int numCommands, in byte commands, int numCoords, PathCoordType coordType, IntPtr coords)
        {
            fixed (byte* commands_ptr = &commands) // RefInsteadOfPointerLayer
            {
                var coords_vptr = (void*)coords;
                glInstance.PathSubCommandsNV(path, commandStart, commandsToDelete, numCommands, commands_ptr, numCoords, coordType, coords_vptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void PathSubCommandsNV<T1>(this GL.NVExtension glInstance, uint path, int commandStart, int commandsToDelete, ReadOnlySpan<byte> commands, int numCoords, PathCoordType coordType, ReadOnlySpan<T1> coords)
            where T1 : unmanaged
        {
            var numCommands = (int)(commands.Length);
            fixed (byte* commands_ptr = commands) // SpanOrArrayLayer
            {
                fixed (void* coords_ptr = coords) // SpanOrArrayLayer
                {
                    glInstance.PathSubCommandsNV(path, commandStart, commandsToDelete, numCommands, commands_ptr, numCoords, coordType, coords_ptr);
                }
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void PathSubCommandsNV<T1>(this GL.NVExtension glInstance, uint path, int commandStart, int commandsToDelete, byte[] commands, int numCoords, PathCoordType coordType, T1[] coords)
            where T1 : unmanaged
        {
            var numCommands = (int)(commands.Length);
            fixed (byte* commands_ptr = commands) // SpanOrArrayLayer
            {
                fixed (void* coords_ptr = coords) // SpanOrArrayLayer
                {
                    glInstance.PathSubCommandsNV(path, commandStart, commandsToDelete, numCommands, commands_ptr, numCoords, coordType, coords_ptr);
                }
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void PathSubCommandsNV<T1>(this GL.NVExtension glInstance, uint path, int commandStart, int commandsToDelete, int numCommands, in byte commands, int numCoords, PathCoordType coordType, in T1 coords)
            where T1 : unmanaged
        {
            fixed (byte* commands_ptr = &commands) // RefInsteadOfPointerLayer
            fixed (void* coords_ptr = &coords) // RefInsteadOfPointerLayer
            {
                glInstance.PathSubCommandsNV(path, commandStart, commandsToDelete, numCommands, commands_ptr, numCoords, coordType, coords_ptr);
            }
        }

        // PathSubCoordsNV overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.VoidPtrToIntPtrOverloader
        public static unsafe void PathSubCoordsNV(this GL.NVExtension glInstance, uint path, int coordStart, int numCoords, PathCoordType coordType, IntPtr coords)
        {
            var coords_vptr = (void*)coords;
            glInstance.PathSubCoordsNV(path, coordStart, numCoords, coordType, coords_vptr);
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void PathSubCoordsNV<T1>(this GL.NVExtension glInstance, uint path, int coordStart, int numCoords, PathCoordType coordType, ReadOnlySpan<T1> coords)
            where T1 : unmanaged
        {
            fixed (void* coords_ptr = coords) // SpanOrArrayLayer
            {
                glInstance.PathSubCoordsNV(path, coordStart, numCoords, coordType, coords_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void PathSubCoordsNV<T1>(this GL.NVExtension glInstance, uint path, int coordStart, int numCoords, PathCoordType coordType, T1[] coords)
            where T1 : unmanaged
        {
            fixed (void* coords_ptr = coords) // SpanOrArrayLayer
            {
                glInstance.PathSubCoordsNV(path, coordStart, numCoords, coordType, coords_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void PathSubCoordsNV<T1>(this GL.NVExtension glInstance, uint path, int coordStart, int numCoords, PathCoordType coordType, in T1 coords)
            where T1 : unmanaged
        {
            fixed (void* coords_ptr = &coords) // RefInsteadOfPointerLayer
            {
                glInstance.PathSubCoordsNV(path, coordStart, numCoords, coordType, coords_ptr);
            }
        }

        // PathStringNV overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.VoidPtrToIntPtrOverloader
        public static unsafe void PathStringNV(this GL.NVExtension glInstance, uint path, PathStringFormat format, int length, IntPtr pathString)
        {
            var pathString_vptr = (void*)pathString;
            glInstance.PathStringNV(path, format, length, pathString_vptr);
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void PathStringNV<T1>(this GL.NVExtension glInstance, uint path, PathStringFormat format, ReadOnlySpan<T1> pathString)
            where T1 : unmanaged
        {
            var length = (int)(pathString.Length * sizeof(T1));
            fixed (void* pathString_ptr = pathString) // SpanOrArrayLayer
            {
                glInstance.PathStringNV(path, format, length, pathString_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void PathStringNV<T1>(this GL.NVExtension glInstance, uint path, PathStringFormat format, T1[] pathString)
            where T1 : unmanaged
        {
            var length = (int)(pathString.Length * sizeof(T1));
            fixed (void* pathString_ptr = pathString) // SpanOrArrayLayer
            {
                glInstance.PathStringNV(path, format, length, pathString_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void PathStringNV<T1>(this GL.NVExtension glInstance, uint path, PathStringFormat format, int length, in T1 pathString)
            where T1 : unmanaged
        {
            fixed (void* pathString_ptr = &pathString) // RefInsteadOfPointerLayer
            {
                glInstance.PathStringNV(path, format, length, pathString_ptr);
            }
        }

        // PathGlyphsNV overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.VoidPtrToIntPtrOverloader
        public static unsafe void PathGlyphsNV(this GL.NVExtension glInstance, uint firstPathName, PathFontTarget fontTarget, IntPtr fontName, PathFontStyle fontStyle, int numGlyphs, PathElementType type, IntPtr charcodes, PathHandleMissingGlyphs handleMissingGlyphs, uint pathParameterTemplate, float emScale)
        {
            var fontName_vptr = (void*)fontName;
            var charcodes_vptr = (void*)charcodes;
            glInstance.PathGlyphsNV(firstPathName, fontTarget, fontName_vptr, fontStyle, numGlyphs, type, charcodes_vptr, handleMissingGlyphs, pathParameterTemplate, emScale);
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void PathGlyphsNV<T1, T2>(this GL.NVExtension glInstance, uint firstPathName, PathFontTarget fontTarget, ReadOnlySpan<T2> fontName, PathFontStyle fontStyle, int numGlyphs, PathElementType type, ReadOnlySpan<T1> charcodes, PathHandleMissingGlyphs handleMissingGlyphs, uint pathParameterTemplate, float emScale)
            where T1 : unmanaged
            where T2 : unmanaged
        {
            fixed (void* fontName_ptr = fontName) // SpanOrArrayLayer
            {
                fixed (void* charcodes_ptr = charcodes) // SpanOrArrayLayer
                {
                    glInstance.PathGlyphsNV(firstPathName, fontTarget, fontName_ptr, fontStyle, numGlyphs, type, charcodes_ptr, handleMissingGlyphs, pathParameterTemplate, emScale);
                }
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void PathGlyphsNV<T1, T2>(this GL.NVExtension glInstance, uint firstPathName, PathFontTarget fontTarget, T2[] fontName, PathFontStyle fontStyle, int numGlyphs, PathElementType type, T1[] charcodes, PathHandleMissingGlyphs handleMissingGlyphs, uint pathParameterTemplate, float emScale)
            where T1 : unmanaged
            where T2 : unmanaged
        {
            fixed (void* fontName_ptr = fontName) // SpanOrArrayLayer
            {
                fixed (void* charcodes_ptr = charcodes) // SpanOrArrayLayer
                {
                    glInstance.PathGlyphsNV(firstPathName, fontTarget, fontName_ptr, fontStyle, numGlyphs, type, charcodes_ptr, handleMissingGlyphs, pathParameterTemplate, emScale);
                }
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void PathGlyphsNV<T1, T2>(this GL.NVExtension glInstance, uint firstPathName, PathFontTarget fontTarget, in T1 fontName, PathFontStyle fontStyle, int numGlyphs, PathElementType type, in T2 charcodes, PathHandleMissingGlyphs handleMissingGlyphs, uint pathParameterTemplate, float emScale)
            where T1 : unmanaged
            where T2 : unmanaged
        {
            fixed (void* fontName_ptr = &fontName) // RefInsteadOfPointerLayer
            fixed (void* charcodes_ptr = &charcodes) // RefInsteadOfPointerLayer
            {
                glInstance.PathGlyphsNV(firstPathName, fontTarget, fontName_ptr, fontStyle, numGlyphs, type, charcodes_ptr, handleMissingGlyphs, pathParameterTemplate, emScale);
            }
        }

        // PathGlyphRangeNV overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.VoidPtrToIntPtrOverloader
        public static unsafe void PathGlyphRangeNV(this GL.NVExtension glInstance, uint firstPathName, PathFontTarget fontTarget, IntPtr fontName, PathFontStyle fontStyle, uint firstGlyph, int numGlyphs, PathHandleMissingGlyphs handleMissingGlyphs, uint pathParameterTemplate, float emScale)
        {
            var fontName_vptr = (void*)fontName;
            glInstance.PathGlyphRangeNV(firstPathName, fontTarget, fontName_vptr, fontStyle, firstGlyph, numGlyphs, handleMissingGlyphs, pathParameterTemplate, emScale);
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void PathGlyphRangeNV<T1>(this GL.NVExtension glInstance, uint firstPathName, PathFontTarget fontTarget, ReadOnlySpan<T1> fontName, PathFontStyle fontStyle, uint firstGlyph, int numGlyphs, PathHandleMissingGlyphs handleMissingGlyphs, uint pathParameterTemplate, float emScale)
            where T1 : unmanaged
        {
            fixed (void* fontName_ptr = fontName) // SpanOrArrayLayer
            {
                glInstance.PathGlyphRangeNV(firstPathName, fontTarget, fontName_ptr, fontStyle, firstGlyph, numGlyphs, handleMissingGlyphs, pathParameterTemplate, emScale);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void PathGlyphRangeNV<T1>(this GL.NVExtension glInstance, uint firstPathName, PathFontTarget fontTarget, T1[] fontName, PathFontStyle fontStyle, uint firstGlyph, int numGlyphs, PathHandleMissingGlyphs handleMissingGlyphs, uint pathParameterTemplate, float emScale)
            where T1 : unmanaged
        {
            fixed (void* fontName_ptr = fontName) // SpanOrArrayLayer
            {
                glInstance.PathGlyphRangeNV(firstPathName, fontTarget, fontName_ptr, fontStyle, firstGlyph, numGlyphs, handleMissingGlyphs, pathParameterTemplate, emScale);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void PathGlyphRangeNV<T1>(this GL.NVExtension glInstance, uint firstPathName, PathFontTarget fontTarget, in T1 fontName, PathFontStyle fontStyle, uint firstGlyph, int numGlyphs, PathHandleMissingGlyphs handleMissingGlyphs, uint pathParameterTemplate, float emScale)
            where T1 : unmanaged
        {
            fixed (void* fontName_ptr = &fontName) // RefInsteadOfPointerLayer
            {
                glInstance.PathGlyphRangeNV(firstPathName, fontTarget, fontName_ptr, fontStyle, firstGlyph, numGlyphs, handleMissingGlyphs, pathParameterTemplate, emScale);
            }
        }

        // WeightPathsNV overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void WeightPathsNV(this GL.NVExtension glInstance, uint resultPath, int numPaths, ReadOnlySpan<uint> paths, ReadOnlySpan<float> weights)
        {
            fixed (uint* paths_ptr = paths) // SpanOrArrayLayer
            {
                fixed (float* weights_ptr = weights) // SpanOrArrayLayer
                {
                    glInstance.WeightPathsNV(resultPath, numPaths, paths_ptr, weights_ptr);
                }
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void WeightPathsNV(this GL.NVExtension glInstance, uint resultPath, int numPaths, uint[] paths, float[] weights)
        {
            fixed (uint* paths_ptr = paths) // SpanOrArrayLayer
            {
                fixed (float* weights_ptr = weights) // SpanOrArrayLayer
                {
                    glInstance.WeightPathsNV(resultPath, numPaths, paths_ptr, weights_ptr);
                }
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void WeightPathsNV(this GL.NVExtension glInstance, uint resultPath, int numPaths, in uint paths, in float weights)
        {
            fixed (uint* paths_ptr = &paths) // RefInsteadOfPointerLayer
            fixed (float* weights_ptr = &weights) // RefInsteadOfPointerLayer
            {
                glInstance.WeightPathsNV(resultPath, numPaths, paths_ptr, weights_ptr);
            }
        }

        // TransformPathNV overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void TransformPathNV(this GL.NVExtension glInstance, uint resultPath, uint srcPath, PathTransformType transformType, ReadOnlySpan<float> transformValues)
        {
            fixed (float* transformValues_ptr = transformValues) // SpanOrArrayLayer
            {
                glInstance.TransformPathNV(resultPath, srcPath, transformType, transformValues_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void TransformPathNV(this GL.NVExtension glInstance, uint resultPath, uint srcPath, PathTransformType transformType, float[] transformValues)
        {
            fixed (float* transformValues_ptr = transformValues) // SpanOrArrayLayer
            {
                glInstance.TransformPathNV(resultPath, srcPath, transformType, transformValues_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void TransformPathNV(this GL.NVExtension glInstance, uint resultPath, uint srcPath, PathTransformType transformType, in float transformValues)
        {
            fixed (float* transformValues_ptr = &transformValues) // RefInsteadOfPointerLayer
            {
                glInstance.TransformPathNV(resultPath, srcPath, transformType, transformValues_ptr);
            }
        }

        // PathParameterivNV overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void PathParameterivNV(this GL.NVExtension glInstance, uint path, PathParameter pname, ReadOnlySpan<int> value)
        {
            fixed (int* value_ptr = value) // SpanOrArrayLayer
            {
                glInstance.PathParameterivNV(path, pname, value_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void PathParameterivNV(this GL.NVExtension glInstance, uint path, PathParameter pname, int[] value)
        {
            fixed (int* value_ptr = value) // SpanOrArrayLayer
            {
                glInstance.PathParameterivNV(path, pname, value_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void PathParameterivNV(this GL.NVExtension glInstance, uint path, PathParameter pname, in int value)
        {
            fixed (int* value_ptr = &value) // RefInsteadOfPointerLayer
            {
                glInstance.PathParameterivNV(path, pname, value_ptr);
            }
        }

        // PathParameterfvNV overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void PathParameterfvNV(this GL.NVExtension glInstance, uint path, PathParameter pname, ReadOnlySpan<float> value)
        {
            fixed (float* value_ptr = value) // SpanOrArrayLayer
            {
                glInstance.PathParameterfvNV(path, pname, value_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void PathParameterfvNV(this GL.NVExtension glInstance, uint path, PathParameter pname, float[] value)
        {
            fixed (float* value_ptr = value) // SpanOrArrayLayer
            {
                glInstance.PathParameterfvNV(path, pname, value_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void PathParameterfvNV(this GL.NVExtension glInstance, uint path, PathParameter pname, in float value)
        {
            fixed (float* value_ptr = &value) // RefInsteadOfPointerLayer
            {
                glInstance.PathParameterfvNV(path, pname, value_ptr);
            }
        }

        // PathDashArrayNV overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void PathDashArrayNV(this GL.NVExtension glInstance, uint path, ReadOnlySpan<float> dashArray)
        {
            var dashCount = (int)(dashArray.Length);
            fixed (float* dashArray_ptr = dashArray) // SpanOrArrayLayer
            {
                glInstance.PathDashArrayNV(path, dashCount, dashArray_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void PathDashArrayNV(this GL.NVExtension glInstance, uint path, float[] dashArray)
        {
            var dashCount = (int)(dashArray.Length);
            fixed (float* dashArray_ptr = dashArray) // SpanOrArrayLayer
            {
                glInstance.PathDashArrayNV(path, dashCount, dashArray_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void PathDashArrayNV(this GL.NVExtension glInstance, uint path, int dashCount, in float dashArray)
        {
            fixed (float* dashArray_ptr = &dashArray) // RefInsteadOfPointerLayer
            {
                glInstance.PathDashArrayNV(path, dashCount, dashArray_ptr);
            }
        }

        // StencilFillPathInstancedNV overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void StencilFillPathInstancedNV(this GL.NVExtension glInstance, int numPaths, PathElementType pathNameType, IntPtr paths, uint pathBase, PathFillMode fillMode, uint mask, PathTransformType transformType, ReadOnlySpan<float> transformValues)
        {
            fixed (float* transformValues_ptr = transformValues) // SpanOrArrayLayer
            {
                var paths_vptr = (void*)paths;
                glInstance.StencilFillPathInstancedNV(numPaths, pathNameType, paths_vptr, pathBase, fillMode, mask, transformType, transformValues_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void StencilFillPathInstancedNV(this GL.NVExtension glInstance, int numPaths, PathElementType pathNameType, IntPtr paths, uint pathBase, PathFillMode fillMode, uint mask, PathTransformType transformType, float[] transformValues)
        {
            fixed (float* transformValues_ptr = transformValues) // SpanOrArrayLayer
            {
                var paths_vptr = (void*)paths;
                glInstance.StencilFillPathInstancedNV(numPaths, pathNameType, paths_vptr, pathBase, fillMode, mask, transformType, transformValues_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void StencilFillPathInstancedNV(this GL.NVExtension glInstance, int numPaths, PathElementType pathNameType, IntPtr paths, uint pathBase, PathFillMode fillMode, uint mask, PathTransformType transformType, in float transformValues)
        {
            fixed (float* transformValues_ptr = &transformValues) // RefInsteadOfPointerLayer
            {
                var paths_vptr = (void*)paths;
                glInstance.StencilFillPathInstancedNV(numPaths, pathNameType, paths_vptr, pathBase, fillMode, mask, transformType, transformValues_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void StencilFillPathInstancedNV<T1>(this GL.NVExtension glInstance, int numPaths, PathElementType pathNameType, ReadOnlySpan<T1> paths, uint pathBase, PathFillMode fillMode, uint mask, PathTransformType transformType, ReadOnlySpan<float> transformValues)
            where T1 : unmanaged
        {
            fixed (void* paths_ptr = paths) // SpanOrArrayLayer
            {
                fixed (float* transformValues_ptr = transformValues) // SpanOrArrayLayer
                {
                    glInstance.StencilFillPathInstancedNV(numPaths, pathNameType, paths_ptr, pathBase, fillMode, mask, transformType, transformValues_ptr);
                }
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void StencilFillPathInstancedNV<T1>(this GL.NVExtension glInstance, int numPaths, PathElementType pathNameType, T1[] paths, uint pathBase, PathFillMode fillMode, uint mask, PathTransformType transformType, float[] transformValues)
            where T1 : unmanaged
        {
            fixed (void* paths_ptr = paths) // SpanOrArrayLayer
            {
                fixed (float* transformValues_ptr = transformValues) // SpanOrArrayLayer
                {
                    glInstance.StencilFillPathInstancedNV(numPaths, pathNameType, paths_ptr, pathBase, fillMode, mask, transformType, transformValues_ptr);
                }
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void StencilFillPathInstancedNV<T1>(this GL.NVExtension glInstance, int numPaths, PathElementType pathNameType, in T1 paths, uint pathBase, PathFillMode fillMode, uint mask, PathTransformType transformType, in float transformValues)
            where T1 : unmanaged
        {
            fixed (void* paths_ptr = &paths) // RefInsteadOfPointerLayer
            fixed (float* transformValues_ptr = &transformValues) // RefInsteadOfPointerLayer
            {
                glInstance.StencilFillPathInstancedNV(numPaths, pathNameType, paths_ptr, pathBase, fillMode, mask, transformType, transformValues_ptr);
            }
        }

        // StencilStrokePathInstancedNV overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void StencilStrokePathInstancedNV(this GL.NVExtension glInstance, int numPaths, PathElementType pathNameType, IntPtr paths, uint pathBase, int reference, uint mask, PathTransformType transformType, ReadOnlySpan<float> transformValues)
        {
            fixed (float* transformValues_ptr = transformValues) // SpanOrArrayLayer
            {
                var paths_vptr = (void*)paths;
                glInstance.StencilStrokePathInstancedNV(numPaths, pathNameType, paths_vptr, pathBase, reference, mask, transformType, transformValues_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void StencilStrokePathInstancedNV(this GL.NVExtension glInstance, int numPaths, PathElementType pathNameType, IntPtr paths, uint pathBase, int reference, uint mask, PathTransformType transformType, float[] transformValues)
        {
            fixed (float* transformValues_ptr = transformValues) // SpanOrArrayLayer
            {
                var paths_vptr = (void*)paths;
                glInstance.StencilStrokePathInstancedNV(numPaths, pathNameType, paths_vptr, pathBase, reference, mask, transformType, transformValues_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void StencilStrokePathInstancedNV(this GL.NVExtension glInstance, int numPaths, PathElementType pathNameType, IntPtr paths, uint pathBase, int reference, uint mask, PathTransformType transformType, in float transformValues)
        {
            fixed (float* transformValues_ptr = &transformValues) // RefInsteadOfPointerLayer
            {
                var paths_vptr = (void*)paths;
                glInstance.StencilStrokePathInstancedNV(numPaths, pathNameType, paths_vptr, pathBase, reference, mask, transformType, transformValues_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void StencilStrokePathInstancedNV<T1>(this GL.NVExtension glInstance, int numPaths, PathElementType pathNameType, ReadOnlySpan<T1> paths, uint pathBase, int reference, uint mask, PathTransformType transformType, ReadOnlySpan<float> transformValues)
            where T1 : unmanaged
        {
            fixed (void* paths_ptr = paths) // SpanOrArrayLayer
            {
                fixed (float* transformValues_ptr = transformValues) // SpanOrArrayLayer
                {
                    glInstance.StencilStrokePathInstancedNV(numPaths, pathNameType, paths_ptr, pathBase, reference, mask, transformType, transformValues_ptr);
                }
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void StencilStrokePathInstancedNV<T1>(this GL.NVExtension glInstance, int numPaths, PathElementType pathNameType, T1[] paths, uint pathBase, int reference, uint mask, PathTransformType transformType, float[] transformValues)
            where T1 : unmanaged
        {
            fixed (void* paths_ptr = paths) // SpanOrArrayLayer
            {
                fixed (float* transformValues_ptr = transformValues) // SpanOrArrayLayer
                {
                    glInstance.StencilStrokePathInstancedNV(numPaths, pathNameType, paths_ptr, pathBase, reference, mask, transformType, transformValues_ptr);
                }
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void StencilStrokePathInstancedNV<T1>(this GL.NVExtension glInstance, int numPaths, PathElementType pathNameType, in T1 paths, uint pathBase, int reference, uint mask, PathTransformType transformType, in float transformValues)
            where T1 : unmanaged
        {
            fixed (void* paths_ptr = &paths) // RefInsteadOfPointerLayer
            fixed (float* transformValues_ptr = &transformValues) // RefInsteadOfPointerLayer
            {
                glInstance.StencilStrokePathInstancedNV(numPaths, pathNameType, paths_ptr, pathBase, reference, mask, transformType, transformValues_ptr);
            }
        }

        // CoverFillPathInstancedNV overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void CoverFillPathInstancedNV(this GL.NVExtension glInstance, int numPaths, PathElementType pathNameType, IntPtr paths, uint pathBase, PathCoverMode coverMode, PathTransformType transformType, ReadOnlySpan<float> transformValues)
        {
            fixed (float* transformValues_ptr = transformValues) // SpanOrArrayLayer
            {
                var paths_vptr = (void*)paths;
                glInstance.CoverFillPathInstancedNV(numPaths, pathNameType, paths_vptr, pathBase, coverMode, transformType, transformValues_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void CoverFillPathInstancedNV(this GL.NVExtension glInstance, int numPaths, PathElementType pathNameType, IntPtr paths, uint pathBase, PathCoverMode coverMode, PathTransformType transformType, float[] transformValues)
        {
            fixed (float* transformValues_ptr = transformValues) // SpanOrArrayLayer
            {
                var paths_vptr = (void*)paths;
                glInstance.CoverFillPathInstancedNV(numPaths, pathNameType, paths_vptr, pathBase, coverMode, transformType, transformValues_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void CoverFillPathInstancedNV(this GL.NVExtension glInstance, int numPaths, PathElementType pathNameType, IntPtr paths, uint pathBase, PathCoverMode coverMode, PathTransformType transformType, in float transformValues)
        {
            fixed (float* transformValues_ptr = &transformValues) // RefInsteadOfPointerLayer
            {
                var paths_vptr = (void*)paths;
                glInstance.CoverFillPathInstancedNV(numPaths, pathNameType, paths_vptr, pathBase, coverMode, transformType, transformValues_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void CoverFillPathInstancedNV<T1>(this GL.NVExtension glInstance, int numPaths, PathElementType pathNameType, ReadOnlySpan<T1> paths, uint pathBase, PathCoverMode coverMode, PathTransformType transformType, ReadOnlySpan<float> transformValues)
            where T1 : unmanaged
        {
            fixed (void* paths_ptr = paths) // SpanOrArrayLayer
            {
                fixed (float* transformValues_ptr = transformValues) // SpanOrArrayLayer
                {
                    glInstance.CoverFillPathInstancedNV(numPaths, pathNameType, paths_ptr, pathBase, coverMode, transformType, transformValues_ptr);
                }
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void CoverFillPathInstancedNV<T1>(this GL.NVExtension glInstance, int numPaths, PathElementType pathNameType, T1[] paths, uint pathBase, PathCoverMode coverMode, PathTransformType transformType, float[] transformValues)
            where T1 : unmanaged
        {
            fixed (void* paths_ptr = paths) // SpanOrArrayLayer
            {
                fixed (float* transformValues_ptr = transformValues) // SpanOrArrayLayer
                {
                    glInstance.CoverFillPathInstancedNV(numPaths, pathNameType, paths_ptr, pathBase, coverMode, transformType, transformValues_ptr);
                }
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void CoverFillPathInstancedNV<T1>(this GL.NVExtension glInstance, int numPaths, PathElementType pathNameType, in T1 paths, uint pathBase, PathCoverMode coverMode, PathTransformType transformType, in float transformValues)
            where T1 : unmanaged
        {
            fixed (void* paths_ptr = &paths) // RefInsteadOfPointerLayer
            fixed (float* transformValues_ptr = &transformValues) // RefInsteadOfPointerLayer
            {
                glInstance.CoverFillPathInstancedNV(numPaths, pathNameType, paths_ptr, pathBase, coverMode, transformType, transformValues_ptr);
            }
        }

        // CoverStrokePathInstancedNV overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void CoverStrokePathInstancedNV(this GL.NVExtension glInstance, int numPaths, PathElementType pathNameType, IntPtr paths, uint pathBase, PathCoverMode coverMode, PathTransformType transformType, ReadOnlySpan<float> transformValues)
        {
            fixed (float* transformValues_ptr = transformValues) // SpanOrArrayLayer
            {
                var paths_vptr = (void*)paths;
                glInstance.CoverStrokePathInstancedNV(numPaths, pathNameType, paths_vptr, pathBase, coverMode, transformType, transformValues_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void CoverStrokePathInstancedNV(this GL.NVExtension glInstance, int numPaths, PathElementType pathNameType, IntPtr paths, uint pathBase, PathCoverMode coverMode, PathTransformType transformType, float[] transformValues)
        {
            fixed (float* transformValues_ptr = transformValues) // SpanOrArrayLayer
            {
                var paths_vptr = (void*)paths;
                glInstance.CoverStrokePathInstancedNV(numPaths, pathNameType, paths_vptr, pathBase, coverMode, transformType, transformValues_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void CoverStrokePathInstancedNV(this GL.NVExtension glInstance, int numPaths, PathElementType pathNameType, IntPtr paths, uint pathBase, PathCoverMode coverMode, PathTransformType transformType, in float transformValues)
        {
            fixed (float* transformValues_ptr = &transformValues) // RefInsteadOfPointerLayer
            {
                var paths_vptr = (void*)paths;
                glInstance.CoverStrokePathInstancedNV(numPaths, pathNameType, paths_vptr, pathBase, coverMode, transformType, transformValues_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void CoverStrokePathInstancedNV<T1>(this GL.NVExtension glInstance, int numPaths, PathElementType pathNameType, ReadOnlySpan<T1> paths, uint pathBase, PathCoverMode coverMode, PathTransformType transformType, ReadOnlySpan<float> transformValues)
            where T1 : unmanaged
        {
            fixed (void* paths_ptr = paths) // SpanOrArrayLayer
            {
                fixed (float* transformValues_ptr = transformValues) // SpanOrArrayLayer
                {
                    glInstance.CoverStrokePathInstancedNV(numPaths, pathNameType, paths_ptr, pathBase, coverMode, transformType, transformValues_ptr);
                }
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void CoverStrokePathInstancedNV<T1>(this GL.NVExtension glInstance, int numPaths, PathElementType pathNameType, T1[] paths, uint pathBase, PathCoverMode coverMode, PathTransformType transformType, float[] transformValues)
            where T1 : unmanaged
        {
            fixed (void* paths_ptr = paths) // SpanOrArrayLayer
            {
                fixed (float* transformValues_ptr = transformValues) // SpanOrArrayLayer
                {
                    glInstance.CoverStrokePathInstancedNV(numPaths, pathNameType, paths_ptr, pathBase, coverMode, transformType, transformValues_ptr);
                }
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void CoverStrokePathInstancedNV<T1>(this GL.NVExtension glInstance, int numPaths, PathElementType pathNameType, in T1 paths, uint pathBase, PathCoverMode coverMode, PathTransformType transformType, in float transformValues)
            where T1 : unmanaged
        {
            fixed (void* paths_ptr = &paths) // RefInsteadOfPointerLayer
            fixed (float* transformValues_ptr = &transformValues) // RefInsteadOfPointerLayer
            {
                glInstance.CoverStrokePathInstancedNV(numPaths, pathNameType, paths_ptr, pathBase, coverMode, transformType, transformValues_ptr);
            }
        }

        // GetPathParameterivNV overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetPathParameterivNV(this GL.NVExtension glInstance, uint path, PathParameter pname, Span<int> value)
        {
            fixed (int* value_ptr = value) // SpanOrArrayLayer
            {
                glInstance.GetPathParameterivNV(path, pname, value_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetPathParameterivNV(this GL.NVExtension glInstance, uint path, PathParameter pname, int[] value)
        {
            fixed (int* value_ptr = value) // SpanOrArrayLayer
            {
                glInstance.GetPathParameterivNV(path, pname, value_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void GetPathParameterivNV(this GL.NVExtension glInstance, uint path, PathParameter pname, ref int value)
        {
            fixed (int* value_ptr = &value) // RefInsteadOfPointerLayer
            {
                glInstance.GetPathParameterivNV(path, pname, value_ptr);
            }
        }

        // GetPathParameterfvNV overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetPathParameterfvNV(this GL.NVExtension glInstance, uint path, PathParameter pname, Span<float> value)
        {
            fixed (float* value_ptr = value) // SpanOrArrayLayer
            {
                glInstance.GetPathParameterfvNV(path, pname, value_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetPathParameterfvNV(this GL.NVExtension glInstance, uint path, PathParameter pname, float[] value)
        {
            fixed (float* value_ptr = value) // SpanOrArrayLayer
            {
                glInstance.GetPathParameterfvNV(path, pname, value_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void GetPathParameterfvNV(this GL.NVExtension glInstance, uint path, PathParameter pname, ref float value)
        {
            fixed (float* value_ptr = &value) // RefInsteadOfPointerLayer
            {
                glInstance.GetPathParameterfvNV(path, pname, value_ptr);
            }
        }

        // GetPathCommandsNV overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetPathCommandsNV(this GL.NVExtension glInstance, uint path, Span<byte> commands)
        {
            fixed (byte* commands_ptr = commands) // SpanOrArrayLayer
            {
                glInstance.GetPathCommandsNV(path, commands_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetPathCommandsNV(this GL.NVExtension glInstance, uint path, byte[] commands)
        {
            fixed (byte* commands_ptr = commands) // SpanOrArrayLayer
            {
                glInstance.GetPathCommandsNV(path, commands_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void GetPathCommandsNV(this GL.NVExtension glInstance, uint path, ref byte commands)
        {
            fixed (byte* commands_ptr = &commands) // RefInsteadOfPointerLayer
            {
                glInstance.GetPathCommandsNV(path, commands_ptr);
            }
        }

        // GetPathCoordsNV overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetPathCoordsNV(this GL.NVExtension glInstance, uint path, Span<float> coords)
        {
            fixed (float* coords_ptr = coords) // SpanOrArrayLayer
            {
                glInstance.GetPathCoordsNV(path, coords_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetPathCoordsNV(this GL.NVExtension glInstance, uint path, float[] coords)
        {
            fixed (float* coords_ptr = coords) // SpanOrArrayLayer
            {
                glInstance.GetPathCoordsNV(path, coords_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void GetPathCoordsNV(this GL.NVExtension glInstance, uint path, ref float coords)
        {
            fixed (float* coords_ptr = &coords) // RefInsteadOfPointerLayer
            {
                glInstance.GetPathCoordsNV(path, coords_ptr);
            }
        }

        // GetPathDashArrayNV overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetPathDashArrayNV(this GL.NVExtension glInstance, uint path, Span<float> dashArray)
        {
            fixed (float* dashArray_ptr = dashArray) // SpanOrArrayLayer
            {
                glInstance.GetPathDashArrayNV(path, dashArray_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetPathDashArrayNV(this GL.NVExtension glInstance, uint path, float[] dashArray)
        {
            fixed (float* dashArray_ptr = dashArray) // SpanOrArrayLayer
            {
                glInstance.GetPathDashArrayNV(path, dashArray_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void GetPathDashArrayNV(this GL.NVExtension glInstance, uint path, ref float dashArray)
        {
            fixed (float* dashArray_ptr = &dashArray) // RefInsteadOfPointerLayer
            {
                glInstance.GetPathDashArrayNV(path, dashArray_ptr);
            }
        }

        // GetPathMetricsNV overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetPathMetricsNV(this GL.NVExtension glInstance, PathMetricMask metricQueryMask, int numPaths, PathElementType pathNameType, IntPtr paths, uint pathBase, int stride, Span<float> metrics)
        {
            fixed (float* metrics_ptr = metrics) // SpanOrArrayLayer
            {
                var paths_vptr = (void*)paths;
                glInstance.GetPathMetricsNV(metricQueryMask, numPaths, pathNameType, paths_vptr, pathBase, stride, metrics_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetPathMetricsNV(this GL.NVExtension glInstance, PathMetricMask metricQueryMask, int numPaths, PathElementType pathNameType, IntPtr paths, uint pathBase, int stride, float[] metrics)
        {
            fixed (float* metrics_ptr = metrics) // SpanOrArrayLayer
            {
                var paths_vptr = (void*)paths;
                glInstance.GetPathMetricsNV(metricQueryMask, numPaths, pathNameType, paths_vptr, pathBase, stride, metrics_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void GetPathMetricsNV(this GL.NVExtension glInstance, PathMetricMask metricQueryMask, int numPaths, PathElementType pathNameType, IntPtr paths, uint pathBase, int stride, ref float metrics)
        {
            fixed (float* metrics_ptr = &metrics) // RefInsteadOfPointerLayer
            {
                var paths_vptr = (void*)paths;
                glInstance.GetPathMetricsNV(metricQueryMask, numPaths, pathNameType, paths_vptr, pathBase, stride, metrics_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetPathMetricsNV<T1>(this GL.NVExtension glInstance, PathMetricMask metricQueryMask, int numPaths, PathElementType pathNameType, ReadOnlySpan<T1> paths, uint pathBase, int stride, Span<float> metrics)
            where T1 : unmanaged
        {
            fixed (void* paths_ptr = paths) // SpanOrArrayLayer
            {
                fixed (float* metrics_ptr = metrics) // SpanOrArrayLayer
                {
                    glInstance.GetPathMetricsNV(metricQueryMask, numPaths, pathNameType, paths_ptr, pathBase, stride, metrics_ptr);
                }
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetPathMetricsNV<T1>(this GL.NVExtension glInstance, PathMetricMask metricQueryMask, int numPaths, PathElementType pathNameType, T1[] paths, uint pathBase, int stride, float[] metrics)
            where T1 : unmanaged
        {
            fixed (void* paths_ptr = paths) // SpanOrArrayLayer
            {
                fixed (float* metrics_ptr = metrics) // SpanOrArrayLayer
                {
                    glInstance.GetPathMetricsNV(metricQueryMask, numPaths, pathNameType, paths_ptr, pathBase, stride, metrics_ptr);
                }
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void GetPathMetricsNV<T1>(this GL.NVExtension glInstance, PathMetricMask metricQueryMask, int numPaths, PathElementType pathNameType, in T1 paths, uint pathBase, int stride, ref float metrics)
            where T1 : unmanaged
        {
            fixed (void* paths_ptr = &paths) // RefInsteadOfPointerLayer
            fixed (float* metrics_ptr = &metrics) // RefInsteadOfPointerLayer
            {
                glInstance.GetPathMetricsNV(metricQueryMask, numPaths, pathNameType, paths_ptr, pathBase, stride, metrics_ptr);
            }
        }

        // GetPathMetricRangeNV overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetPathMetricRangeNV(this GL.NVExtension glInstance, PathMetricMask metricQueryMask, uint firstPathName, int numPaths, int stride, Span<float> metrics)
        {
            fixed (float* metrics_ptr = metrics) // SpanOrArrayLayer
            {
                glInstance.GetPathMetricRangeNV(metricQueryMask, firstPathName, numPaths, stride, metrics_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetPathMetricRangeNV(this GL.NVExtension glInstance, PathMetricMask metricQueryMask, uint firstPathName, int numPaths, int stride, float[] metrics)
        {
            fixed (float* metrics_ptr = metrics) // SpanOrArrayLayer
            {
                glInstance.GetPathMetricRangeNV(metricQueryMask, firstPathName, numPaths, stride, metrics_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void GetPathMetricRangeNV(this GL.NVExtension glInstance, PathMetricMask metricQueryMask, uint firstPathName, int numPaths, int stride, ref float metrics)
        {
            fixed (float* metrics_ptr = &metrics) // RefInsteadOfPointerLayer
            {
                glInstance.GetPathMetricRangeNV(metricQueryMask, firstPathName, numPaths, stride, metrics_ptr);
            }
        }

        // GetPathSpacingNV overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetPathSpacingNV(this GL.NVExtension glInstance, PathListMode pathListMode, int numPaths, PathElementType pathNameType, IntPtr paths, uint pathBase, float advanceScale, float kerningScale, PathTransformType transformType, Span<float> returnedSpacing)
        {
            fixed (float* returnedSpacing_ptr = returnedSpacing) // SpanOrArrayLayer
            {
                var paths_vptr = (void*)paths;
                glInstance.GetPathSpacingNV(pathListMode, numPaths, pathNameType, paths_vptr, pathBase, advanceScale, kerningScale, transformType, returnedSpacing_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetPathSpacingNV(this GL.NVExtension glInstance, PathListMode pathListMode, int numPaths, PathElementType pathNameType, IntPtr paths, uint pathBase, float advanceScale, float kerningScale, PathTransformType transformType, float[] returnedSpacing)
        {
            fixed (float* returnedSpacing_ptr = returnedSpacing) // SpanOrArrayLayer
            {
                var paths_vptr = (void*)paths;
                glInstance.GetPathSpacingNV(pathListMode, numPaths, pathNameType, paths_vptr, pathBase, advanceScale, kerningScale, transformType, returnedSpacing_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void GetPathSpacingNV(this GL.NVExtension glInstance, PathListMode pathListMode, int numPaths, PathElementType pathNameType, IntPtr paths, uint pathBase, float advanceScale, float kerningScale, PathTransformType transformType, ref float returnedSpacing)
        {
            fixed (float* returnedSpacing_ptr = &returnedSpacing) // RefInsteadOfPointerLayer
            {
                var paths_vptr = (void*)paths;
                glInstance.GetPathSpacingNV(pathListMode, numPaths, pathNameType, paths_vptr, pathBase, advanceScale, kerningScale, transformType, returnedSpacing_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetPathSpacingNV<T1>(this GL.NVExtension glInstance, PathListMode pathListMode, int numPaths, PathElementType pathNameType, ReadOnlySpan<T1> paths, uint pathBase, float advanceScale, float kerningScale, PathTransformType transformType, Span<float> returnedSpacing)
            where T1 : unmanaged
        {
            fixed (void* paths_ptr = paths) // SpanOrArrayLayer
            {
                fixed (float* returnedSpacing_ptr = returnedSpacing) // SpanOrArrayLayer
                {
                    glInstance.GetPathSpacingNV(pathListMode, numPaths, pathNameType, paths_ptr, pathBase, advanceScale, kerningScale, transformType, returnedSpacing_ptr);
                }
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetPathSpacingNV<T1>(this GL.NVExtension glInstance, PathListMode pathListMode, int numPaths, PathElementType pathNameType, T1[] paths, uint pathBase, float advanceScale, float kerningScale, PathTransformType transformType, float[] returnedSpacing)
            where T1 : unmanaged
        {
            fixed (void* paths_ptr = paths) // SpanOrArrayLayer
            {
                fixed (float* returnedSpacing_ptr = returnedSpacing) // SpanOrArrayLayer
                {
                    glInstance.GetPathSpacingNV(pathListMode, numPaths, pathNameType, paths_ptr, pathBase, advanceScale, kerningScale, transformType, returnedSpacing_ptr);
                }
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void GetPathSpacingNV<T1>(this GL.NVExtension glInstance, PathListMode pathListMode, int numPaths, PathElementType pathNameType, in T1 paths, uint pathBase, float advanceScale, float kerningScale, PathTransformType transformType, ref float returnedSpacing)
            where T1 : unmanaged
        {
            fixed (void* paths_ptr = &paths) // RefInsteadOfPointerLayer
            fixed (float* returnedSpacing_ptr = &returnedSpacing) // RefInsteadOfPointerLayer
            {
                glInstance.GetPathSpacingNV(pathListMode, numPaths, pathNameType, paths_ptr, pathBase, advanceScale, kerningScale, transformType, returnedSpacing_ptr);
            }
        }

        // PointAlongPathNV overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe byte PointAlongPathNV(this GL.NVExtension glInstance, uint path, int startSegment, int numSegments, float distance, Span<float> x, Span<float> y, Span<float> tangentX, Span<float> tangentY)
        {
            byte returnValue;
            fixed (float* x_ptr = x) // SpanOrArrayLayer
            {
                fixed (float* y_ptr = y) // SpanOrArrayLayer
                {
                    fixed (float* tangentX_ptr = tangentX) // SpanOrArrayLayer
                    {
                        fixed (float* tangentY_ptr = tangentY) // SpanOrArrayLayer
                        {
                            returnValue = glInstance.PointAlongPathNV(path, startSegment, numSegments, distance, x_ptr, y_ptr, tangentX_ptr, tangentY_ptr);
                        }
                    }
                }
            }
            return returnValue;
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe byte PointAlongPathNV(this GL.NVExtension glInstance, uint path, int startSegment, int numSegments, float distance, float[] x, float[] y, float[] tangentX, float[] tangentY)
        {
            byte returnValue;
            fixed (float* x_ptr = x) // SpanOrArrayLayer
            {
                fixed (float* y_ptr = y) // SpanOrArrayLayer
                {
                    fixed (float* tangentX_ptr = tangentX) // SpanOrArrayLayer
                    {
                        fixed (float* tangentY_ptr = tangentY) // SpanOrArrayLayer
                        {
                            returnValue = glInstance.PointAlongPathNV(path, startSegment, numSegments, distance, x_ptr, y_ptr, tangentX_ptr, tangentY_ptr);
                        }
                    }
                }
            }
            return returnValue;
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe byte PointAlongPathNV(this GL.NVExtension glInstance, uint path, int startSegment, int numSegments, float distance, ref float x, ref float y, ref float tangentX, ref float tangentY)
        {
            byte returnValue;
            fixed (float* x_ptr = &x) // RefInsteadOfPointerLayer
            fixed (float* y_ptr = &y) // RefInsteadOfPointerLayer
            fixed (float* tangentX_ptr = &tangentX) // RefInsteadOfPointerLayer
            fixed (float* tangentY_ptr = &tangentY) // RefInsteadOfPointerLayer
            {
                returnValue = glInstance.PointAlongPathNV(path, startSegment, numSegments, distance, x_ptr, y_ptr, tangentX_ptr, tangentY_ptr);
            }
            return returnValue;
        }

        // MatrixLoad3x2fNV overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void MatrixLoad3x2fNV(this GL.NVExtension glInstance, GLEnum matrixMode, in float m)
        {
            fixed (float* m_ptr = &m) // RefInsteadOfPointerLayer
            {
                glInstance.MatrixLoad3x2fNV(matrixMode, m_ptr);
            }
        }

        // MatrixLoad3x3fNV overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void MatrixLoad3x3fNV(this GL.NVExtension glInstance, GLEnum matrixMode, in float m)
        {
            fixed (float* m_ptr = &m) // RefInsteadOfPointerLayer
            {
                glInstance.MatrixLoad3x3fNV(matrixMode, m_ptr);
            }
        }

        // MatrixLoadTranspose3x3fNV overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void MatrixLoadTranspose3x3fNV(this GL.NVExtension glInstance, GLEnum matrixMode, in float m)
        {
            fixed (float* m_ptr = &m) // RefInsteadOfPointerLayer
            {
                glInstance.MatrixLoadTranspose3x3fNV(matrixMode, m_ptr);
            }
        }

        // MatrixMult3x2fNV overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void MatrixMult3x2fNV(this GL.NVExtension glInstance, GLEnum matrixMode, in float m)
        {
            fixed (float* m_ptr = &m) // RefInsteadOfPointerLayer
            {
                glInstance.MatrixMult3x2fNV(matrixMode, m_ptr);
            }
        }

        // MatrixMult3x3fNV overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void MatrixMult3x3fNV(this GL.NVExtension glInstance, GLEnum matrixMode, in float m)
        {
            fixed (float* m_ptr = &m) // RefInsteadOfPointerLayer
            {
                glInstance.MatrixMult3x3fNV(matrixMode, m_ptr);
            }
        }

        // MatrixMultTranspose3x3fNV overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void MatrixMultTranspose3x3fNV(this GL.NVExtension glInstance, GLEnum matrixMode, in float m)
        {
            fixed (float* m_ptr = &m) // RefInsteadOfPointerLayer
            {
                glInstance.MatrixMultTranspose3x3fNV(matrixMode, m_ptr);
            }
        }

        // StencilThenCoverFillPathInstancedNV overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void StencilThenCoverFillPathInstancedNV(this GL.NVExtension glInstance, int numPaths, GLEnum pathNameType, IntPtr paths, uint pathBase, GLEnum fillMode, uint mask, GLEnum coverMode, GLEnum transformType, in float transformValues)
        {
            fixed (float* transformValues_ptr = &transformValues) // RefInsteadOfPointerLayer
            {
                var paths_vptr = (void*)paths;
                glInstance.StencilThenCoverFillPathInstancedNV(numPaths, pathNameType, paths_vptr, pathBase, fillMode, mask, coverMode, transformType, transformValues_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void StencilThenCoverFillPathInstancedNV<T1>(this GL.NVExtension glInstance, int numPaths, GLEnum pathNameType, in T1 paths, uint pathBase, GLEnum fillMode, uint mask, GLEnum coverMode, GLEnum transformType, in float transformValues)
            where T1 : unmanaged
        {
            fixed (void* paths_ptr = &paths) // RefInsteadOfPointerLayer
            fixed (float* transformValues_ptr = &transformValues) // RefInsteadOfPointerLayer
            {
                glInstance.StencilThenCoverFillPathInstancedNV(numPaths, pathNameType, paths_ptr, pathBase, fillMode, mask, coverMode, transformType, transformValues_ptr);
            }
        }

        // StencilThenCoverStrokePathInstancedNV overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void StencilThenCoverStrokePathInstancedNV(this GL.NVExtension glInstance, int numPaths, GLEnum pathNameType, IntPtr paths, uint pathBase, int reference, uint mask, GLEnum coverMode, GLEnum transformType, in float transformValues)
        {
            fixed (float* transformValues_ptr = &transformValues) // RefInsteadOfPointerLayer
            {
                var paths_vptr = (void*)paths;
                glInstance.StencilThenCoverStrokePathInstancedNV(numPaths, pathNameType, paths_vptr, pathBase, reference, mask, coverMode, transformType, transformValues_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void StencilThenCoverStrokePathInstancedNV<T1>(this GL.NVExtension glInstance, int numPaths, GLEnum pathNameType, in T1 paths, uint pathBase, int reference, uint mask, GLEnum coverMode, GLEnum transformType, in float transformValues)
            where T1 : unmanaged
        {
            fixed (void* paths_ptr = &paths) // RefInsteadOfPointerLayer
            fixed (float* transformValues_ptr = &transformValues) // RefInsteadOfPointerLayer
            {
                glInstance.StencilThenCoverStrokePathInstancedNV(numPaths, pathNameType, paths_ptr, pathBase, reference, mask, coverMode, transformType, transformValues_ptr);
            }
        }

        // PathGlyphIndexRangeNV overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe GLEnum PathGlyphIndexRangeNV(this GL.NVExtension glInstance, GLEnum fontTarget, IntPtr fontName, PathFontStyle fontStyle, uint pathParameterTemplate, float emScale, Span<uint> baseAndCount)
        {
            GLEnum returnValue;
            fixed (uint* baseAndCount_ptr = baseAndCount) // SpanOrArrayLayer
            {
                var fontName_vptr = (void*)fontName;
                returnValue = glInstance.PathGlyphIndexRangeNV(fontTarget, fontName_vptr, fontStyle, pathParameterTemplate, emScale, baseAndCount_ptr);
            }
            return returnValue;
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe GLEnum PathGlyphIndexRangeNV(this GL.NVExtension glInstance, GLEnum fontTarget, IntPtr fontName, PathFontStyle fontStyle, uint pathParameterTemplate, float emScale, uint[] baseAndCount)
        {
            GLEnum returnValue;
            fixed (uint* baseAndCount_ptr = baseAndCount) // SpanOrArrayLayer
            {
                var fontName_vptr = (void*)fontName;
                returnValue = glInstance.PathGlyphIndexRangeNV(fontTarget, fontName_vptr, fontStyle, pathParameterTemplate, emScale, baseAndCount_ptr);
            }
            return returnValue;
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe GLEnum PathGlyphIndexRangeNV(this GL.NVExtension glInstance, GLEnum fontTarget, IntPtr fontName, PathFontStyle fontStyle, uint pathParameterTemplate, float emScale, ref uint baseAndCount)
        {
            GLEnum returnValue;
            fixed (uint* baseAndCount_ptr = &baseAndCount) // RefInsteadOfPointerLayer
            {
                var fontName_vptr = (void*)fontName;
                returnValue = glInstance.PathGlyphIndexRangeNV(fontTarget, fontName_vptr, fontStyle, pathParameterTemplate, emScale, baseAndCount_ptr);
            }
            return returnValue;
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe GLEnum PathGlyphIndexRangeNV<T1>(this GL.NVExtension glInstance, GLEnum fontTarget, in T1 fontName, PathFontStyle fontStyle, uint pathParameterTemplate, float emScale, Span<uint> baseAndCount)
            where T1 : unmanaged
        {
            GLEnum returnValue;
            fixed (void* fontName_ptr = &fontName) // RefInsteadOfPointerLayer
            {
                fixed (uint* baseAndCount_ptr = baseAndCount) // SpanOrArrayLayer
                {
                    returnValue = glInstance.PathGlyphIndexRangeNV(fontTarget, fontName_ptr, fontStyle, pathParameterTemplate, emScale, baseAndCount_ptr);
                }
            }
            return returnValue;
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe GLEnum PathGlyphIndexRangeNV<T1>(this GL.NVExtension glInstance, GLEnum fontTarget, in T1 fontName, PathFontStyle fontStyle, uint pathParameterTemplate, float emScale, uint[] baseAndCount)
            where T1 : unmanaged
        {
            GLEnum returnValue;
            fixed (void* fontName_ptr = &fontName) // RefInsteadOfPointerLayer
            {
                fixed (uint* baseAndCount_ptr = baseAndCount) // SpanOrArrayLayer
                {
                    returnValue = glInstance.PathGlyphIndexRangeNV(fontTarget, fontName_ptr, fontStyle, pathParameterTemplate, emScale, baseAndCount_ptr);
                }
            }
            return returnValue;
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe GLEnum PathGlyphIndexRangeNV<T1>(this GL.NVExtension glInstance, GLEnum fontTarget, in T1 fontName, PathFontStyle fontStyle, uint pathParameterTemplate, float emScale, ref uint baseAndCount)
            where T1 : unmanaged
        {
            GLEnum returnValue;
            fixed (void* fontName_ptr = &fontName) // RefInsteadOfPointerLayer
            fixed (uint* baseAndCount_ptr = &baseAndCount) // RefInsteadOfPointerLayer
            {
                returnValue = glInstance.PathGlyphIndexRangeNV(fontTarget, fontName_ptr, fontStyle, pathParameterTemplate, emScale, baseAndCount_ptr);
            }
            return returnValue;
        }

        // PathGlyphIndexArrayNV overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.VoidPtrToIntPtrOverloader
        public static unsafe GLEnum PathGlyphIndexArrayNV(this GL.NVExtension glInstance, uint firstPathName, GLEnum fontTarget, IntPtr fontName, PathFontStyle fontStyle, uint firstGlyphIndex, int numGlyphs, uint pathParameterTemplate, float emScale)
        {
            GLEnum returnValue;
            var fontName_vptr = (void*)fontName;
            returnValue = glInstance.PathGlyphIndexArrayNV(firstPathName, fontTarget, fontName_vptr, fontStyle, firstGlyphIndex, numGlyphs, pathParameterTemplate, emScale);
            return returnValue;
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe GLEnum PathGlyphIndexArrayNV<T1>(this GL.NVExtension glInstance, uint firstPathName, GLEnum fontTarget, in T1 fontName, PathFontStyle fontStyle, uint firstGlyphIndex, int numGlyphs, uint pathParameterTemplate, float emScale)
            where T1 : unmanaged
        {
            GLEnum returnValue;
            fixed (void* fontName_ptr = &fontName) // RefInsteadOfPointerLayer
            {
                returnValue = glInstance.PathGlyphIndexArrayNV(firstPathName, fontTarget, fontName_ptr, fontStyle, firstGlyphIndex, numGlyphs, pathParameterTemplate, emScale);
            }
            return returnValue;
        }

        // PathMemoryGlyphIndexArrayNV overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.VoidPtrToIntPtrOverloader
        public static unsafe GLEnum PathMemoryGlyphIndexArrayNV(this GL.NVExtension glInstance, uint firstPathName, GLEnum fontTarget, nint fontSize, IntPtr fontData, int faceIndex, uint firstGlyphIndex, int numGlyphs, uint pathParameterTemplate, float emScale)
        {
            GLEnum returnValue;
            var fontData_vptr = (void*)fontData;
            returnValue = glInstance.PathMemoryGlyphIndexArrayNV(firstPathName, fontTarget, fontSize, fontData_vptr, faceIndex, firstGlyphIndex, numGlyphs, pathParameterTemplate, emScale);
            return returnValue;
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe GLEnum PathMemoryGlyphIndexArrayNV<T1>(this GL.NVExtension glInstance, uint firstPathName, GLEnum fontTarget, nint fontSize, in T1 fontData, int faceIndex, uint firstGlyphIndex, int numGlyphs, uint pathParameterTemplate, float emScale)
            where T1 : unmanaged
        {
            GLEnum returnValue;
            fixed (void* fontData_ptr = &fontData) // RefInsteadOfPointerLayer
            {
                returnValue = glInstance.PathMemoryGlyphIndexArrayNV(firstPathName, fontTarget, fontSize, fontData_ptr, faceIndex, firstGlyphIndex, numGlyphs, pathParameterTemplate, emScale);
            }
            return returnValue;
        }

        // ProgramPathFragmentInputGenNV overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void ProgramPathFragmentInputGenNV(this GL.NVExtension glInstance, ProgramHandle program, int location, GLEnum genMode, int components, in float coeffs)
        {
            fixed (float* coeffs_ptr = &coeffs) // RefInsteadOfPointerLayer
            {
                glInstance.ProgramPathFragmentInputGenNV(program, location, genMode, components, coeffs_ptr);
            }
        }

        // GetProgramResourcefvNV overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void GetProgramResourcefvNV(this GL.NVExtension glInstance, ProgramHandle program, ProgramInterface programInterface, uint index, int propCount, in GLEnum props, Span<int> length, Span<float> parameters)
        {
            fixed (GLEnum* props_ptr = &props) // RefInsteadOfPointerLayer
            {
                fixed (int* length_ptr = length) // SpanOrArrayLayer
                {
                    var count = (int)(parameters.Length);
                    fixed (float* parameters_ptr = parameters) // SpanOrArrayLayer
                    {
                        glInstance.GetProgramResourcefvNV(program, programInterface, index, propCount, props_ptr, count, length_ptr, parameters_ptr);
                    }
                }
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void GetProgramResourcefvNV(this GL.NVExtension glInstance, ProgramHandle program, ProgramInterface programInterface, uint index, int propCount, in GLEnum props, int[] length, float[] parameters)
        {
            fixed (GLEnum* props_ptr = &props) // RefInsteadOfPointerLayer
            {
                fixed (int* length_ptr = length) // SpanOrArrayLayer
                {
                    var count = (int)(parameters.Length);
                    fixed (float* parameters_ptr = parameters) // SpanOrArrayLayer
                    {
                        glInstance.GetProgramResourcefvNV(program, programInterface, index, propCount, props_ptr, count, length_ptr, parameters_ptr);
                    }
                }
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void GetProgramResourcefvNV(this GL.NVExtension glInstance, ProgramHandle program, ProgramInterface programInterface, uint index, int propCount, in GLEnum props, int count, ref int length, ref float parameters)
        {
            fixed (GLEnum* props_ptr = &props) // RefInsteadOfPointerLayer
            fixed (int* length_ptr = &length) // RefInsteadOfPointerLayer
            fixed (float* parameters_ptr = &parameters) // RefInsteadOfPointerLayer
            {
                glInstance.GetProgramResourcefvNV(program, programInterface, index, propCount, props_ptr, count, length_ptr, parameters_ptr);
            }
        }

        // PathColorGenNV overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void PathColorGenNV(this GL.NVExtension glInstance, PathColor color, PathGenMode genMode, PathColorFormat colorFormat, ReadOnlySpan<float> coeffs)
        {
            fixed (float* coeffs_ptr = coeffs) // SpanOrArrayLayer
            {
                glInstance.PathColorGenNV(color, genMode, colorFormat, coeffs_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void PathColorGenNV(this GL.NVExtension glInstance, PathColor color, PathGenMode genMode, PathColorFormat colorFormat, float[] coeffs)
        {
            fixed (float* coeffs_ptr = coeffs) // SpanOrArrayLayer
            {
                glInstance.PathColorGenNV(color, genMode, colorFormat, coeffs_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void PathColorGenNV(this GL.NVExtension glInstance, PathColor color, PathGenMode genMode, PathColorFormat colorFormat, in float coeffs)
        {
            fixed (float* coeffs_ptr = &coeffs) // RefInsteadOfPointerLayer
            {
                glInstance.PathColorGenNV(color, genMode, colorFormat, coeffs_ptr);
            }
        }

        // PathTexGenNV overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void PathTexGenNV(this GL.NVExtension glInstance, PathColor texCoordSet, PathGenMode genMode, int components, ReadOnlySpan<float> coeffs)
        {
            fixed (float* coeffs_ptr = coeffs) // SpanOrArrayLayer
            {
                glInstance.PathTexGenNV(texCoordSet, genMode, components, coeffs_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void PathTexGenNV(this GL.NVExtension glInstance, PathColor texCoordSet, PathGenMode genMode, int components, float[] coeffs)
        {
            fixed (float* coeffs_ptr = coeffs) // SpanOrArrayLayer
            {
                glInstance.PathTexGenNV(texCoordSet, genMode, components, coeffs_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void PathTexGenNV(this GL.NVExtension glInstance, PathColor texCoordSet, PathGenMode genMode, int components, in float coeffs)
        {
            fixed (float* coeffs_ptr = &coeffs) // RefInsteadOfPointerLayer
            {
                glInstance.PathTexGenNV(texCoordSet, genMode, components, coeffs_ptr);
            }
        }

        // GetPathColorGenivNV overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetPathColorGenivNV(this GL.NVExtension glInstance, PathColor color, PathGenMode pname, Span<int> value)
        {
            fixed (int* value_ptr = value) // SpanOrArrayLayer
            {
                glInstance.GetPathColorGenivNV(color, pname, value_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetPathColorGenivNV(this GL.NVExtension glInstance, PathColor color, PathGenMode pname, int[] value)
        {
            fixed (int* value_ptr = value) // SpanOrArrayLayer
            {
                glInstance.GetPathColorGenivNV(color, pname, value_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void GetPathColorGenivNV(this GL.NVExtension glInstance, PathColor color, PathGenMode pname, ref int value)
        {
            fixed (int* value_ptr = &value) // RefInsteadOfPointerLayer
            {
                glInstance.GetPathColorGenivNV(color, pname, value_ptr);
            }
        }

        // GetPathColorGenfvNV overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetPathColorGenfvNV(this GL.NVExtension glInstance, PathColor color, PathGenMode pname, Span<float> value)
        {
            fixed (float* value_ptr = value) // SpanOrArrayLayer
            {
                glInstance.GetPathColorGenfvNV(color, pname, value_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetPathColorGenfvNV(this GL.NVExtension glInstance, PathColor color, PathGenMode pname, float[] value)
        {
            fixed (float* value_ptr = value) // SpanOrArrayLayer
            {
                glInstance.GetPathColorGenfvNV(color, pname, value_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void GetPathColorGenfvNV(this GL.NVExtension glInstance, PathColor color, PathGenMode pname, ref float value)
        {
            fixed (float* value_ptr = &value) // RefInsteadOfPointerLayer
            {
                glInstance.GetPathColorGenfvNV(color, pname, value_ptr);
            }
        }

        // GetPathTexGenivNV overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetPathTexGenivNV(this GL.NVExtension glInstance, TextureUnit texCoordSet, PathGenMode pname, Span<int> value)
        {
            fixed (int* value_ptr = value) // SpanOrArrayLayer
            {
                glInstance.GetPathTexGenivNV(texCoordSet, pname, value_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetPathTexGenivNV(this GL.NVExtension glInstance, TextureUnit texCoordSet, PathGenMode pname, int[] value)
        {
            fixed (int* value_ptr = value) // SpanOrArrayLayer
            {
                glInstance.GetPathTexGenivNV(texCoordSet, pname, value_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void GetPathTexGenivNV(this GL.NVExtension glInstance, TextureUnit texCoordSet, PathGenMode pname, ref int value)
        {
            fixed (int* value_ptr = &value) // RefInsteadOfPointerLayer
            {
                glInstance.GetPathTexGenivNV(texCoordSet, pname, value_ptr);
            }
        }

        // GetPathTexGenfvNV overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetPathTexGenfvNV(this GL.NVExtension glInstance, TextureUnit texCoordSet, PathGenMode pname, Span<float> value)
        {
            fixed (float* value_ptr = value) // SpanOrArrayLayer
            {
                glInstance.GetPathTexGenfvNV(texCoordSet, pname, value_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetPathTexGenfvNV(this GL.NVExtension glInstance, TextureUnit texCoordSet, PathGenMode pname, float[] value)
        {
            fixed (float* value_ptr = value) // SpanOrArrayLayer
            {
                glInstance.GetPathTexGenfvNV(texCoordSet, pname, value_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void GetPathTexGenfvNV(this GL.NVExtension glInstance, TextureUnit texCoordSet, PathGenMode pname, ref float value)
        {
            fixed (float* value_ptr = &value) // RefInsteadOfPointerLayer
            {
                glInstance.GetPathTexGenfvNV(texCoordSet, pname, value_ptr);
            }
        }

        // MatrixLoadTransposefEXT overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void MatrixLoadTransposefEXT(this GL.NVExtension glInstance, MatrixMode mode, ReadOnlySpan<float> m)
        {
            fixed (float* m_ptr = m) // SpanOrArrayLayer
            {
                glInstance.MatrixLoadTransposefEXT(mode, m_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void MatrixLoadTransposefEXT(this GL.NVExtension glInstance, MatrixMode mode, float[] m)
        {
            fixed (float* m_ptr = m) // SpanOrArrayLayer
            {
                glInstance.MatrixLoadTransposefEXT(mode, m_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void MatrixLoadTransposefEXT(this GL.NVExtension glInstance, MatrixMode mode, in float m)
        {
            fixed (float* m_ptr = &m) // RefInsteadOfPointerLayer
            {
                glInstance.MatrixLoadTransposefEXT(mode, m_ptr);
            }
        }

        // MatrixLoadTransposedEXT overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void MatrixLoadTransposedEXT(this GL.NVExtension glInstance, MatrixMode mode, ReadOnlySpan<double> m)
        {
            fixed (double* m_ptr = m) // SpanOrArrayLayer
            {
                glInstance.MatrixLoadTransposedEXT(mode, m_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void MatrixLoadTransposedEXT(this GL.NVExtension glInstance, MatrixMode mode, double[] m)
        {
            fixed (double* m_ptr = m) // SpanOrArrayLayer
            {
                glInstance.MatrixLoadTransposedEXT(mode, m_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void MatrixLoadTransposedEXT(this GL.NVExtension glInstance, MatrixMode mode, in double m)
        {
            fixed (double* m_ptr = &m) // RefInsteadOfPointerLayer
            {
                glInstance.MatrixLoadTransposedEXT(mode, m_ptr);
            }
        }

        // MatrixLoadfEXT overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void MatrixLoadfEXT(this GL.NVExtension glInstance, MatrixMode mode, ReadOnlySpan<float> m)
        {
            fixed (float* m_ptr = m) // SpanOrArrayLayer
            {
                glInstance.MatrixLoadfEXT(mode, m_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void MatrixLoadfEXT(this GL.NVExtension glInstance, MatrixMode mode, float[] m)
        {
            fixed (float* m_ptr = m) // SpanOrArrayLayer
            {
                glInstance.MatrixLoadfEXT(mode, m_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void MatrixLoadfEXT(this GL.NVExtension glInstance, MatrixMode mode, in float m)
        {
            fixed (float* m_ptr = &m) // RefInsteadOfPointerLayer
            {
                glInstance.MatrixLoadfEXT(mode, m_ptr);
            }
        }

        // MatrixLoaddEXT overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void MatrixLoaddEXT(this GL.NVExtension glInstance, MatrixMode mode, ReadOnlySpan<double> m)
        {
            fixed (double* m_ptr = m) // SpanOrArrayLayer
            {
                glInstance.MatrixLoaddEXT(mode, m_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void MatrixLoaddEXT(this GL.NVExtension glInstance, MatrixMode mode, double[] m)
        {
            fixed (double* m_ptr = m) // SpanOrArrayLayer
            {
                glInstance.MatrixLoaddEXT(mode, m_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void MatrixLoaddEXT(this GL.NVExtension glInstance, MatrixMode mode, in double m)
        {
            fixed (double* m_ptr = &m) // RefInsteadOfPointerLayer
            {
                glInstance.MatrixLoaddEXT(mode, m_ptr);
            }
        }

        // MatrixMultTransposefEXT overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void MatrixMultTransposefEXT(this GL.NVExtension glInstance, MatrixMode mode, ReadOnlySpan<float> m)
        {
            fixed (float* m_ptr = m) // SpanOrArrayLayer
            {
                glInstance.MatrixMultTransposefEXT(mode, m_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void MatrixMultTransposefEXT(this GL.NVExtension glInstance, MatrixMode mode, float[] m)
        {
            fixed (float* m_ptr = m) // SpanOrArrayLayer
            {
                glInstance.MatrixMultTransposefEXT(mode, m_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void MatrixMultTransposefEXT(this GL.NVExtension glInstance, MatrixMode mode, in float m)
        {
            fixed (float* m_ptr = &m) // RefInsteadOfPointerLayer
            {
                glInstance.MatrixMultTransposefEXT(mode, m_ptr);
            }
        }

        // MatrixMultTransposedEXT overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void MatrixMultTransposedEXT(this GL.NVExtension glInstance, MatrixMode mode, ReadOnlySpan<double> m)
        {
            fixed (double* m_ptr = m) // SpanOrArrayLayer
            {
                glInstance.MatrixMultTransposedEXT(mode, m_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void MatrixMultTransposedEXT(this GL.NVExtension glInstance, MatrixMode mode, double[] m)
        {
            fixed (double* m_ptr = m) // SpanOrArrayLayer
            {
                glInstance.MatrixMultTransposedEXT(mode, m_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void MatrixMultTransposedEXT(this GL.NVExtension glInstance, MatrixMode mode, in double m)
        {
            fixed (double* m_ptr = &m) // RefInsteadOfPointerLayer
            {
                glInstance.MatrixMultTransposedEXT(mode, m_ptr);
            }
        }

        // MatrixMultfEXT overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void MatrixMultfEXT(this GL.NVExtension glInstance, MatrixMode mode, ReadOnlySpan<float> m)
        {
            fixed (float* m_ptr = m) // SpanOrArrayLayer
            {
                glInstance.MatrixMultfEXT(mode, m_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void MatrixMultfEXT(this GL.NVExtension glInstance, MatrixMode mode, float[] m)
        {
            fixed (float* m_ptr = m) // SpanOrArrayLayer
            {
                glInstance.MatrixMultfEXT(mode, m_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void MatrixMultfEXT(this GL.NVExtension glInstance, MatrixMode mode, in float m)
        {
            fixed (float* m_ptr = &m) // RefInsteadOfPointerLayer
            {
                glInstance.MatrixMultfEXT(mode, m_ptr);
            }
        }

        // MatrixMultdEXT overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void MatrixMultdEXT(this GL.NVExtension glInstance, MatrixMode mode, ReadOnlySpan<double> m)
        {
            fixed (double* m_ptr = m) // SpanOrArrayLayer
            {
                glInstance.MatrixMultdEXT(mode, m_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void MatrixMultdEXT(this GL.NVExtension glInstance, MatrixMode mode, double[] m)
        {
            fixed (double* m_ptr = m) // SpanOrArrayLayer
            {
                glInstance.MatrixMultdEXT(mode, m_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void MatrixMultdEXT(this GL.NVExtension glInstance, MatrixMode mode, in double m)
        {
            fixed (double* m_ptr = &m) // RefInsteadOfPointerLayer
            {
                glInstance.MatrixMultdEXT(mode, m_ptr);
            }
        }

        // PixelDataRangeNV overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.VoidPtrToIntPtrOverloader
        public static unsafe void PixelDataRangeNV(this GL.NVExtension glInstance, PixelDataRangeTargetNV target, int length, IntPtr pointer)
        {
            var pointer_vptr = (void*)pointer;
            glInstance.PixelDataRangeNV(target, length, pointer_vptr);
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void PixelDataRangeNV<T1>(this GL.NVExtension glInstance, PixelDataRangeTargetNV target, ReadOnlySpan<T1> pointer)
            where T1 : unmanaged
        {
            var length = (int)(pointer.Length * sizeof(T1));
            fixed (void* pointer_ptr = pointer) // SpanOrArrayLayer
            {
                glInstance.PixelDataRangeNV(target, length, pointer_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void PixelDataRangeNV<T1>(this GL.NVExtension glInstance, PixelDataRangeTargetNV target, T1[] pointer)
            where T1 : unmanaged
        {
            var length = (int)(pointer.Length * sizeof(T1));
            fixed (void* pointer_ptr = pointer) // SpanOrArrayLayer
            {
                glInstance.PixelDataRangeNV(target, length, pointer_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void PixelDataRangeNV<T1>(this GL.NVExtension glInstance, PixelDataRangeTargetNV target, int length, in T1 pointer)
            where T1 : unmanaged
        {
            fixed (void* pointer_ptr = &pointer) // RefInsteadOfPointerLayer
            {
                glInstance.PixelDataRangeNV(target, length, pointer_ptr);
            }
        }

        // PointParameterivNV overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void PointParameterivNV(this GL.NVExtension glInstance, PointParameterNameARB pname, ReadOnlySpan<int> parameters)
        {
            fixed (int* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.PointParameterivNV(pname, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void PointParameterivNV(this GL.NVExtension glInstance, PointParameterNameARB pname, int[] parameters)
        {
            fixed (int* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.PointParameterivNV(pname, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void PointParameterivNV(this GL.NVExtension glInstance, PointParameterNameARB pname, in int parameters)
        {
            fixed (int* parameters_ptr = &parameters) // RefInsteadOfPointerLayer
            {
                glInstance.PointParameterivNV(pname, parameters_ptr);
            }
        }

        // GetVideoivNV overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetVideoivNV(this GL.NVExtension glInstance, uint video_slot, GLEnum pname, Span<int> parameters)
        {
            fixed (int* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.GetVideoivNV(video_slot, pname, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetVideoivNV(this GL.NVExtension glInstance, uint video_slot, GLEnum pname, int[] parameters)
        {
            fixed (int* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.GetVideoivNV(video_slot, pname, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void GetVideoivNV(this GL.NVExtension glInstance, uint video_slot, GLEnum pname, ref int parameters)
        {
            fixed (int* parameters_ptr = &parameters) // RefInsteadOfPointerLayer
            {
                glInstance.GetVideoivNV(video_slot, pname, parameters_ptr);
            }
        }

        // GetVideouivNV overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetVideouivNV(this GL.NVExtension glInstance, uint video_slot, GLEnum pname, Span<uint> parameters)
        {
            fixed (uint* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.GetVideouivNV(video_slot, pname, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetVideouivNV(this GL.NVExtension glInstance, uint video_slot, GLEnum pname, uint[] parameters)
        {
            fixed (uint* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.GetVideouivNV(video_slot, pname, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void GetVideouivNV(this GL.NVExtension glInstance, uint video_slot, GLEnum pname, ref uint parameters)
        {
            fixed (uint* parameters_ptr = &parameters) // RefInsteadOfPointerLayer
            {
                glInstance.GetVideouivNV(video_slot, pname, parameters_ptr);
            }
        }

        // GetVideoi64vNV overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetVideoi64vNV(this GL.NVExtension glInstance, uint video_slot, GLEnum pname, Span<long> parameters)
        {
            fixed (long* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.GetVideoi64vNV(video_slot, pname, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetVideoi64vNV(this GL.NVExtension glInstance, uint video_slot, GLEnum pname, long[] parameters)
        {
            fixed (long* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.GetVideoi64vNV(video_slot, pname, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void GetVideoi64vNV(this GL.NVExtension glInstance, uint video_slot, GLEnum pname, ref long parameters)
        {
            fixed (long* parameters_ptr = &parameters) // RefInsteadOfPointerLayer
            {
                glInstance.GetVideoi64vNV(video_slot, pname, parameters_ptr);
            }
        }

        // GetVideoui64vNV overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetVideoui64vNV(this GL.NVExtension glInstance, uint video_slot, GLEnum pname, Span<ulong> parameters)
        {
            fixed (ulong* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.GetVideoui64vNV(video_slot, pname, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetVideoui64vNV(this GL.NVExtension glInstance, uint video_slot, GLEnum pname, ulong[] parameters)
        {
            fixed (ulong* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.GetVideoui64vNV(video_slot, pname, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void GetVideoui64vNV(this GL.NVExtension glInstance, uint video_slot, GLEnum pname, ref ulong parameters)
        {
            fixed (ulong* parameters_ptr = &parameters) // RefInsteadOfPointerLayer
            {
                glInstance.GetVideoui64vNV(video_slot, pname, parameters_ptr);
            }
        }

        // QueryResourceNV overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe int QueryResourceNV(this GL.NVExtension glInstance, GLEnum queryType, int tagId, Span<int> buffer)
        {
            int returnValue;
            var count = (uint)(buffer.Length);
            fixed (int* buffer_ptr = buffer) // SpanOrArrayLayer
            {
                returnValue = glInstance.QueryResourceNV(queryType, tagId, count, buffer_ptr);
            }
            return returnValue;
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe int QueryResourceNV(this GL.NVExtension glInstance, GLEnum queryType, int tagId, int[] buffer)
        {
            int returnValue;
            var count = (uint)(buffer.Length);
            fixed (int* buffer_ptr = buffer) // SpanOrArrayLayer
            {
                returnValue = glInstance.QueryResourceNV(queryType, tagId, count, buffer_ptr);
            }
            return returnValue;
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe int QueryResourceNV(this GL.NVExtension glInstance, GLEnum queryType, int tagId, uint count, ref int buffer)
        {
            int returnValue;
            fixed (int* buffer_ptr = &buffer) // RefInsteadOfPointerLayer
            {
                returnValue = glInstance.QueryResourceNV(queryType, tagId, count, buffer_ptr);
            }
            return returnValue;
        }

        // GenQueryResourceTagNV overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GenQueryResourceTagNV(this GL.NVExtension glInstance, Span<int> tagIds)
        {
            var n = (int)(tagIds.Length);
            fixed (int* tagIds_ptr = tagIds) // SpanOrArrayLayer
            {
                glInstance.GenQueryResourceTagNV(n, tagIds_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GenQueryResourceTagNV(this GL.NVExtension glInstance, int[] tagIds)
        {
            var n = (int)(tagIds.Length);
            fixed (int* tagIds_ptr = tagIds) // SpanOrArrayLayer
            {
                glInstance.GenQueryResourceTagNV(n, tagIds_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void GenQueryResourceTagNV(this GL.NVExtension glInstance, int n, ref int tagIds)
        {
            fixed (int* tagIds_ptr = &tagIds) // RefInsteadOfPointerLayer
            {
                glInstance.GenQueryResourceTagNV(n, tagIds_ptr);
            }
        }

        // DeleteQueryResourceTagNV overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void DeleteQueryResourceTagNV(this GL.NVExtension glInstance, ReadOnlySpan<int> tagIds)
        {
            var n = (int)(tagIds.Length);
            fixed (int* tagIds_ptr = tagIds) // SpanOrArrayLayer
            {
                glInstance.DeleteQueryResourceTagNV(n, tagIds_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void DeleteQueryResourceTagNV(this GL.NVExtension glInstance, int[] tagIds)
        {
            var n = (int)(tagIds.Length);
            fixed (int* tagIds_ptr = tagIds) // SpanOrArrayLayer
            {
                glInstance.DeleteQueryResourceTagNV(n, tagIds_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void DeleteQueryResourceTagNV(this GL.NVExtension glInstance, int n, in int tagIds)
        {
            fixed (int* tagIds_ptr = &tagIds) // RefInsteadOfPointerLayer
            {
                glInstance.DeleteQueryResourceTagNV(n, tagIds_ptr);
            }
        }

        // QueryResourceTagNV overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.Transformer
        public static unsafe void QueryResourceTagNV(this GL.NVExtension glInstance, int tagId, string tagString)
        {
            byte* tagString_ptr = (byte*)Marshal.StringToCoTaskMemUTF8(tagString);
            glInstance.QueryResourceTagNV(tagId, tagString_ptr);
            Marshal.FreeCoTaskMem((IntPtr)tagString_ptr);
        }

        // CombinerParameterfvNV overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void CombinerParameterfvNV(this GL.NVExtension glInstance, CombinerParameterNV pname, ReadOnlySpan<float> parameters)
        {
            fixed (float* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.CombinerParameterfvNV(pname, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void CombinerParameterfvNV(this GL.NVExtension glInstance, CombinerParameterNV pname, float[] parameters)
        {
            fixed (float* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.CombinerParameterfvNV(pname, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void CombinerParameterfvNV(this GL.NVExtension glInstance, CombinerParameterNV pname, in float parameters)
        {
            fixed (float* parameters_ptr = &parameters) // RefInsteadOfPointerLayer
            {
                glInstance.CombinerParameterfvNV(pname, parameters_ptr);
            }
        }

        // CombinerParameterivNV overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void CombinerParameterivNV(this GL.NVExtension glInstance, CombinerParameterNV pname, ReadOnlySpan<int> parameters)
        {
            fixed (int* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.CombinerParameterivNV(pname, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void CombinerParameterivNV(this GL.NVExtension glInstance, CombinerParameterNV pname, int[] parameters)
        {
            fixed (int* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.CombinerParameterivNV(pname, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void CombinerParameterivNV(this GL.NVExtension glInstance, CombinerParameterNV pname, in int parameters)
        {
            fixed (int* parameters_ptr = &parameters) // RefInsteadOfPointerLayer
            {
                glInstance.CombinerParameterivNV(pname, parameters_ptr);
            }
        }

        // CombinerOutputNV overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.BoolOverloader
        public static unsafe void CombinerOutputNV(this GL.NVExtension glInstance, CombinerStageNV stage, CombinerPortionNV portion, CombinerRegisterNV abOutput, CombinerRegisterNV cdOutput, CombinerRegisterNV sumOutput, CombinerScaleNV scale, CombinerBiasNV bias, bool abDotProduct, bool cdDotProduct, bool muxSum)
        {
            var abDotProduct_byte = (byte)(abDotProduct ? 1 : 0);
            var cdDotProduct_byte = (byte)(cdDotProduct ? 1 : 0);
            var muxSum_byte = (byte)(muxSum ? 1 : 0);
            glInstance.CombinerOutputNV(stage, portion, abOutput, cdOutput, sumOutput, scale, bias, abDotProduct_byte, cdDotProduct_byte, muxSum_byte);
        }

        // GetCombinerInputParameterfvNV overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetCombinerInputParameterfvNV(this GL.NVExtension glInstance, CombinerStageNV stage, CombinerPortionNV portion, CombinerVariableNV variable, CombinerParameterNV pname, Span<float> parameters)
        {
            fixed (float* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.GetCombinerInputParameterfvNV(stage, portion, variable, pname, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetCombinerInputParameterfvNV(this GL.NVExtension glInstance, CombinerStageNV stage, CombinerPortionNV portion, CombinerVariableNV variable, CombinerParameterNV pname, float[] parameters)
        {
            fixed (float* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.GetCombinerInputParameterfvNV(stage, portion, variable, pname, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void GetCombinerInputParameterfvNV(this GL.NVExtension glInstance, CombinerStageNV stage, CombinerPortionNV portion, CombinerVariableNV variable, CombinerParameterNV pname, ref float parameters)
        {
            fixed (float* parameters_ptr = &parameters) // RefInsteadOfPointerLayer
            {
                glInstance.GetCombinerInputParameterfvNV(stage, portion, variable, pname, parameters_ptr);
            }
        }

        // GetCombinerInputParameterivNV overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetCombinerInputParameterivNV(this GL.NVExtension glInstance, CombinerStageNV stage, CombinerPortionNV portion, CombinerVariableNV variable, CombinerParameterNV pname, Span<int> parameters)
        {
            fixed (int* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.GetCombinerInputParameterivNV(stage, portion, variable, pname, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetCombinerInputParameterivNV(this GL.NVExtension glInstance, CombinerStageNV stage, CombinerPortionNV portion, CombinerVariableNV variable, CombinerParameterNV pname, int[] parameters)
        {
            fixed (int* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.GetCombinerInputParameterivNV(stage, portion, variable, pname, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void GetCombinerInputParameterivNV(this GL.NVExtension glInstance, CombinerStageNV stage, CombinerPortionNV portion, CombinerVariableNV variable, CombinerParameterNV pname, ref int parameters)
        {
            fixed (int* parameters_ptr = &parameters) // RefInsteadOfPointerLayer
            {
                glInstance.GetCombinerInputParameterivNV(stage, portion, variable, pname, parameters_ptr);
            }
        }

        // GetCombinerOutputParameterfvNV overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetCombinerOutputParameterfvNV(this GL.NVExtension glInstance, CombinerStageNV stage, CombinerPortionNV portion, CombinerParameterNV pname, Span<float> parameters)
        {
            fixed (float* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.GetCombinerOutputParameterfvNV(stage, portion, pname, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetCombinerOutputParameterfvNV(this GL.NVExtension glInstance, CombinerStageNV stage, CombinerPortionNV portion, CombinerParameterNV pname, float[] parameters)
        {
            fixed (float* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.GetCombinerOutputParameterfvNV(stage, portion, pname, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void GetCombinerOutputParameterfvNV(this GL.NVExtension glInstance, CombinerStageNV stage, CombinerPortionNV portion, CombinerParameterNV pname, ref float parameters)
        {
            fixed (float* parameters_ptr = &parameters) // RefInsteadOfPointerLayer
            {
                glInstance.GetCombinerOutputParameterfvNV(stage, portion, pname, parameters_ptr);
            }
        }

        // GetCombinerOutputParameterivNV overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetCombinerOutputParameterivNV(this GL.NVExtension glInstance, CombinerStageNV stage, CombinerPortionNV portion, CombinerParameterNV pname, Span<int> parameters)
        {
            fixed (int* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.GetCombinerOutputParameterivNV(stage, portion, pname, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetCombinerOutputParameterivNV(this GL.NVExtension glInstance, CombinerStageNV stage, CombinerPortionNV portion, CombinerParameterNV pname, int[] parameters)
        {
            fixed (int* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.GetCombinerOutputParameterivNV(stage, portion, pname, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void GetCombinerOutputParameterivNV(this GL.NVExtension glInstance, CombinerStageNV stage, CombinerPortionNV portion, CombinerParameterNV pname, ref int parameters)
        {
            fixed (int* parameters_ptr = &parameters) // RefInsteadOfPointerLayer
            {
                glInstance.GetCombinerOutputParameterivNV(stage, portion, pname, parameters_ptr);
            }
        }

        // GetFinalCombinerInputParameterfvNV overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetFinalCombinerInputParameterfvNV(this GL.NVExtension glInstance, CombinerVariableNV variable, CombinerParameterNV pname, Span<float> parameters)
        {
            fixed (float* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.GetFinalCombinerInputParameterfvNV(variable, pname, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetFinalCombinerInputParameterfvNV(this GL.NVExtension glInstance, CombinerVariableNV variable, CombinerParameterNV pname, float[] parameters)
        {
            fixed (float* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.GetFinalCombinerInputParameterfvNV(variable, pname, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void GetFinalCombinerInputParameterfvNV(this GL.NVExtension glInstance, CombinerVariableNV variable, CombinerParameterNV pname, ref float parameters)
        {
            fixed (float* parameters_ptr = &parameters) // RefInsteadOfPointerLayer
            {
                glInstance.GetFinalCombinerInputParameterfvNV(variable, pname, parameters_ptr);
            }
        }

        // GetFinalCombinerInputParameterivNV overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetFinalCombinerInputParameterivNV(this GL.NVExtension glInstance, CombinerVariableNV variable, CombinerParameterNV pname, Span<int> parameters)
        {
            fixed (int* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.GetFinalCombinerInputParameterivNV(variable, pname, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetFinalCombinerInputParameterivNV(this GL.NVExtension glInstance, CombinerVariableNV variable, CombinerParameterNV pname, int[] parameters)
        {
            fixed (int* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.GetFinalCombinerInputParameterivNV(variable, pname, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void GetFinalCombinerInputParameterivNV(this GL.NVExtension glInstance, CombinerVariableNV variable, CombinerParameterNV pname, ref int parameters)
        {
            fixed (int* parameters_ptr = &parameters) // RefInsteadOfPointerLayer
            {
                glInstance.GetFinalCombinerInputParameterivNV(variable, pname, parameters_ptr);
            }
        }

        // CombinerStageParameterfvNV overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void CombinerStageParameterfvNV(this GL.NVExtension glInstance, CombinerStageNV stage, CombinerParameterNV pname, ReadOnlySpan<float> parameters)
        {
            fixed (float* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.CombinerStageParameterfvNV(stage, pname, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void CombinerStageParameterfvNV(this GL.NVExtension glInstance, CombinerStageNV stage, CombinerParameterNV pname, float[] parameters)
        {
            fixed (float* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.CombinerStageParameterfvNV(stage, pname, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void CombinerStageParameterfvNV(this GL.NVExtension glInstance, CombinerStageNV stage, CombinerParameterNV pname, in float parameters)
        {
            fixed (float* parameters_ptr = &parameters) // RefInsteadOfPointerLayer
            {
                glInstance.CombinerStageParameterfvNV(stage, pname, parameters_ptr);
            }
        }

        // GetCombinerStageParameterfvNV overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetCombinerStageParameterfvNV(this GL.NVExtension glInstance, CombinerStageNV stage, CombinerParameterNV pname, Span<float> parameters)
        {
            fixed (float* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.GetCombinerStageParameterfvNV(stage, pname, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetCombinerStageParameterfvNV(this GL.NVExtension glInstance, CombinerStageNV stage, CombinerParameterNV pname, float[] parameters)
        {
            fixed (float* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.GetCombinerStageParameterfvNV(stage, pname, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void GetCombinerStageParameterfvNV(this GL.NVExtension glInstance, CombinerStageNV stage, CombinerParameterNV pname, ref float parameters)
        {
            fixed (float* parameters_ptr = &parameters) // RefInsteadOfPointerLayer
            {
                glInstance.GetCombinerStageParameterfvNV(stage, pname, parameters_ptr);
            }
        }

        // FramebufferSampleLocationsfvNV overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void FramebufferSampleLocationsfvNV(this GL.NVExtension glInstance, FramebufferTarget target, uint start, int count, in float v)
        {
            fixed (float* v_ptr = &v) // RefInsteadOfPointerLayer
            {
                glInstance.FramebufferSampleLocationsfvNV(target, start, count, v_ptr);
            }
        }

        // NamedFramebufferSampleLocationsfvNV overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void NamedFramebufferSampleLocationsfvNV(this GL.NVExtension glInstance, FramebufferHandle framebuffer, uint start, int count, in float v)
        {
            fixed (float* v_ptr = &v) // RefInsteadOfPointerLayer
            {
                glInstance.NamedFramebufferSampleLocationsfvNV(framebuffer, start, count, v_ptr);
            }
        }

        // ScissorExclusiveArrayvNV overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void ScissorExclusiveArrayvNV(this GL.NVExtension glInstance, uint first, int count, ReadOnlySpan<int> v)
        {
            fixed (int* v_ptr = v) // SpanOrArrayLayer
            {
                glInstance.ScissorExclusiveArrayvNV(first, count, v_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void ScissorExclusiveArrayvNV(this GL.NVExtension glInstance, uint first, int count, int[] v)
        {
            fixed (int* v_ptr = v) // SpanOrArrayLayer
            {
                glInstance.ScissorExclusiveArrayvNV(first, count, v_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void ScissorExclusiveArrayvNV(this GL.NVExtension glInstance, uint first, int count, in int v)
        {
            fixed (int* v_ptr = &v) // RefInsteadOfPointerLayer
            {
                glInstance.ScissorExclusiveArrayvNV(first, count, v_ptr);
            }
        }

        // GetBufferParameterui64vNV overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetBufferParameterui64vNV(this GL.NVExtension glInstance, BufferTargetARB target, GLEnum pname, Span<ulong> parameters)
        {
            fixed (ulong* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.GetBufferParameterui64vNV(target, pname, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetBufferParameterui64vNV(this GL.NVExtension glInstance, BufferTargetARB target, GLEnum pname, ulong[] parameters)
        {
            fixed (ulong* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.GetBufferParameterui64vNV(target, pname, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void GetBufferParameterui64vNV(this GL.NVExtension glInstance, BufferTargetARB target, GLEnum pname, ref ulong parameters)
        {
            fixed (ulong* parameters_ptr = &parameters) // RefInsteadOfPointerLayer
            {
                glInstance.GetBufferParameterui64vNV(target, pname, parameters_ptr);
            }
        }

        // GetNamedBufferParameterui64vNV overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetNamedBufferParameterui64vNV(this GL.NVExtension glInstance, BufferHandle buffer, BufferPNameARB pname, Span<ulong> parameters)
        {
            fixed (ulong* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.GetNamedBufferParameterui64vNV(buffer, pname, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetNamedBufferParameterui64vNV(this GL.NVExtension glInstance, BufferHandle buffer, BufferPNameARB pname, ulong[] parameters)
        {
            fixed (ulong* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.GetNamedBufferParameterui64vNV(buffer, pname, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void GetNamedBufferParameterui64vNV(this GL.NVExtension glInstance, BufferHandle buffer, BufferPNameARB pname, ref ulong parameters)
        {
            fixed (ulong* parameters_ptr = &parameters) // RefInsteadOfPointerLayer
            {
                glInstance.GetNamedBufferParameterui64vNV(buffer, pname, parameters_ptr);
            }
        }

        // GetIntegerui64vNV overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetIntegerui64vNV(this GL.NVExtension glInstance, GLEnum value, Span<ulong> result)
        {
            fixed (ulong* result_ptr = result) // SpanOrArrayLayer
            {
                glInstance.GetIntegerui64vNV(value, result_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetIntegerui64vNV(this GL.NVExtension glInstance, GLEnum value, ulong[] result)
        {
            fixed (ulong* result_ptr = result) // SpanOrArrayLayer
            {
                glInstance.GetIntegerui64vNV(value, result_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void GetIntegerui64vNV(this GL.NVExtension glInstance, GLEnum value, ref ulong result)
        {
            fixed (ulong* result_ptr = &result) // RefInsteadOfPointerLayer
            {
                glInstance.GetIntegerui64vNV(value, result_ptr);
            }
        }

        // Uniformui64vNV overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void Uniformui64vNV(this GL.NVExtension glInstance, int location, ReadOnlySpan<ulong> value)
        {
            var count = (int)(value.Length / 1);
            fixed (ulong* value_ptr = value) // SpanOrArrayLayer
            {
                glInstance.Uniformui64vNV(location, count, value_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void Uniformui64vNV(this GL.NVExtension glInstance, int location, ulong[] value)
        {
            var count = (int)(value.Length / 1);
            fixed (ulong* value_ptr = value) // SpanOrArrayLayer
            {
                glInstance.Uniformui64vNV(location, count, value_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void Uniformui64vNV(this GL.NVExtension glInstance, int location, int count, in ulong value)
        {
            fixed (ulong* value_ptr = &value) // RefInsteadOfPointerLayer
            {
                glInstance.Uniformui64vNV(location, count, value_ptr);
            }
        }

        // GetUniformui64vNV overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetUniformui64vNV(this GL.NVExtension glInstance, ProgramHandle program, int location, Span<ulong> parameters)
        {
            fixed (ulong* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.GetUniformui64vNV(program, location, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetUniformui64vNV(this GL.NVExtension glInstance, ProgramHandle program, int location, ulong[] parameters)
        {
            fixed (ulong* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.GetUniformui64vNV(program, location, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void GetUniformui64vNV(this GL.NVExtension glInstance, ProgramHandle program, int location, ref ulong parameters)
        {
            fixed (ulong* parameters_ptr = &parameters) // RefInsteadOfPointerLayer
            {
                glInstance.GetUniformui64vNV(program, location, parameters_ptr);
            }
        }

        // ProgramUniformui64vNV overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void ProgramUniformui64vNV(this GL.NVExtension glInstance, ProgramHandle program, int location, ReadOnlySpan<ulong> value)
        {
            var count = (int)(value.Length);
            fixed (ulong* value_ptr = value) // SpanOrArrayLayer
            {
                glInstance.ProgramUniformui64vNV(program, location, count, value_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void ProgramUniformui64vNV(this GL.NVExtension glInstance, ProgramHandle program, int location, ulong[] value)
        {
            var count = (int)(value.Length);
            fixed (ulong* value_ptr = value) // SpanOrArrayLayer
            {
                glInstance.ProgramUniformui64vNV(program, location, count, value_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void ProgramUniformui64vNV(this GL.NVExtension glInstance, ProgramHandle program, int location, int count, in ulong value)
        {
            fixed (ulong* value_ptr = &value) // RefInsteadOfPointerLayer
            {
                glInstance.ProgramUniformui64vNV(program, location, count, value_ptr);
            }
        }

        // GetShadingRateImagePaletteNV overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetShadingRateImagePaletteNV(this GL.NVExtension glInstance, uint viewport, uint entry, Span<GLEnum> rate)
        {
            fixed (GLEnum* rate_ptr = rate) // SpanOrArrayLayer
            {
                glInstance.GetShadingRateImagePaletteNV(viewport, entry, rate_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetShadingRateImagePaletteNV(this GL.NVExtension glInstance, uint viewport, uint entry, GLEnum[] rate)
        {
            fixed (GLEnum* rate_ptr = rate) // SpanOrArrayLayer
            {
                glInstance.GetShadingRateImagePaletteNV(viewport, entry, rate_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void GetShadingRateImagePaletteNV(this GL.NVExtension glInstance, uint viewport, uint entry, ref GLEnum rate)
        {
            fixed (GLEnum* rate_ptr = &rate) // RefInsteadOfPointerLayer
            {
                glInstance.GetShadingRateImagePaletteNV(viewport, entry, rate_ptr);
            }
        }

        // GetShadingRateSampleLocationivNV overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetShadingRateSampleLocationivNV(this GL.NVExtension glInstance, GLEnum rate, uint samples, uint index, Span<int> location)
        {
            fixed (int* location_ptr = location) // SpanOrArrayLayer
            {
                glInstance.GetShadingRateSampleLocationivNV(rate, samples, index, location_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetShadingRateSampleLocationivNV(this GL.NVExtension glInstance, GLEnum rate, uint samples, uint index, int[] location)
        {
            fixed (int* location_ptr = location) // SpanOrArrayLayer
            {
                glInstance.GetShadingRateSampleLocationivNV(rate, samples, index, location_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void GetShadingRateSampleLocationivNV(this GL.NVExtension glInstance, GLEnum rate, uint samples, uint index, ref int location)
        {
            fixed (int* location_ptr = &location) // RefInsteadOfPointerLayer
            {
                glInstance.GetShadingRateSampleLocationivNV(rate, samples, index, location_ptr);
            }
        }

        // ShadingRateImageBarrierNV overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.BoolOverloader
        public static unsafe void ShadingRateImageBarrierNV(this GL.NVExtension glInstance, bool synchronize)
        {
            var synchronize_byte = (byte)(synchronize ? 1 : 0);
            glInstance.ShadingRateImageBarrierNV(synchronize_byte);
        }

        // ShadingRateImagePaletteNV overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void ShadingRateImagePaletteNV(this GL.NVExtension glInstance, uint viewport, uint first, ReadOnlySpan<GLEnum> rates)
        {
            var count = (int)(rates.Length);
            fixed (GLEnum* rates_ptr = rates) // SpanOrArrayLayer
            {
                glInstance.ShadingRateImagePaletteNV(viewport, first, count, rates_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void ShadingRateImagePaletteNV(this GL.NVExtension glInstance, uint viewport, uint first, GLEnum[] rates)
        {
            var count = (int)(rates.Length);
            fixed (GLEnum* rates_ptr = rates) // SpanOrArrayLayer
            {
                glInstance.ShadingRateImagePaletteNV(viewport, first, count, rates_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void ShadingRateImagePaletteNV(this GL.NVExtension glInstance, uint viewport, uint first, int count, in GLEnum rates)
        {
            fixed (GLEnum* rates_ptr = &rates) // RefInsteadOfPointerLayer
            {
                glInstance.ShadingRateImagePaletteNV(viewport, first, count, rates_ptr);
            }
        }

        // ShadingRateSampleOrderCustomNV overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void ShadingRateSampleOrderCustomNV(this GL.NVExtension glInstance, GLEnum rate, uint samples, ReadOnlySpan<int> locations)
        {
            fixed (int* locations_ptr = locations) // SpanOrArrayLayer
            {
                glInstance.ShadingRateSampleOrderCustomNV(rate, samples, locations_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void ShadingRateSampleOrderCustomNV(this GL.NVExtension glInstance, GLEnum rate, uint samples, int[] locations)
        {
            fixed (int* locations_ptr = locations) // SpanOrArrayLayer
            {
                glInstance.ShadingRateSampleOrderCustomNV(rate, samples, locations_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void ShadingRateSampleOrderCustomNV(this GL.NVExtension glInstance, GLEnum rate, uint samples, in int locations)
        {
            fixed (int* locations_ptr = &locations) // RefInsteadOfPointerLayer
            {
                glInstance.ShadingRateSampleOrderCustomNV(rate, samples, locations_ptr);
            }
        }

        // TexImage2DMultisampleCoverageNV overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.BoolOverloader
        public static unsafe void TexImage2DMultisampleCoverageNV(this GL.NVExtension glInstance, TextureTarget target, int coverageSamples, int colorSamples, int internalFormat, int width, int height, bool fixedSampleLocations)
        {
            var fixedSampleLocations_byte = (byte)(fixedSampleLocations ? 1 : 0);
            glInstance.TexImage2DMultisampleCoverageNV(target, coverageSamples, colorSamples, internalFormat, width, height, fixedSampleLocations_byte);
        }

        // TexImage3DMultisampleCoverageNV overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.BoolOverloader
        public static unsafe void TexImage3DMultisampleCoverageNV(this GL.NVExtension glInstance, TextureTarget target, int coverageSamples, int colorSamples, int internalFormat, int width, int height, int depth, bool fixedSampleLocations)
        {
            var fixedSampleLocations_byte = (byte)(fixedSampleLocations ? 1 : 0);
            glInstance.TexImage3DMultisampleCoverageNV(target, coverageSamples, colorSamples, internalFormat, width, height, depth, fixedSampleLocations_byte);
        }

        // TextureImage2DMultisampleNV overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.BoolOverloader
        public static unsafe void TextureImage2DMultisampleNV(this GL.NVExtension glInstance, TextureHandle texture, TextureTarget target, int samples, int internalFormat, int width, int height, bool fixedSampleLocations)
        {
            var fixedSampleLocations_byte = (byte)(fixedSampleLocations ? 1 : 0);
            glInstance.TextureImage2DMultisampleNV(texture, target, samples, internalFormat, width, height, fixedSampleLocations_byte);
        }

        // TextureImage3DMultisampleNV overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.BoolOverloader
        public static unsafe void TextureImage3DMultisampleNV(this GL.NVExtension glInstance, TextureHandle texture, TextureTarget target, int samples, int internalFormat, int width, int height, int depth, bool fixedSampleLocations)
        {
            var fixedSampleLocations_byte = (byte)(fixedSampleLocations ? 1 : 0);
            glInstance.TextureImage3DMultisampleNV(texture, target, samples, internalFormat, width, height, depth, fixedSampleLocations_byte);
        }

        // TextureImage2DMultisampleCoverageNV overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.BoolOverloader
        public static unsafe void TextureImage2DMultisampleCoverageNV(this GL.NVExtension glInstance, TextureHandle texture, TextureTarget target, int coverageSamples, int colorSamples, int internalFormat, int width, int height, bool fixedSampleLocations)
        {
            var fixedSampleLocations_byte = (byte)(fixedSampleLocations ? 1 : 0);
            glInstance.TextureImage2DMultisampleCoverageNV(texture, target, coverageSamples, colorSamples, internalFormat, width, height, fixedSampleLocations_byte);
        }

        // TextureImage3DMultisampleCoverageNV overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.BoolOverloader
        public static unsafe void TextureImage3DMultisampleCoverageNV(this GL.NVExtension glInstance, TextureHandle texture, TextureTarget target, int coverageSamples, int colorSamples, int internalFormat, int width, int height, int depth, bool fixedSampleLocations)
        {
            var fixedSampleLocations_byte = (byte)(fixedSampleLocations ? 1 : 0);
            glInstance.TextureImage3DMultisampleCoverageNV(texture, target, coverageSamples, colorSamples, internalFormat, width, height, depth, fixedSampleLocations_byte);
        }

        // TransformFeedbackAttribsNV overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void TransformFeedbackAttribsNV(this GL.NVExtension glInstance, int count, ReadOnlySpan<int> attribs, GLEnum bufferMode)
        {
            fixed (int* attribs_ptr = attribs) // SpanOrArrayLayer
            {
                glInstance.TransformFeedbackAttribsNV(count, attribs_ptr, bufferMode);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void TransformFeedbackAttribsNV(this GL.NVExtension glInstance, int count, int[] attribs, GLEnum bufferMode)
        {
            fixed (int* attribs_ptr = attribs) // SpanOrArrayLayer
            {
                glInstance.TransformFeedbackAttribsNV(count, attribs_ptr, bufferMode);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void TransformFeedbackAttribsNV(this GL.NVExtension glInstance, int count, in int attribs, GLEnum bufferMode)
        {
            fixed (int* attribs_ptr = &attribs) // RefInsteadOfPointerLayer
            {
                glInstance.TransformFeedbackAttribsNV(count, attribs_ptr, bufferMode);
            }
        }

        // TransformFeedbackVaryingsNV overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void TransformFeedbackVaryingsNV(this GL.NVExtension glInstance, ProgramHandle program, ReadOnlySpan<int> locations, GLEnum bufferMode)
        {
            var count = (int)(locations.Length);
            fixed (int* locations_ptr = locations) // SpanOrArrayLayer
            {
                glInstance.TransformFeedbackVaryingsNV(program, count, locations_ptr, bufferMode);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void TransformFeedbackVaryingsNV(this GL.NVExtension glInstance, ProgramHandle program, int[] locations, GLEnum bufferMode)
        {
            var count = (int)(locations.Length);
            fixed (int* locations_ptr = locations) // SpanOrArrayLayer
            {
                glInstance.TransformFeedbackVaryingsNV(program, count, locations_ptr, bufferMode);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void TransformFeedbackVaryingsNV(this GL.NVExtension glInstance, ProgramHandle program, int count, in int locations, GLEnum bufferMode)
        {
            fixed (int* locations_ptr = &locations) // RefInsteadOfPointerLayer
            {
                glInstance.TransformFeedbackVaryingsNV(program, count, locations_ptr, bufferMode);
            }
        }

        // ActiveVaryingNV overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.Transformer
        public static unsafe void ActiveVaryingNV(this GL.NVExtension glInstance, ProgramHandle program, string name)
        {
            byte* name_ptr = (byte*)Marshal.StringToCoTaskMemUTF8(name);
            glInstance.ActiveVaryingNV(program, name_ptr);
            Marshal.FreeCoTaskMem((IntPtr)name_ptr);
        }

        // GetVaryingLocationNV overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.Transformer
        public static unsafe int GetVaryingLocationNV(this GL.NVExtension glInstance, ProgramHandle program, string name)
        {
            int returnValue;
            byte* name_ptr = (byte*)Marshal.StringToCoTaskMemUTF8(name);
            returnValue = glInstance.GetVaryingLocationNV(program, name_ptr);
            Marshal.FreeCoTaskMem((IntPtr)name_ptr);
            return returnValue;
        }

        // GetActiveVaryingNV overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.OutToReturnOverloader
        public static unsafe string GetActiveVaryingNV(this GL.NVExtension glInstance, ProgramHandle program, uint index, int bufSize, Span<int> length, Span<int> size, Span<GLEnum> type)
        {
            string name;
            fixed (int* length_ptr = length) // SpanOrArrayLayer
            {
                fixed (int* size_ptr = size) // SpanOrArrayLayer
                {
                    fixed (GLEnum* type_ptr = type) // SpanOrArrayLayer
                    {
                        var name_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                        glInstance.GetActiveVaryingNV(program, index, bufSize, length_ptr, size_ptr, type_ptr, name_ptr);
                        name = Marshal.PtrToStringUTF8((IntPtr)name_ptr)!;
                        Marshal.FreeCoTaskMem((IntPtr)name_ptr);
                    }
                }
            }
            return name;
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetActiveVaryingNV(this GL.NVExtension glInstance, ProgramHandle program, uint index, int bufSize, Span<int> length, Span<int> size, Span<GLEnum> type, out string name)
        {
            fixed (int* length_ptr = length) // SpanOrArrayLayer
            {
                fixed (int* size_ptr = size) // SpanOrArrayLayer
                {
                    fixed (GLEnum* type_ptr = type) // SpanOrArrayLayer
                    {
                        var name_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                        glInstance.GetActiveVaryingNV(program, index, bufSize, length_ptr, size_ptr, type_ptr, name_ptr);
                        name = Marshal.PtrToStringUTF8((IntPtr)name_ptr)!;
                        Marshal.FreeCoTaskMem((IntPtr)name_ptr);
                    }
                }
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.OutToReturnOverloader
        public static unsafe string GetActiveVaryingNV(this GL.NVExtension glInstance, ProgramHandle program, uint index, int bufSize, int[] length, int[] size, GLEnum[] type)
        {
            string name;
            fixed (int* length_ptr = length) // SpanOrArrayLayer
            {
                fixed (int* size_ptr = size) // SpanOrArrayLayer
                {
                    fixed (GLEnum* type_ptr = type) // SpanOrArrayLayer
                    {
                        var name_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                        glInstance.GetActiveVaryingNV(program, index, bufSize, length_ptr, size_ptr, type_ptr, name_ptr);
                        name = Marshal.PtrToStringUTF8((IntPtr)name_ptr)!;
                        Marshal.FreeCoTaskMem((IntPtr)name_ptr);
                    }
                }
            }
            return name;
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetActiveVaryingNV(this GL.NVExtension glInstance, ProgramHandle program, uint index, int bufSize, int[] length, int[] size, GLEnum[] type, out string name)
        {
            fixed (int* length_ptr = length) // SpanOrArrayLayer
            {
                fixed (int* size_ptr = size) // SpanOrArrayLayer
                {
                    fixed (GLEnum* type_ptr = type) // SpanOrArrayLayer
                    {
                        var name_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                        glInstance.GetActiveVaryingNV(program, index, bufSize, length_ptr, size_ptr, type_ptr, name_ptr);
                        name = Marshal.PtrToStringUTF8((IntPtr)name_ptr)!;
                        Marshal.FreeCoTaskMem((IntPtr)name_ptr);
                    }
                }
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.OutToReturnOverloader
        public static unsafe string GetActiveVaryingNV(this GL.NVExtension glInstance, ProgramHandle program, uint index, int bufSize, ref int length, ref int size, ref GLEnum type)
        {
            string name;
            fixed (int* length_ptr = &length) // RefInsteadOfPointerLayer
            fixed (int* size_ptr = &size) // RefInsteadOfPointerLayer
            fixed (GLEnum* type_ptr = &type) // RefInsteadOfPointerLayer
            {
                var name_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                glInstance.GetActiveVaryingNV(program, index, bufSize, length_ptr, size_ptr, type_ptr, name_ptr);
                name = Marshal.PtrToStringUTF8((IntPtr)name_ptr)!;
                Marshal.FreeCoTaskMem((IntPtr)name_ptr);
            }
            return name;
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void GetActiveVaryingNV(this GL.NVExtension glInstance, ProgramHandle program, uint index, int bufSize, ref int length, ref int size, ref GLEnum type, out string name)
        {
            fixed (int* length_ptr = &length) // RefInsteadOfPointerLayer
            fixed (int* size_ptr = &size) // RefInsteadOfPointerLayer
            fixed (GLEnum* type_ptr = &type) // RefInsteadOfPointerLayer
            {
                var name_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                glInstance.GetActiveVaryingNV(program, index, bufSize, length_ptr, size_ptr, type_ptr, name_ptr);
                name = Marshal.PtrToStringUTF8((IntPtr)name_ptr)!;
                Marshal.FreeCoTaskMem((IntPtr)name_ptr);
            }
        }

        // GetTransformFeedbackVaryingNV overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetTransformFeedbackVaryingNV(this GL.NVExtension glInstance, ProgramHandle program, uint index, Span<int> location)
        {
            fixed (int* location_ptr = location) // SpanOrArrayLayer
            {
                glInstance.GetTransformFeedbackVaryingNV(program, index, location_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetTransformFeedbackVaryingNV(this GL.NVExtension glInstance, ProgramHandle program, uint index, int[] location)
        {
            fixed (int* location_ptr = location) // SpanOrArrayLayer
            {
                glInstance.GetTransformFeedbackVaryingNV(program, index, location_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void GetTransformFeedbackVaryingNV(this GL.NVExtension glInstance, ProgramHandle program, uint index, ref int location)
        {
            fixed (int* location_ptr = &location) // RefInsteadOfPointerLayer
            {
                glInstance.GetTransformFeedbackVaryingNV(program, index, location_ptr);
            }
        }

        // TransformFeedbackStreamAttribsNV overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void TransformFeedbackStreamAttribsNV(this GL.NVExtension glInstance, ReadOnlySpan<int> attribs, ReadOnlySpan<int> bufstreams, GLEnum bufferMode)
        {
            var count = (int)(attribs.Length);
            fixed (int* attribs_ptr = attribs) // SpanOrArrayLayer
            {
                var nbuffers = (int)(bufstreams.Length);
                fixed (int* bufstreams_ptr = bufstreams) // SpanOrArrayLayer
                {
                    glInstance.TransformFeedbackStreamAttribsNV(count, attribs_ptr, nbuffers, bufstreams_ptr, bufferMode);
                }
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void TransformFeedbackStreamAttribsNV(this GL.NVExtension glInstance, int[] attribs, int[] bufstreams, GLEnum bufferMode)
        {
            var count = (int)(attribs.Length);
            fixed (int* attribs_ptr = attribs) // SpanOrArrayLayer
            {
                var nbuffers = (int)(bufstreams.Length);
                fixed (int* bufstreams_ptr = bufstreams) // SpanOrArrayLayer
                {
                    glInstance.TransformFeedbackStreamAttribsNV(count, attribs_ptr, nbuffers, bufstreams_ptr, bufferMode);
                }
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void TransformFeedbackStreamAttribsNV(this GL.NVExtension glInstance, int count, in int attribs, int nbuffers, in int bufstreams, GLEnum bufferMode)
        {
            fixed (int* attribs_ptr = &attribs) // RefInsteadOfPointerLayer
            fixed (int* bufstreams_ptr = &bufstreams) // RefInsteadOfPointerLayer
            {
                glInstance.TransformFeedbackStreamAttribsNV(count, attribs_ptr, nbuffers, bufstreams_ptr, bufferMode);
            }
        }

        // DeleteTransformFeedbacksNV overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void DeleteTransformFeedbacksNV(this GL.NVExtension glInstance, ReadOnlySpan<TransformFeedbackHandle> ids)
        {
            var n = (int)(ids.Length);
            fixed (TransformFeedbackHandle* ids_ptr = ids) // SpanOrArrayLayer
            {
                glInstance.DeleteTransformFeedbacksNV(n, ids_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void DeleteTransformFeedbacksNV(this GL.NVExtension glInstance, TransformFeedbackHandle[] ids)
        {
            var n = (int)(ids.Length);
            fixed (TransformFeedbackHandle* ids_ptr = ids) // SpanOrArrayLayer
            {
                glInstance.DeleteTransformFeedbacksNV(n, ids_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void DeleteTransformFeedbacksNV(this GL.NVExtension glInstance, int n, in TransformFeedbackHandle ids)
        {
            fixed (TransformFeedbackHandle* ids_ptr = &ids) // RefInsteadOfPointerLayer
            {
                glInstance.DeleteTransformFeedbacksNV(n, ids_ptr);
            }
        }

        // GenTransformFeedbacksNV overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GenTransformFeedbacksNV(this GL.NVExtension glInstance, Span<TransformFeedbackHandle> ids)
        {
            var n = (int)(ids.Length);
            fixed (TransformFeedbackHandle* ids_ptr = ids) // SpanOrArrayLayer
            {
                glInstance.GenTransformFeedbacksNV(n, ids_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GenTransformFeedbacksNV(this GL.NVExtension glInstance, TransformFeedbackHandle[] ids)
        {
            var n = (int)(ids.Length);
            fixed (TransformFeedbackHandle* ids_ptr = ids) // SpanOrArrayLayer
            {
                glInstance.GenTransformFeedbacksNV(n, ids_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void GenTransformFeedbacksNV(this GL.NVExtension glInstance, int n, ref TransformFeedbackHandle ids)
        {
            fixed (TransformFeedbackHandle* ids_ptr = &ids) // RefInsteadOfPointerLayer
            {
                glInstance.GenTransformFeedbacksNV(n, ids_ptr);
            }
        }

        // VDPAUInitNV overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.VoidPtrToIntPtrOverloader
        public static unsafe void VDPAUInitNV(this GL.NVExtension glInstance, IntPtr vdpDevice, IntPtr getProcAddress)
        {
            var vdpDevice_vptr = (void*)vdpDevice;
            var getProcAddress_vptr = (void*)getProcAddress;
            glInstance.VDPAUInitNV(vdpDevice_vptr, getProcAddress_vptr);
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void VDPAUInitNV<T1, T2>(this GL.NVExtension glInstance, in T1 vdpDevice, in T2 getProcAddress)
            where T1 : unmanaged
            where T2 : unmanaged
        {
            fixed (void* vdpDevice_ptr = &vdpDevice) // RefInsteadOfPointerLayer
            fixed (void* getProcAddress_ptr = &getProcAddress) // RefInsteadOfPointerLayer
            {
                glInstance.VDPAUInitNV(vdpDevice_ptr, getProcAddress_ptr);
            }
        }

        // VDPAURegisterVideoSurfaceNV overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe IntPtr VDPAURegisterVideoSurfaceNV(this GL.NVExtension glInstance, IntPtr vdpSurface, GLEnum target, ReadOnlySpan<uint> textureNames)
        {
            IntPtr returnValue;
            var numTextureNames = (int)(textureNames.Length);
            fixed (uint* textureNames_ptr = textureNames) // SpanOrArrayLayer
            {
                var vdpSurface_vptr = (void*)vdpSurface;
                returnValue = glInstance.VDPAURegisterVideoSurfaceNV(vdpSurface_vptr, target, numTextureNames, textureNames_ptr);
            }
            return returnValue;
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe IntPtr VDPAURegisterVideoSurfaceNV(this GL.NVExtension glInstance, IntPtr vdpSurface, GLEnum target, uint[] textureNames)
        {
            IntPtr returnValue;
            var numTextureNames = (int)(textureNames.Length);
            fixed (uint* textureNames_ptr = textureNames) // SpanOrArrayLayer
            {
                var vdpSurface_vptr = (void*)vdpSurface;
                returnValue = glInstance.VDPAURegisterVideoSurfaceNV(vdpSurface_vptr, target, numTextureNames, textureNames_ptr);
            }
            return returnValue;
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe IntPtr VDPAURegisterVideoSurfaceNV(this GL.NVExtension glInstance, IntPtr vdpSurface, GLEnum target, int numTextureNames, in uint textureNames)
        {
            IntPtr returnValue;
            fixed (uint* textureNames_ptr = &textureNames) // RefInsteadOfPointerLayer
            {
                var vdpSurface_vptr = (void*)vdpSurface;
                returnValue = glInstance.VDPAURegisterVideoSurfaceNV(vdpSurface_vptr, target, numTextureNames, textureNames_ptr);
            }
            return returnValue;
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe IntPtr VDPAURegisterVideoSurfaceNV<T1>(this GL.NVExtension glInstance, in T1 vdpSurface, GLEnum target, ReadOnlySpan<uint> textureNames)
            where T1 : unmanaged
        {
            IntPtr returnValue;
            fixed (void* vdpSurface_ptr = &vdpSurface) // RefInsteadOfPointerLayer
            {
                var numTextureNames = (int)(textureNames.Length);
                fixed (uint* textureNames_ptr = textureNames) // SpanOrArrayLayer
                {
                    returnValue = glInstance.VDPAURegisterVideoSurfaceNV(vdpSurface_ptr, target, numTextureNames, textureNames_ptr);
                }
            }
            return returnValue;
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe IntPtr VDPAURegisterVideoSurfaceNV<T1>(this GL.NVExtension glInstance, in T1 vdpSurface, GLEnum target, uint[] textureNames)
            where T1 : unmanaged
        {
            IntPtr returnValue;
            fixed (void* vdpSurface_ptr = &vdpSurface) // RefInsteadOfPointerLayer
            {
                var numTextureNames = (int)(textureNames.Length);
                fixed (uint* textureNames_ptr = textureNames) // SpanOrArrayLayer
                {
                    returnValue = glInstance.VDPAURegisterVideoSurfaceNV(vdpSurface_ptr, target, numTextureNames, textureNames_ptr);
                }
            }
            return returnValue;
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe IntPtr VDPAURegisterVideoSurfaceNV<T1>(this GL.NVExtension glInstance, in T1 vdpSurface, GLEnum target, int numTextureNames, in uint textureNames)
            where T1 : unmanaged
        {
            IntPtr returnValue;
            fixed (void* vdpSurface_ptr = &vdpSurface) // RefInsteadOfPointerLayer
            fixed (uint* textureNames_ptr = &textureNames) // RefInsteadOfPointerLayer
            {
                returnValue = glInstance.VDPAURegisterVideoSurfaceNV(vdpSurface_ptr, target, numTextureNames, textureNames_ptr);
            }
            return returnValue;
        }

        // VDPAURegisterOutputSurfaceNV overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe IntPtr VDPAURegisterOutputSurfaceNV(this GL.NVExtension glInstance, IntPtr vdpSurface, GLEnum target, ReadOnlySpan<uint> textureNames)
        {
            IntPtr returnValue;
            var numTextureNames = (int)(textureNames.Length);
            fixed (uint* textureNames_ptr = textureNames) // SpanOrArrayLayer
            {
                var vdpSurface_vptr = (void*)vdpSurface;
                returnValue = glInstance.VDPAURegisterOutputSurfaceNV(vdpSurface_vptr, target, numTextureNames, textureNames_ptr);
            }
            return returnValue;
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe IntPtr VDPAURegisterOutputSurfaceNV(this GL.NVExtension glInstance, IntPtr vdpSurface, GLEnum target, uint[] textureNames)
        {
            IntPtr returnValue;
            var numTextureNames = (int)(textureNames.Length);
            fixed (uint* textureNames_ptr = textureNames) // SpanOrArrayLayer
            {
                var vdpSurface_vptr = (void*)vdpSurface;
                returnValue = glInstance.VDPAURegisterOutputSurfaceNV(vdpSurface_vptr, target, numTextureNames, textureNames_ptr);
            }
            return returnValue;
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe IntPtr VDPAURegisterOutputSurfaceNV(this GL.NVExtension glInstance, IntPtr vdpSurface, GLEnum target, int numTextureNames, in uint textureNames)
        {
            IntPtr returnValue;
            fixed (uint* textureNames_ptr = &textureNames) // RefInsteadOfPointerLayer
            {
                var vdpSurface_vptr = (void*)vdpSurface;
                returnValue = glInstance.VDPAURegisterOutputSurfaceNV(vdpSurface_vptr, target, numTextureNames, textureNames_ptr);
            }
            return returnValue;
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe IntPtr VDPAURegisterOutputSurfaceNV<T1>(this GL.NVExtension glInstance, in T1 vdpSurface, GLEnum target, ReadOnlySpan<uint> textureNames)
            where T1 : unmanaged
        {
            IntPtr returnValue;
            fixed (void* vdpSurface_ptr = &vdpSurface) // RefInsteadOfPointerLayer
            {
                var numTextureNames = (int)(textureNames.Length);
                fixed (uint* textureNames_ptr = textureNames) // SpanOrArrayLayer
                {
                    returnValue = glInstance.VDPAURegisterOutputSurfaceNV(vdpSurface_ptr, target, numTextureNames, textureNames_ptr);
                }
            }
            return returnValue;
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe IntPtr VDPAURegisterOutputSurfaceNV<T1>(this GL.NVExtension glInstance, in T1 vdpSurface, GLEnum target, uint[] textureNames)
            where T1 : unmanaged
        {
            IntPtr returnValue;
            fixed (void* vdpSurface_ptr = &vdpSurface) // RefInsteadOfPointerLayer
            {
                var numTextureNames = (int)(textureNames.Length);
                fixed (uint* textureNames_ptr = textureNames) // SpanOrArrayLayer
                {
                    returnValue = glInstance.VDPAURegisterOutputSurfaceNV(vdpSurface_ptr, target, numTextureNames, textureNames_ptr);
                }
            }
            return returnValue;
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe IntPtr VDPAURegisterOutputSurfaceNV<T1>(this GL.NVExtension glInstance, in T1 vdpSurface, GLEnum target, int numTextureNames, in uint textureNames)
            where T1 : unmanaged
        {
            IntPtr returnValue;
            fixed (void* vdpSurface_ptr = &vdpSurface) // RefInsteadOfPointerLayer
            fixed (uint* textureNames_ptr = &textureNames) // RefInsteadOfPointerLayer
            {
                returnValue = glInstance.VDPAURegisterOutputSurfaceNV(vdpSurface_ptr, target, numTextureNames, textureNames_ptr);
            }
            return returnValue;
        }

        // VDPAUGetSurfaceivNV overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void VDPAUGetSurfaceivNV(this GL.NVExtension glInstance, IntPtr surface, GLEnum pname, ref int length, Span<int> values)
        {
            fixed (int* length_ptr = &length) // RefInsteadOfPointerLayer
            {
                var count = (int)(values.Length);
                fixed (int* values_ptr = values) // SpanOrArrayLayer
                {
                    glInstance.VDPAUGetSurfaceivNV(surface, pname, count, length_ptr, values_ptr);
                }
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void VDPAUGetSurfaceivNV(this GL.NVExtension glInstance, IntPtr surface, GLEnum pname, ref int length, int[] values)
        {
            fixed (int* length_ptr = &length) // RefInsteadOfPointerLayer
            {
                var count = (int)(values.Length);
                fixed (int* values_ptr = values) // SpanOrArrayLayer
                {
                    glInstance.VDPAUGetSurfaceivNV(surface, pname, count, length_ptr, values_ptr);
                }
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void VDPAUGetSurfaceivNV(this GL.NVExtension glInstance, IntPtr surface, GLEnum pname, int count, ref int length, ref int values)
        {
            fixed (int* length_ptr = &length) // RefInsteadOfPointerLayer
            fixed (int* values_ptr = &values) // RefInsteadOfPointerLayer
            {
                glInstance.VDPAUGetSurfaceivNV(surface, pname, count, length_ptr, values_ptr);
            }
        }

        // VDPAUMapSurfacesNV overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void VDPAUMapSurfacesNV(this GL.NVExtension glInstance, ReadOnlySpan<IntPtr> surfaces)
        {
            var numSurfaces = (int)(surfaces.Length);
            fixed (IntPtr* surfaces_ptr = surfaces) // SpanOrArrayLayer
            {
                glInstance.VDPAUMapSurfacesNV(numSurfaces, surfaces_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void VDPAUMapSurfacesNV(this GL.NVExtension glInstance, IntPtr[] surfaces)
        {
            var numSurfaces = (int)(surfaces.Length);
            fixed (IntPtr* surfaces_ptr = surfaces) // SpanOrArrayLayer
            {
                glInstance.VDPAUMapSurfacesNV(numSurfaces, surfaces_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void VDPAUMapSurfacesNV(this GL.NVExtension glInstance, int numSurfaces, in IntPtr surfaces)
        {
            fixed (IntPtr* surfaces_ptr = &surfaces) // RefInsteadOfPointerLayer
            {
                glInstance.VDPAUMapSurfacesNV(numSurfaces, surfaces_ptr);
            }
        }

        // VDPAUUnmapSurfacesNV overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void VDPAUUnmapSurfacesNV(this GL.NVExtension glInstance, ReadOnlySpan<IntPtr> surfaces)
        {
            var numSurface = (int)(surfaces.Length);
            fixed (IntPtr* surfaces_ptr = surfaces) // SpanOrArrayLayer
            {
                glInstance.VDPAUUnmapSurfacesNV(numSurface, surfaces_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void VDPAUUnmapSurfacesNV(this GL.NVExtension glInstance, IntPtr[] surfaces)
        {
            var numSurface = (int)(surfaces.Length);
            fixed (IntPtr* surfaces_ptr = surfaces) // SpanOrArrayLayer
            {
                glInstance.VDPAUUnmapSurfacesNV(numSurface, surfaces_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void VDPAUUnmapSurfacesNV(this GL.NVExtension glInstance, int numSurface, in IntPtr surfaces)
        {
            fixed (IntPtr* surfaces_ptr = &surfaces) // RefInsteadOfPointerLayer
            {
                glInstance.VDPAUUnmapSurfacesNV(numSurface, surfaces_ptr);
            }
        }

        // VDPAURegisterVideoSurfaceWithPictureStructureNV overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe IntPtr VDPAURegisterVideoSurfaceWithPictureStructureNV(this GL.NVExtension glInstance, IntPtr vdpSurface, GLEnum target, ReadOnlySpan<uint> textureNames, bool isFrameStructure)
        {
            IntPtr returnValue;
            var numTextureNames = (int)(textureNames.Length);
            fixed (uint* textureNames_ptr = textureNames) // SpanOrArrayLayer
            {
                var vdpSurface_vptr = (void*)vdpSurface;
                var isFrameStructure_byte = (byte)(isFrameStructure ? 1 : 0);
                returnValue = glInstance.VDPAURegisterVideoSurfaceWithPictureStructureNV(vdpSurface_vptr, target, numTextureNames, textureNames_ptr, isFrameStructure_byte);
            }
            return returnValue;
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe IntPtr VDPAURegisterVideoSurfaceWithPictureStructureNV(this GL.NVExtension glInstance, IntPtr vdpSurface, GLEnum target, uint[] textureNames, bool isFrameStructure)
        {
            IntPtr returnValue;
            var numTextureNames = (int)(textureNames.Length);
            fixed (uint* textureNames_ptr = textureNames) // SpanOrArrayLayer
            {
                var vdpSurface_vptr = (void*)vdpSurface;
                var isFrameStructure_byte = (byte)(isFrameStructure ? 1 : 0);
                returnValue = glInstance.VDPAURegisterVideoSurfaceWithPictureStructureNV(vdpSurface_vptr, target, numTextureNames, textureNames_ptr, isFrameStructure_byte);
            }
            return returnValue;
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe IntPtr VDPAURegisterVideoSurfaceWithPictureStructureNV(this GL.NVExtension glInstance, IntPtr vdpSurface, GLEnum target, int numTextureNames, in uint textureNames, bool isFrameStructure)
        {
            IntPtr returnValue;
            fixed (uint* textureNames_ptr = &textureNames) // RefInsteadOfPointerLayer
            {
                var vdpSurface_vptr = (void*)vdpSurface;
                var isFrameStructure_byte = (byte)(isFrameStructure ? 1 : 0);
                returnValue = glInstance.VDPAURegisterVideoSurfaceWithPictureStructureNV(vdpSurface_vptr, target, numTextureNames, textureNames_ptr, isFrameStructure_byte);
            }
            return returnValue;
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe IntPtr VDPAURegisterVideoSurfaceWithPictureStructureNV<T1>(this GL.NVExtension glInstance, in T1 vdpSurface, GLEnum target, ReadOnlySpan<uint> textureNames, bool isFrameStructure)
            where T1 : unmanaged
        {
            IntPtr returnValue;
            fixed (void* vdpSurface_ptr = &vdpSurface) // RefInsteadOfPointerLayer
            {
                var numTextureNames = (int)(textureNames.Length);
                fixed (uint* textureNames_ptr = textureNames) // SpanOrArrayLayer
                {
                    var isFrameStructure_byte = (byte)(isFrameStructure ? 1 : 0);
                    returnValue = glInstance.VDPAURegisterVideoSurfaceWithPictureStructureNV(vdpSurface_ptr, target, numTextureNames, textureNames_ptr, isFrameStructure_byte);
                }
            }
            return returnValue;
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe IntPtr VDPAURegisterVideoSurfaceWithPictureStructureNV<T1>(this GL.NVExtension glInstance, in T1 vdpSurface, GLEnum target, uint[] textureNames, bool isFrameStructure)
            where T1 : unmanaged
        {
            IntPtr returnValue;
            fixed (void* vdpSurface_ptr = &vdpSurface) // RefInsteadOfPointerLayer
            {
                var numTextureNames = (int)(textureNames.Length);
                fixed (uint* textureNames_ptr = textureNames) // SpanOrArrayLayer
                {
                    var isFrameStructure_byte = (byte)(isFrameStructure ? 1 : 0);
                    returnValue = glInstance.VDPAURegisterVideoSurfaceWithPictureStructureNV(vdpSurface_ptr, target, numTextureNames, textureNames_ptr, isFrameStructure_byte);
                }
            }
            return returnValue;
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe IntPtr VDPAURegisterVideoSurfaceWithPictureStructureNV<T1>(this GL.NVExtension glInstance, in T1 vdpSurface, GLEnum target, int numTextureNames, in uint textureNames, bool isFrameStructure)
            where T1 : unmanaged
        {
            IntPtr returnValue;
            fixed (void* vdpSurface_ptr = &vdpSurface) // RefInsteadOfPointerLayer
            fixed (uint* textureNames_ptr = &textureNames) // RefInsteadOfPointerLayer
            {
                var isFrameStructure_byte = (byte)(isFrameStructure ? 1 : 0);
                returnValue = glInstance.VDPAURegisterVideoSurfaceWithPictureStructureNV(vdpSurface_ptr, target, numTextureNames, textureNames_ptr, isFrameStructure_byte);
            }
            return returnValue;
        }

        // VertexArrayRangeNV overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.VoidPtrToIntPtrOverloader
        public static unsafe void VertexArrayRangeNV(this GL.NVExtension glInstance, int length, IntPtr pointer)
        {
            var pointer_vptr = (void*)pointer;
            glInstance.VertexArrayRangeNV(length, pointer_vptr);
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void VertexArrayRangeNV<T1>(this GL.NVExtension glInstance, int length, ReadOnlySpan<T1> pointer)
            where T1 : unmanaged
        {
            fixed (void* pointer_ptr = pointer) // SpanOrArrayLayer
            {
                glInstance.VertexArrayRangeNV(length, pointer_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void VertexArrayRangeNV<T1>(this GL.NVExtension glInstance, int length, T1[] pointer)
            where T1 : unmanaged
        {
            fixed (void* pointer_ptr = pointer) // SpanOrArrayLayer
            {
                glInstance.VertexArrayRangeNV(length, pointer_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void VertexArrayRangeNV<T1>(this GL.NVExtension glInstance, int length, in T1 pointer)
            where T1 : unmanaged
        {
            fixed (void* pointer_ptr = &pointer) // RefInsteadOfPointerLayer
            {
                glInstance.VertexArrayRangeNV(length, pointer_ptr);
            }
        }

        // VertexAttribL1i64vNV overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void VertexAttribL1i64vNV(this GL.NVExtension glInstance, uint index, ReadOnlySpan<long> v)
        {
            fixed (long* v_ptr = v) // SpanOrArrayLayer
            {
                glInstance.VertexAttribL1i64vNV(index, v_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void VertexAttribL1i64vNV(this GL.NVExtension glInstance, uint index, long[] v)
        {
            fixed (long* v_ptr = v) // SpanOrArrayLayer
            {
                glInstance.VertexAttribL1i64vNV(index, v_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void VertexAttribL1i64vNV(this GL.NVExtension glInstance, uint index, in long v)
        {
            fixed (long* v_ptr = &v) // RefInsteadOfPointerLayer
            {
                glInstance.VertexAttribL1i64vNV(index, v_ptr);
            }
        }

        // VertexAttribL2i64vNV overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void VertexAttribL2i64vNV(this GL.NVExtension glInstance, uint index, ReadOnlySpan<long> v)
        {
            fixed (long* v_ptr = v) // SpanOrArrayLayer
            {
                glInstance.VertexAttribL2i64vNV(index, v_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void VertexAttribL2i64vNV(this GL.NVExtension glInstance, uint index, long[] v)
        {
            fixed (long* v_ptr = v) // SpanOrArrayLayer
            {
                glInstance.VertexAttribL2i64vNV(index, v_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void VertexAttribL2i64vNV(this GL.NVExtension glInstance, uint index, in long v)
        {
            fixed (long* v_ptr = &v) // RefInsteadOfPointerLayer
            {
                glInstance.VertexAttribL2i64vNV(index, v_ptr);
            }
        }

        // VertexAttribL3i64vNV overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void VertexAttribL3i64vNV(this GL.NVExtension glInstance, uint index, ReadOnlySpan<long> v)
        {
            fixed (long* v_ptr = v) // SpanOrArrayLayer
            {
                glInstance.VertexAttribL3i64vNV(index, v_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void VertexAttribL3i64vNV(this GL.NVExtension glInstance, uint index, long[] v)
        {
            fixed (long* v_ptr = v) // SpanOrArrayLayer
            {
                glInstance.VertexAttribL3i64vNV(index, v_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void VertexAttribL3i64vNV(this GL.NVExtension glInstance, uint index, in long v)
        {
            fixed (long* v_ptr = &v) // RefInsteadOfPointerLayer
            {
                glInstance.VertexAttribL3i64vNV(index, v_ptr);
            }
        }

        // VertexAttribL4i64vNV overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void VertexAttribL4i64vNV(this GL.NVExtension glInstance, uint index, ReadOnlySpan<long> v)
        {
            fixed (long* v_ptr = v) // SpanOrArrayLayer
            {
                glInstance.VertexAttribL4i64vNV(index, v_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void VertexAttribL4i64vNV(this GL.NVExtension glInstance, uint index, long[] v)
        {
            fixed (long* v_ptr = v) // SpanOrArrayLayer
            {
                glInstance.VertexAttribL4i64vNV(index, v_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void VertexAttribL4i64vNV(this GL.NVExtension glInstance, uint index, in long v)
        {
            fixed (long* v_ptr = &v) // RefInsteadOfPointerLayer
            {
                glInstance.VertexAttribL4i64vNV(index, v_ptr);
            }
        }

        // VertexAttribL1ui64vNV overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void VertexAttribL1ui64vNV(this GL.NVExtension glInstance, uint index, ReadOnlySpan<ulong> v)
        {
            fixed (ulong* v_ptr = v) // SpanOrArrayLayer
            {
                glInstance.VertexAttribL1ui64vNV(index, v_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void VertexAttribL1ui64vNV(this GL.NVExtension glInstance, uint index, ulong[] v)
        {
            fixed (ulong* v_ptr = v) // SpanOrArrayLayer
            {
                glInstance.VertexAttribL1ui64vNV(index, v_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void VertexAttribL1ui64vNV(this GL.NVExtension glInstance, uint index, in ulong v)
        {
            fixed (ulong* v_ptr = &v) // RefInsteadOfPointerLayer
            {
                glInstance.VertexAttribL1ui64vNV(index, v_ptr);
            }
        }

        // VertexAttribL2ui64vNV overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void VertexAttribL2ui64vNV(this GL.NVExtension glInstance, uint index, ReadOnlySpan<ulong> v)
        {
            fixed (ulong* v_ptr = v) // SpanOrArrayLayer
            {
                glInstance.VertexAttribL2ui64vNV(index, v_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void VertexAttribL2ui64vNV(this GL.NVExtension glInstance, uint index, ulong[] v)
        {
            fixed (ulong* v_ptr = v) // SpanOrArrayLayer
            {
                glInstance.VertexAttribL2ui64vNV(index, v_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void VertexAttribL2ui64vNV(this GL.NVExtension glInstance, uint index, in ulong v)
        {
            fixed (ulong* v_ptr = &v) // RefInsteadOfPointerLayer
            {
                glInstance.VertexAttribL2ui64vNV(index, v_ptr);
            }
        }

        // VertexAttribL3ui64vNV overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void VertexAttribL3ui64vNV(this GL.NVExtension glInstance, uint index, ReadOnlySpan<ulong> v)
        {
            fixed (ulong* v_ptr = v) // SpanOrArrayLayer
            {
                glInstance.VertexAttribL3ui64vNV(index, v_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void VertexAttribL3ui64vNV(this GL.NVExtension glInstance, uint index, ulong[] v)
        {
            fixed (ulong* v_ptr = v) // SpanOrArrayLayer
            {
                glInstance.VertexAttribL3ui64vNV(index, v_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void VertexAttribL3ui64vNV(this GL.NVExtension glInstance, uint index, in ulong v)
        {
            fixed (ulong* v_ptr = &v) // RefInsteadOfPointerLayer
            {
                glInstance.VertexAttribL3ui64vNV(index, v_ptr);
            }
        }

        // VertexAttribL4ui64vNV overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void VertexAttribL4ui64vNV(this GL.NVExtension glInstance, uint index, ReadOnlySpan<ulong> v)
        {
            fixed (ulong* v_ptr = v) // SpanOrArrayLayer
            {
                glInstance.VertexAttribL4ui64vNV(index, v_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void VertexAttribL4ui64vNV(this GL.NVExtension glInstance, uint index, ulong[] v)
        {
            fixed (ulong* v_ptr = v) // SpanOrArrayLayer
            {
                glInstance.VertexAttribL4ui64vNV(index, v_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void VertexAttribL4ui64vNV(this GL.NVExtension glInstance, uint index, in ulong v)
        {
            fixed (ulong* v_ptr = &v) // RefInsteadOfPointerLayer
            {
                glInstance.VertexAttribL4ui64vNV(index, v_ptr);
            }
        }

        // GetVertexAttribLi64vNV overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetVertexAttribLi64vNV(this GL.NVExtension glInstance, uint index, VertexAttribEnum pname, Span<long> parameters)
        {
            fixed (long* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.GetVertexAttribLi64vNV(index, pname, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetVertexAttribLi64vNV(this GL.NVExtension glInstance, uint index, VertexAttribEnum pname, long[] parameters)
        {
            fixed (long* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.GetVertexAttribLi64vNV(index, pname, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void GetVertexAttribLi64vNV(this GL.NVExtension glInstance, uint index, VertexAttribEnum pname, ref long parameters)
        {
            fixed (long* parameters_ptr = &parameters) // RefInsteadOfPointerLayer
            {
                glInstance.GetVertexAttribLi64vNV(index, pname, parameters_ptr);
            }
        }

        // GetVertexAttribLui64vNV overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetVertexAttribLui64vNV(this GL.NVExtension glInstance, uint index, VertexAttribEnum pname, Span<ulong> parameters)
        {
            fixed (ulong* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.GetVertexAttribLui64vNV(index, pname, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetVertexAttribLui64vNV(this GL.NVExtension glInstance, uint index, VertexAttribEnum pname, ulong[] parameters)
        {
            fixed (ulong* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.GetVertexAttribLui64vNV(index, pname, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void GetVertexAttribLui64vNV(this GL.NVExtension glInstance, uint index, VertexAttribEnum pname, ref ulong parameters)
        {
            fixed (ulong* parameters_ptr = &parameters) // RefInsteadOfPointerLayer
            {
                glInstance.GetVertexAttribLui64vNV(index, pname, parameters_ptr);
            }
        }

        // VertexAttribFormatNV overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.BoolOverloader
        public static unsafe void VertexAttribFormatNV(this GL.NVExtension glInstance, uint index, int size, VertexAttribType type, bool normalized, int stride)
        {
            var normalized_byte = (byte)(normalized ? 1 : 0);
            glInstance.VertexAttribFormatNV(index, size, type, normalized_byte, stride);
        }

        // GetIntegerui64i_vNV overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetIntegerui64i_vNV(this GL.NVExtension glInstance, GLEnum value, uint index, Span<ulong> result)
        {
            fixed (ulong* result_ptr = result) // SpanOrArrayLayer
            {
                glInstance.GetIntegerui64i_vNV(value, index, result_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetIntegerui64i_vNV(this GL.NVExtension glInstance, GLEnum value, uint index, ulong[] result)
        {
            fixed (ulong* result_ptr = result) // SpanOrArrayLayer
            {
                glInstance.GetIntegerui64i_vNV(value, index, result_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void GetIntegerui64i_vNV(this GL.NVExtension glInstance, GLEnum value, uint index, ref ulong result)
        {
            fixed (ulong* result_ptr = &result) // RefInsteadOfPointerLayer
            {
                glInstance.GetIntegerui64i_vNV(value, index, result_ptr);
            }
        }

        // AreProgramsResidentNV overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe byte AreProgramsResidentNV(this GL.NVExtension glInstance, int n, ReadOnlySpan<ProgramHandle> programs, Span<byte> residences)
        {
            byte returnValue;
            fixed (ProgramHandle* programs_ptr = programs) // SpanOrArrayLayer
            {
                fixed (byte* residences_ptr = residences) // SpanOrArrayLayer
                {
                    returnValue = glInstance.AreProgramsResidentNV(n, programs_ptr, residences_ptr);
                }
            }
            return returnValue;
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe byte AreProgramsResidentNV(this GL.NVExtension glInstance, int n, ProgramHandle[] programs, byte[] residences)
        {
            byte returnValue;
            fixed (ProgramHandle* programs_ptr = programs) // SpanOrArrayLayer
            {
                fixed (byte* residences_ptr = residences) // SpanOrArrayLayer
                {
                    returnValue = glInstance.AreProgramsResidentNV(n, programs_ptr, residences_ptr);
                }
            }
            return returnValue;
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe byte AreProgramsResidentNV(this GL.NVExtension glInstance, int n, in ProgramHandle programs, ref byte residences)
        {
            byte returnValue;
            fixed (ProgramHandle* programs_ptr = &programs) // RefInsteadOfPointerLayer
            fixed (byte* residences_ptr = &residences) // RefInsteadOfPointerLayer
            {
                returnValue = glInstance.AreProgramsResidentNV(n, programs_ptr, residences_ptr);
            }
            return returnValue;
        }

        // DeleteProgramsNV overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void DeleteProgramsNV(this GL.NVExtension glInstance, ReadOnlySpan<ProgramHandle> programs)
        {
            var n = (int)(programs.Length);
            fixed (ProgramHandle* programs_ptr = programs) // SpanOrArrayLayer
            {
                glInstance.DeleteProgramsNV(n, programs_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void DeleteProgramsNV(this GL.NVExtension glInstance, ProgramHandle[] programs)
        {
            var n = (int)(programs.Length);
            fixed (ProgramHandle* programs_ptr = programs) // SpanOrArrayLayer
            {
                glInstance.DeleteProgramsNV(n, programs_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void DeleteProgramsNV(this GL.NVExtension glInstance, int n, in ProgramHandle programs)
        {
            fixed (ProgramHandle* programs_ptr = &programs) // RefInsteadOfPointerLayer
            {
                glInstance.DeleteProgramsNV(n, programs_ptr);
            }
        }

        // ExecuteProgramNV overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void ExecuteProgramNV(this GL.NVExtension glInstance, VertexAttribEnumNV target, uint id, ReadOnlySpan<float> parameters)
        {
            fixed (float* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.ExecuteProgramNV(target, id, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void ExecuteProgramNV(this GL.NVExtension glInstance, VertexAttribEnumNV target, uint id, float[] parameters)
        {
            fixed (float* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.ExecuteProgramNV(target, id, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void ExecuteProgramNV(this GL.NVExtension glInstance, VertexAttribEnumNV target, uint id, in float parameters)
        {
            fixed (float* parameters_ptr = &parameters) // RefInsteadOfPointerLayer
            {
                glInstance.ExecuteProgramNV(target, id, parameters_ptr);
            }
        }

        // GenProgramsNV overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GenProgramsNV(this GL.NVExtension glInstance, Span<ProgramHandle> programs)
        {
            var n = (int)(programs.Length);
            fixed (ProgramHandle* programs_ptr = programs) // SpanOrArrayLayer
            {
                glInstance.GenProgramsNV(n, programs_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GenProgramsNV(this GL.NVExtension glInstance, ProgramHandle[] programs)
        {
            var n = (int)(programs.Length);
            fixed (ProgramHandle* programs_ptr = programs) // SpanOrArrayLayer
            {
                glInstance.GenProgramsNV(n, programs_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void GenProgramsNV(this GL.NVExtension glInstance, int n, ref ProgramHandle programs)
        {
            fixed (ProgramHandle* programs_ptr = &programs) // RefInsteadOfPointerLayer
            {
                glInstance.GenProgramsNV(n, programs_ptr);
            }
        }

        // GetProgramParameterdvNV overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetProgramParameterdvNV(this GL.NVExtension glInstance, VertexAttribEnumNV target, uint index, VertexAttribEnumNV pname, Span<double> parameters)
        {
            fixed (double* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.GetProgramParameterdvNV(target, index, pname, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetProgramParameterdvNV(this GL.NVExtension glInstance, VertexAttribEnumNV target, uint index, VertexAttribEnumNV pname, double[] parameters)
        {
            fixed (double* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.GetProgramParameterdvNV(target, index, pname, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void GetProgramParameterdvNV(this GL.NVExtension glInstance, VertexAttribEnumNV target, uint index, VertexAttribEnumNV pname, ref double parameters)
        {
            fixed (double* parameters_ptr = &parameters) // RefInsteadOfPointerLayer
            {
                glInstance.GetProgramParameterdvNV(target, index, pname, parameters_ptr);
            }
        }

        // GetProgramParameterfvNV overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetProgramParameterfvNV(this GL.NVExtension glInstance, VertexAttribEnumNV target, uint index, VertexAttribEnumNV pname, Span<float> parameters)
        {
            fixed (float* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.GetProgramParameterfvNV(target, index, pname, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetProgramParameterfvNV(this GL.NVExtension glInstance, VertexAttribEnumNV target, uint index, VertexAttribEnumNV pname, float[] parameters)
        {
            fixed (float* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.GetProgramParameterfvNV(target, index, pname, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void GetProgramParameterfvNV(this GL.NVExtension glInstance, VertexAttribEnumNV target, uint index, VertexAttribEnumNV pname, ref float parameters)
        {
            fixed (float* parameters_ptr = &parameters) // RefInsteadOfPointerLayer
            {
                glInstance.GetProgramParameterfvNV(target, index, pname, parameters_ptr);
            }
        }

        // GetProgramivNV overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetProgramivNV(this GL.NVExtension glInstance, ProgramHandle id, VertexAttribEnumNV pname, Span<int> parameters)
        {
            fixed (int* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.GetProgramivNV(id, pname, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetProgramivNV(this GL.NVExtension glInstance, ProgramHandle id, VertexAttribEnumNV pname, int[] parameters)
        {
            fixed (int* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.GetProgramivNV(id, pname, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void GetProgramivNV(this GL.NVExtension glInstance, ProgramHandle id, VertexAttribEnumNV pname, ref int parameters)
        {
            fixed (int* parameters_ptr = &parameters) // RefInsteadOfPointerLayer
            {
                glInstance.GetProgramivNV(id, pname, parameters_ptr);
            }
        }

        // GetProgramStringNV overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetProgramStringNV(this GL.NVExtension glInstance, ProgramHandle id, VertexAttribEnumNV pname, Span<byte> program)
        {
            fixed (byte* program_ptr = program) // SpanOrArrayLayer
            {
                glInstance.GetProgramStringNV(id, pname, program_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetProgramStringNV(this GL.NVExtension glInstance, ProgramHandle id, VertexAttribEnumNV pname, byte[] program)
        {
            fixed (byte* program_ptr = program) // SpanOrArrayLayer
            {
                glInstance.GetProgramStringNV(id, pname, program_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void GetProgramStringNV(this GL.NVExtension glInstance, ProgramHandle id, VertexAttribEnumNV pname, ref byte program)
        {
            fixed (byte* program_ptr = &program) // RefInsteadOfPointerLayer
            {
                glInstance.GetProgramStringNV(id, pname, program_ptr);
            }
        }

        // GetTrackMatrixivNV overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetTrackMatrixivNV(this GL.NVExtension glInstance, VertexAttribEnumNV target, uint address, VertexAttribEnumNV pname, Span<int> parameters)
        {
            fixed (int* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.GetTrackMatrixivNV(target, address, pname, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetTrackMatrixivNV(this GL.NVExtension glInstance, VertexAttribEnumNV target, uint address, VertexAttribEnumNV pname, int[] parameters)
        {
            fixed (int* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.GetTrackMatrixivNV(target, address, pname, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void GetTrackMatrixivNV(this GL.NVExtension glInstance, VertexAttribEnumNV target, uint address, VertexAttribEnumNV pname, ref int parameters)
        {
            fixed (int* parameters_ptr = &parameters) // RefInsteadOfPointerLayer
            {
                glInstance.GetTrackMatrixivNV(target, address, pname, parameters_ptr);
            }
        }

        // GetVertexAttribdvNV overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetVertexAttribdvNV(this GL.NVExtension glInstance, uint index, VertexAttribEnumNV pname, Span<double> parameters)
        {
            fixed (double* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.GetVertexAttribdvNV(index, pname, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetVertexAttribdvNV(this GL.NVExtension glInstance, uint index, VertexAttribEnumNV pname, double[] parameters)
        {
            fixed (double* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.GetVertexAttribdvNV(index, pname, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void GetVertexAttribdvNV(this GL.NVExtension glInstance, uint index, VertexAttribEnumNV pname, ref double parameters)
        {
            fixed (double* parameters_ptr = &parameters) // RefInsteadOfPointerLayer
            {
                glInstance.GetVertexAttribdvNV(index, pname, parameters_ptr);
            }
        }

        // GetVertexAttribfvNV overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetVertexAttribfvNV(this GL.NVExtension glInstance, uint index, VertexAttribEnumNV pname, Span<float> parameters)
        {
            fixed (float* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.GetVertexAttribfvNV(index, pname, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetVertexAttribfvNV(this GL.NVExtension glInstance, uint index, VertexAttribEnumNV pname, float[] parameters)
        {
            fixed (float* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.GetVertexAttribfvNV(index, pname, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void GetVertexAttribfvNV(this GL.NVExtension glInstance, uint index, VertexAttribEnumNV pname, ref float parameters)
        {
            fixed (float* parameters_ptr = &parameters) // RefInsteadOfPointerLayer
            {
                glInstance.GetVertexAttribfvNV(index, pname, parameters_ptr);
            }
        }

        // GetVertexAttribivNV overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetVertexAttribivNV(this GL.NVExtension glInstance, uint index, VertexAttribEnumNV pname, Span<int> parameters)
        {
            fixed (int* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.GetVertexAttribivNV(index, pname, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetVertexAttribivNV(this GL.NVExtension glInstance, uint index, VertexAttribEnumNV pname, int[] parameters)
        {
            fixed (int* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.GetVertexAttribivNV(index, pname, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void GetVertexAttribivNV(this GL.NVExtension glInstance, uint index, VertexAttribEnumNV pname, ref int parameters)
        {
            fixed (int* parameters_ptr = &parameters) // RefInsteadOfPointerLayer
            {
                glInstance.GetVertexAttribivNV(index, pname, parameters_ptr);
            }
        }

        // LoadProgramNV overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void LoadProgramNV(this GL.NVExtension glInstance, VertexAttribEnumNV target, uint id, ReadOnlySpan<byte> program)
        {
            var len = (int)(program.Length);
            fixed (byte* program_ptr = program) // SpanOrArrayLayer
            {
                glInstance.LoadProgramNV(target, id, len, program_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void LoadProgramNV(this GL.NVExtension glInstance, VertexAttribEnumNV target, uint id, byte[] program)
        {
            var len = (int)(program.Length);
            fixed (byte* program_ptr = program) // SpanOrArrayLayer
            {
                glInstance.LoadProgramNV(target, id, len, program_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void LoadProgramNV(this GL.NVExtension glInstance, VertexAttribEnumNV target, uint id, int len, in byte program)
        {
            fixed (byte* program_ptr = &program) // RefInsteadOfPointerLayer
            {
                glInstance.LoadProgramNV(target, id, len, program_ptr);
            }
        }

        // ProgramParameter4dvNV overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void ProgramParameter4dvNV(this GL.NVExtension glInstance, VertexAttribEnumNV target, uint index, ReadOnlySpan<double> v)
        {
            fixed (double* v_ptr = v) // SpanOrArrayLayer
            {
                glInstance.ProgramParameter4dvNV(target, index, v_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void ProgramParameter4dvNV(this GL.NVExtension glInstance, VertexAttribEnumNV target, uint index, double[] v)
        {
            fixed (double* v_ptr = v) // SpanOrArrayLayer
            {
                glInstance.ProgramParameter4dvNV(target, index, v_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void ProgramParameter4dvNV(this GL.NVExtension glInstance, VertexAttribEnumNV target, uint index, in double v)
        {
            fixed (double* v_ptr = &v) // RefInsteadOfPointerLayer
            {
                glInstance.ProgramParameter4dvNV(target, index, v_ptr);
            }
        }

        // ProgramParameter4fvNV overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void ProgramParameter4fvNV(this GL.NVExtension glInstance, VertexAttribEnumNV target, uint index, ReadOnlySpan<float> v)
        {
            fixed (float* v_ptr = v) // SpanOrArrayLayer
            {
                glInstance.ProgramParameter4fvNV(target, index, v_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void ProgramParameter4fvNV(this GL.NVExtension glInstance, VertexAttribEnumNV target, uint index, float[] v)
        {
            fixed (float* v_ptr = v) // SpanOrArrayLayer
            {
                glInstance.ProgramParameter4fvNV(target, index, v_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void ProgramParameter4fvNV(this GL.NVExtension glInstance, VertexAttribEnumNV target, uint index, in float v)
        {
            fixed (float* v_ptr = &v) // RefInsteadOfPointerLayer
            {
                glInstance.ProgramParameter4fvNV(target, index, v_ptr);
            }
        }

        // ProgramParameters4dvNV overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void ProgramParameters4dvNV(this GL.NVExtension glInstance, VertexAttribEnumNV target, uint index, ReadOnlySpan<double> v)
        {
            var count = (int)(v.Length / 4);
            fixed (double* v_ptr = v) // SpanOrArrayLayer
            {
                glInstance.ProgramParameters4dvNV(target, index, count, v_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void ProgramParameters4dvNV(this GL.NVExtension glInstance, VertexAttribEnumNV target, uint index, double[] v)
        {
            var count = (int)(v.Length / 4);
            fixed (double* v_ptr = v) // SpanOrArrayLayer
            {
                glInstance.ProgramParameters4dvNV(target, index, count, v_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void ProgramParameters4dvNV(this GL.NVExtension glInstance, VertexAttribEnumNV target, uint index, int count, in double v)
        {
            fixed (double* v_ptr = &v) // RefInsteadOfPointerLayer
            {
                glInstance.ProgramParameters4dvNV(target, index, count, v_ptr);
            }
        }

        // ProgramParameters4fvNV overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void ProgramParameters4fvNV(this GL.NVExtension glInstance, VertexAttribEnumNV target, uint index, ReadOnlySpan<float> v)
        {
            var count = (int)(v.Length / 4);
            fixed (float* v_ptr = v) // SpanOrArrayLayer
            {
                glInstance.ProgramParameters4fvNV(target, index, count, v_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void ProgramParameters4fvNV(this GL.NVExtension glInstance, VertexAttribEnumNV target, uint index, float[] v)
        {
            var count = (int)(v.Length / 4);
            fixed (float* v_ptr = v) // SpanOrArrayLayer
            {
                glInstance.ProgramParameters4fvNV(target, index, count, v_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void ProgramParameters4fvNV(this GL.NVExtension glInstance, VertexAttribEnumNV target, uint index, int count, in float v)
        {
            fixed (float* v_ptr = &v) // RefInsteadOfPointerLayer
            {
                glInstance.ProgramParameters4fvNV(target, index, count, v_ptr);
            }
        }

        // RequestResidentProgramsNV overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void RequestResidentProgramsNV(this GL.NVExtension glInstance, ReadOnlySpan<ProgramHandle> programs)
        {
            var n = (int)(programs.Length);
            fixed (ProgramHandle* programs_ptr = programs) // SpanOrArrayLayer
            {
                glInstance.RequestResidentProgramsNV(n, programs_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void RequestResidentProgramsNV(this GL.NVExtension glInstance, ProgramHandle[] programs)
        {
            var n = (int)(programs.Length);
            fixed (ProgramHandle* programs_ptr = programs) // SpanOrArrayLayer
            {
                glInstance.RequestResidentProgramsNV(n, programs_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void RequestResidentProgramsNV(this GL.NVExtension glInstance, int n, in ProgramHandle programs)
        {
            fixed (ProgramHandle* programs_ptr = &programs) // RefInsteadOfPointerLayer
            {
                glInstance.RequestResidentProgramsNV(n, programs_ptr);
            }
        }

        // VertexAttribPointerNV overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.VoidPtrToIntPtrOverloader
        public static unsafe void VertexAttribPointerNV(this GL.NVExtension glInstance, uint index, int fsize, VertexAttribEnumNV type, int stride, IntPtr pointer)
        {
            var pointer_vptr = (void*)pointer;
            glInstance.VertexAttribPointerNV(index, fsize, type, stride, pointer_vptr);
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void VertexAttribPointerNV<T1>(this GL.NVExtension glInstance, uint index, int fsize, VertexAttribEnumNV type, int stride, ReadOnlySpan<T1> pointer)
            where T1 : unmanaged
        {
            fixed (void* pointer_ptr = pointer) // SpanOrArrayLayer
            {
                glInstance.VertexAttribPointerNV(index, fsize, type, stride, pointer_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void VertexAttribPointerNV<T1>(this GL.NVExtension glInstance, uint index, int fsize, VertexAttribEnumNV type, int stride, T1[] pointer)
            where T1 : unmanaged
        {
            fixed (void* pointer_ptr = pointer) // SpanOrArrayLayer
            {
                glInstance.VertexAttribPointerNV(index, fsize, type, stride, pointer_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void VertexAttribPointerNV<T1>(this GL.NVExtension glInstance, uint index, int fsize, VertexAttribEnumNV type, int stride, in T1 pointer)
            where T1 : unmanaged
        {
            fixed (void* pointer_ptr = &pointer) // RefInsteadOfPointerLayer
            {
                glInstance.VertexAttribPointerNV(index, fsize, type, stride, pointer_ptr);
            }
        }

        // VertexAttrib1dvNV overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void VertexAttrib1dvNV(this GL.NVExtension glInstance, uint index, ReadOnlySpan<double> v)
        {
            fixed (double* v_ptr = v) // SpanOrArrayLayer
            {
                glInstance.VertexAttrib1dvNV(index, v_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void VertexAttrib1dvNV(this GL.NVExtension glInstance, uint index, double[] v)
        {
            fixed (double* v_ptr = v) // SpanOrArrayLayer
            {
                glInstance.VertexAttrib1dvNV(index, v_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void VertexAttrib1dvNV(this GL.NVExtension glInstance, uint index, in double v)
        {
            fixed (double* v_ptr = &v) // RefInsteadOfPointerLayer
            {
                glInstance.VertexAttrib1dvNV(index, v_ptr);
            }
        }

        // VertexAttrib1fvNV overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void VertexAttrib1fvNV(this GL.NVExtension glInstance, uint index, ReadOnlySpan<float> v)
        {
            fixed (float* v_ptr = v) // SpanOrArrayLayer
            {
                glInstance.VertexAttrib1fvNV(index, v_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void VertexAttrib1fvNV(this GL.NVExtension glInstance, uint index, float[] v)
        {
            fixed (float* v_ptr = v) // SpanOrArrayLayer
            {
                glInstance.VertexAttrib1fvNV(index, v_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void VertexAttrib1fvNV(this GL.NVExtension glInstance, uint index, in float v)
        {
            fixed (float* v_ptr = &v) // RefInsteadOfPointerLayer
            {
                glInstance.VertexAttrib1fvNV(index, v_ptr);
            }
        }

        // VertexAttrib1svNV overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void VertexAttrib1svNV(this GL.NVExtension glInstance, uint index, ReadOnlySpan<short> v)
        {
            fixed (short* v_ptr = v) // SpanOrArrayLayer
            {
                glInstance.VertexAttrib1svNV(index, v_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void VertexAttrib1svNV(this GL.NVExtension glInstance, uint index, short[] v)
        {
            fixed (short* v_ptr = v) // SpanOrArrayLayer
            {
                glInstance.VertexAttrib1svNV(index, v_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void VertexAttrib1svNV(this GL.NVExtension glInstance, uint index, in short v)
        {
            fixed (short* v_ptr = &v) // RefInsteadOfPointerLayer
            {
                glInstance.VertexAttrib1svNV(index, v_ptr);
            }
        }

        // VertexAttrib2dvNV overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void VertexAttrib2dvNV(this GL.NVExtension glInstance, uint index, ReadOnlySpan<double> v)
        {
            fixed (double* v_ptr = v) // SpanOrArrayLayer
            {
                glInstance.VertexAttrib2dvNV(index, v_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void VertexAttrib2dvNV(this GL.NVExtension glInstance, uint index, double[] v)
        {
            fixed (double* v_ptr = v) // SpanOrArrayLayer
            {
                glInstance.VertexAttrib2dvNV(index, v_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void VertexAttrib2dvNV(this GL.NVExtension glInstance, uint index, in double v)
        {
            fixed (double* v_ptr = &v) // RefInsteadOfPointerLayer
            {
                glInstance.VertexAttrib2dvNV(index, v_ptr);
            }
        }

        // VertexAttrib2fvNV overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void VertexAttrib2fvNV(this GL.NVExtension glInstance, uint index, ReadOnlySpan<float> v)
        {
            fixed (float* v_ptr = v) // SpanOrArrayLayer
            {
                glInstance.VertexAttrib2fvNV(index, v_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void VertexAttrib2fvNV(this GL.NVExtension glInstance, uint index, float[] v)
        {
            fixed (float* v_ptr = v) // SpanOrArrayLayer
            {
                glInstance.VertexAttrib2fvNV(index, v_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void VertexAttrib2fvNV(this GL.NVExtension glInstance, uint index, in float v)
        {
            fixed (float* v_ptr = &v) // RefInsteadOfPointerLayer
            {
                glInstance.VertexAttrib2fvNV(index, v_ptr);
            }
        }

        // VertexAttrib2svNV overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void VertexAttrib2svNV(this GL.NVExtension glInstance, uint index, ReadOnlySpan<short> v)
        {
            fixed (short* v_ptr = v) // SpanOrArrayLayer
            {
                glInstance.VertexAttrib2svNV(index, v_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void VertexAttrib2svNV(this GL.NVExtension glInstance, uint index, short[] v)
        {
            fixed (short* v_ptr = v) // SpanOrArrayLayer
            {
                glInstance.VertexAttrib2svNV(index, v_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void VertexAttrib2svNV(this GL.NVExtension glInstance, uint index, in short v)
        {
            fixed (short* v_ptr = &v) // RefInsteadOfPointerLayer
            {
                glInstance.VertexAttrib2svNV(index, v_ptr);
            }
        }

        // VertexAttrib3dvNV overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void VertexAttrib3dvNV(this GL.NVExtension glInstance, uint index, ReadOnlySpan<double> v)
        {
            fixed (double* v_ptr = v) // SpanOrArrayLayer
            {
                glInstance.VertexAttrib3dvNV(index, v_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void VertexAttrib3dvNV(this GL.NVExtension glInstance, uint index, double[] v)
        {
            fixed (double* v_ptr = v) // SpanOrArrayLayer
            {
                glInstance.VertexAttrib3dvNV(index, v_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void VertexAttrib3dvNV(this GL.NVExtension glInstance, uint index, in double v)
        {
            fixed (double* v_ptr = &v) // RefInsteadOfPointerLayer
            {
                glInstance.VertexAttrib3dvNV(index, v_ptr);
            }
        }

        // VertexAttrib3fvNV overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void VertexAttrib3fvNV(this GL.NVExtension glInstance, uint index, ReadOnlySpan<float> v)
        {
            fixed (float* v_ptr = v) // SpanOrArrayLayer
            {
                glInstance.VertexAttrib3fvNV(index, v_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void VertexAttrib3fvNV(this GL.NVExtension glInstance, uint index, float[] v)
        {
            fixed (float* v_ptr = v) // SpanOrArrayLayer
            {
                glInstance.VertexAttrib3fvNV(index, v_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void VertexAttrib3fvNV(this GL.NVExtension glInstance, uint index, in float v)
        {
            fixed (float* v_ptr = &v) // RefInsteadOfPointerLayer
            {
                glInstance.VertexAttrib3fvNV(index, v_ptr);
            }
        }

        // VertexAttrib3svNV overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void VertexAttrib3svNV(this GL.NVExtension glInstance, uint index, ReadOnlySpan<short> v)
        {
            fixed (short* v_ptr = v) // SpanOrArrayLayer
            {
                glInstance.VertexAttrib3svNV(index, v_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void VertexAttrib3svNV(this GL.NVExtension glInstance, uint index, short[] v)
        {
            fixed (short* v_ptr = v) // SpanOrArrayLayer
            {
                glInstance.VertexAttrib3svNV(index, v_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void VertexAttrib3svNV(this GL.NVExtension glInstance, uint index, in short v)
        {
            fixed (short* v_ptr = &v) // RefInsteadOfPointerLayer
            {
                glInstance.VertexAttrib3svNV(index, v_ptr);
            }
        }

        // VertexAttrib4dvNV overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void VertexAttrib4dvNV(this GL.NVExtension glInstance, uint index, ReadOnlySpan<double> v)
        {
            fixed (double* v_ptr = v) // SpanOrArrayLayer
            {
                glInstance.VertexAttrib4dvNV(index, v_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void VertexAttrib4dvNV(this GL.NVExtension glInstance, uint index, double[] v)
        {
            fixed (double* v_ptr = v) // SpanOrArrayLayer
            {
                glInstance.VertexAttrib4dvNV(index, v_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void VertexAttrib4dvNV(this GL.NVExtension glInstance, uint index, in double v)
        {
            fixed (double* v_ptr = &v) // RefInsteadOfPointerLayer
            {
                glInstance.VertexAttrib4dvNV(index, v_ptr);
            }
        }

        // VertexAttrib4fvNV overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void VertexAttrib4fvNV(this GL.NVExtension glInstance, uint index, ReadOnlySpan<float> v)
        {
            fixed (float* v_ptr = v) // SpanOrArrayLayer
            {
                glInstance.VertexAttrib4fvNV(index, v_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void VertexAttrib4fvNV(this GL.NVExtension glInstance, uint index, float[] v)
        {
            fixed (float* v_ptr = v) // SpanOrArrayLayer
            {
                glInstance.VertexAttrib4fvNV(index, v_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void VertexAttrib4fvNV(this GL.NVExtension glInstance, uint index, in float v)
        {
            fixed (float* v_ptr = &v) // RefInsteadOfPointerLayer
            {
                glInstance.VertexAttrib4fvNV(index, v_ptr);
            }
        }

        // VertexAttrib4svNV overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void VertexAttrib4svNV(this GL.NVExtension glInstance, uint index, ReadOnlySpan<short> v)
        {
            fixed (short* v_ptr = v) // SpanOrArrayLayer
            {
                glInstance.VertexAttrib4svNV(index, v_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void VertexAttrib4svNV(this GL.NVExtension glInstance, uint index, short[] v)
        {
            fixed (short* v_ptr = v) // SpanOrArrayLayer
            {
                glInstance.VertexAttrib4svNV(index, v_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void VertexAttrib4svNV(this GL.NVExtension glInstance, uint index, in short v)
        {
            fixed (short* v_ptr = &v) // RefInsteadOfPointerLayer
            {
                glInstance.VertexAttrib4svNV(index, v_ptr);
            }
        }

        // VertexAttrib4ubvNV overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void VertexAttrib4ubvNV(this GL.NVExtension glInstance, uint index, ReadOnlySpan<byte> v)
        {
            fixed (byte* v_ptr = v) // SpanOrArrayLayer
            {
                glInstance.VertexAttrib4ubvNV(index, v_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void VertexAttrib4ubvNV(this GL.NVExtension glInstance, uint index, byte[] v)
        {
            fixed (byte* v_ptr = v) // SpanOrArrayLayer
            {
                glInstance.VertexAttrib4ubvNV(index, v_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void VertexAttrib4ubvNV(this GL.NVExtension glInstance, uint index, in byte v)
        {
            fixed (byte* v_ptr = &v) // RefInsteadOfPointerLayer
            {
                glInstance.VertexAttrib4ubvNV(index, v_ptr);
            }
        }

        // VertexAttribs1dvNV overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void VertexAttribs1dvNV(this GL.NVExtension glInstance, uint index, ReadOnlySpan<double> v)
        {
            var count = (int)(v.Length);
            fixed (double* v_ptr = v) // SpanOrArrayLayer
            {
                glInstance.VertexAttribs1dvNV(index, count, v_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void VertexAttribs1dvNV(this GL.NVExtension glInstance, uint index, double[] v)
        {
            var count = (int)(v.Length);
            fixed (double* v_ptr = v) // SpanOrArrayLayer
            {
                glInstance.VertexAttribs1dvNV(index, count, v_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void VertexAttribs1dvNV(this GL.NVExtension glInstance, uint index, int count, in double v)
        {
            fixed (double* v_ptr = &v) // RefInsteadOfPointerLayer
            {
                glInstance.VertexAttribs1dvNV(index, count, v_ptr);
            }
        }

        // VertexAttribs1fvNV overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void VertexAttribs1fvNV(this GL.NVExtension glInstance, uint index, ReadOnlySpan<float> v)
        {
            var count = (int)(v.Length);
            fixed (float* v_ptr = v) // SpanOrArrayLayer
            {
                glInstance.VertexAttribs1fvNV(index, count, v_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void VertexAttribs1fvNV(this GL.NVExtension glInstance, uint index, float[] v)
        {
            var count = (int)(v.Length);
            fixed (float* v_ptr = v) // SpanOrArrayLayer
            {
                glInstance.VertexAttribs1fvNV(index, count, v_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void VertexAttribs1fvNV(this GL.NVExtension glInstance, uint index, int count, in float v)
        {
            fixed (float* v_ptr = &v) // RefInsteadOfPointerLayer
            {
                glInstance.VertexAttribs1fvNV(index, count, v_ptr);
            }
        }

        // VertexAttribs1svNV overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void VertexAttribs1svNV(this GL.NVExtension glInstance, uint index, ReadOnlySpan<short> v)
        {
            var count = (int)(v.Length);
            fixed (short* v_ptr = v) // SpanOrArrayLayer
            {
                glInstance.VertexAttribs1svNV(index, count, v_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void VertexAttribs1svNV(this GL.NVExtension glInstance, uint index, short[] v)
        {
            var count = (int)(v.Length);
            fixed (short* v_ptr = v) // SpanOrArrayLayer
            {
                glInstance.VertexAttribs1svNV(index, count, v_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void VertexAttribs1svNV(this GL.NVExtension glInstance, uint index, int count, in short v)
        {
            fixed (short* v_ptr = &v) // RefInsteadOfPointerLayer
            {
                glInstance.VertexAttribs1svNV(index, count, v_ptr);
            }
        }

        // VertexAttribs2dvNV overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void VertexAttribs2dvNV(this GL.NVExtension glInstance, uint index, ReadOnlySpan<double> v)
        {
            var count = (int)(v.Length / 2);
            fixed (double* v_ptr = v) // SpanOrArrayLayer
            {
                glInstance.VertexAttribs2dvNV(index, count, v_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void VertexAttribs2dvNV(this GL.NVExtension glInstance, uint index, double[] v)
        {
            var count = (int)(v.Length / 2);
            fixed (double* v_ptr = v) // SpanOrArrayLayer
            {
                glInstance.VertexAttribs2dvNV(index, count, v_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void VertexAttribs2dvNV(this GL.NVExtension glInstance, uint index, int count, in double v)
        {
            fixed (double* v_ptr = &v) // RefInsteadOfPointerLayer
            {
                glInstance.VertexAttribs2dvNV(index, count, v_ptr);
            }
        }

        // VertexAttribs2fvNV overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void VertexAttribs2fvNV(this GL.NVExtension glInstance, uint index, ReadOnlySpan<float> v)
        {
            var count = (int)(v.Length / 2);
            fixed (float* v_ptr = v) // SpanOrArrayLayer
            {
                glInstance.VertexAttribs2fvNV(index, count, v_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void VertexAttribs2fvNV(this GL.NVExtension glInstance, uint index, float[] v)
        {
            var count = (int)(v.Length / 2);
            fixed (float* v_ptr = v) // SpanOrArrayLayer
            {
                glInstance.VertexAttribs2fvNV(index, count, v_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void VertexAttribs2fvNV(this GL.NVExtension glInstance, uint index, int count, in float v)
        {
            fixed (float* v_ptr = &v) // RefInsteadOfPointerLayer
            {
                glInstance.VertexAttribs2fvNV(index, count, v_ptr);
            }
        }

        // VertexAttribs2svNV overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void VertexAttribs2svNV(this GL.NVExtension glInstance, uint index, ReadOnlySpan<short> v)
        {
            var count = (int)(v.Length / 2);
            fixed (short* v_ptr = v) // SpanOrArrayLayer
            {
                glInstance.VertexAttribs2svNV(index, count, v_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void VertexAttribs2svNV(this GL.NVExtension glInstance, uint index, short[] v)
        {
            var count = (int)(v.Length / 2);
            fixed (short* v_ptr = v) // SpanOrArrayLayer
            {
                glInstance.VertexAttribs2svNV(index, count, v_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void VertexAttribs2svNV(this GL.NVExtension glInstance, uint index, int count, in short v)
        {
            fixed (short* v_ptr = &v) // RefInsteadOfPointerLayer
            {
                glInstance.VertexAttribs2svNV(index, count, v_ptr);
            }
        }

        // VertexAttribs3dvNV overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void VertexAttribs3dvNV(this GL.NVExtension glInstance, uint index, ReadOnlySpan<double> v)
        {
            var count = (int)(v.Length / 3);
            fixed (double* v_ptr = v) // SpanOrArrayLayer
            {
                glInstance.VertexAttribs3dvNV(index, count, v_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void VertexAttribs3dvNV(this GL.NVExtension glInstance, uint index, double[] v)
        {
            var count = (int)(v.Length / 3);
            fixed (double* v_ptr = v) // SpanOrArrayLayer
            {
                glInstance.VertexAttribs3dvNV(index, count, v_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void VertexAttribs3dvNV(this GL.NVExtension glInstance, uint index, int count, in double v)
        {
            fixed (double* v_ptr = &v) // RefInsteadOfPointerLayer
            {
                glInstance.VertexAttribs3dvNV(index, count, v_ptr);
            }
        }

        // VertexAttribs3fvNV overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void VertexAttribs3fvNV(this GL.NVExtension glInstance, uint index, ReadOnlySpan<float> v)
        {
            var count = (int)(v.Length / 3);
            fixed (float* v_ptr = v) // SpanOrArrayLayer
            {
                glInstance.VertexAttribs3fvNV(index, count, v_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void VertexAttribs3fvNV(this GL.NVExtension glInstance, uint index, float[] v)
        {
            var count = (int)(v.Length / 3);
            fixed (float* v_ptr = v) // SpanOrArrayLayer
            {
                glInstance.VertexAttribs3fvNV(index, count, v_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void VertexAttribs3fvNV(this GL.NVExtension glInstance, uint index, int count, in float v)
        {
            fixed (float* v_ptr = &v) // RefInsteadOfPointerLayer
            {
                glInstance.VertexAttribs3fvNV(index, count, v_ptr);
            }
        }

        // VertexAttribs3svNV overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void VertexAttribs3svNV(this GL.NVExtension glInstance, uint index, ReadOnlySpan<short> v)
        {
            var count = (int)(v.Length / 3);
            fixed (short* v_ptr = v) // SpanOrArrayLayer
            {
                glInstance.VertexAttribs3svNV(index, count, v_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void VertexAttribs3svNV(this GL.NVExtension glInstance, uint index, short[] v)
        {
            var count = (int)(v.Length / 3);
            fixed (short* v_ptr = v) // SpanOrArrayLayer
            {
                glInstance.VertexAttribs3svNV(index, count, v_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void VertexAttribs3svNV(this GL.NVExtension glInstance, uint index, int count, in short v)
        {
            fixed (short* v_ptr = &v) // RefInsteadOfPointerLayer
            {
                glInstance.VertexAttribs3svNV(index, count, v_ptr);
            }
        }

        // VertexAttribs4dvNV overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void VertexAttribs4dvNV(this GL.NVExtension glInstance, uint index, ReadOnlySpan<double> v)
        {
            var count = (int)(v.Length / 4);
            fixed (double* v_ptr = v) // SpanOrArrayLayer
            {
                glInstance.VertexAttribs4dvNV(index, count, v_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void VertexAttribs4dvNV(this GL.NVExtension glInstance, uint index, double[] v)
        {
            var count = (int)(v.Length / 4);
            fixed (double* v_ptr = v) // SpanOrArrayLayer
            {
                glInstance.VertexAttribs4dvNV(index, count, v_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void VertexAttribs4dvNV(this GL.NVExtension glInstance, uint index, int count, in double v)
        {
            fixed (double* v_ptr = &v) // RefInsteadOfPointerLayer
            {
                glInstance.VertexAttribs4dvNV(index, count, v_ptr);
            }
        }

        // VertexAttribs4fvNV overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void VertexAttribs4fvNV(this GL.NVExtension glInstance, uint index, ReadOnlySpan<float> v)
        {
            var count = (int)(v.Length / 4);
            fixed (float* v_ptr = v) // SpanOrArrayLayer
            {
                glInstance.VertexAttribs4fvNV(index, count, v_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void VertexAttribs4fvNV(this GL.NVExtension glInstance, uint index, float[] v)
        {
            var count = (int)(v.Length / 4);
            fixed (float* v_ptr = v) // SpanOrArrayLayer
            {
                glInstance.VertexAttribs4fvNV(index, count, v_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void VertexAttribs4fvNV(this GL.NVExtension glInstance, uint index, int count, in float v)
        {
            fixed (float* v_ptr = &v) // RefInsteadOfPointerLayer
            {
                glInstance.VertexAttribs4fvNV(index, count, v_ptr);
            }
        }

        // VertexAttribs4svNV overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void VertexAttribs4svNV(this GL.NVExtension glInstance, uint index, ReadOnlySpan<short> v)
        {
            var count = (int)(v.Length / 4);
            fixed (short* v_ptr = v) // SpanOrArrayLayer
            {
                glInstance.VertexAttribs4svNV(index, count, v_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void VertexAttribs4svNV(this GL.NVExtension glInstance, uint index, short[] v)
        {
            var count = (int)(v.Length / 4);
            fixed (short* v_ptr = v) // SpanOrArrayLayer
            {
                glInstance.VertexAttribs4svNV(index, count, v_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void VertexAttribs4svNV(this GL.NVExtension glInstance, uint index, int count, in short v)
        {
            fixed (short* v_ptr = &v) // RefInsteadOfPointerLayer
            {
                glInstance.VertexAttribs4svNV(index, count, v_ptr);
            }
        }

        // VertexAttribs4ubvNV overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void VertexAttribs4ubvNV(this GL.NVExtension glInstance, uint index, ReadOnlySpan<byte> v)
        {
            var count = (int)(v.Length / 4);
            fixed (byte* v_ptr = v) // SpanOrArrayLayer
            {
                glInstance.VertexAttribs4ubvNV(index, count, v_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void VertexAttribs4ubvNV(this GL.NVExtension glInstance, uint index, byte[] v)
        {
            var count = (int)(v.Length / 4);
            fixed (byte* v_ptr = v) // SpanOrArrayLayer
            {
                glInstance.VertexAttribs4ubvNV(index, count, v_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void VertexAttribs4ubvNV(this GL.NVExtension glInstance, uint index, int count, in byte v)
        {
            fixed (byte* v_ptr = &v) // RefInsteadOfPointerLayer
            {
                glInstance.VertexAttribs4ubvNV(index, count, v_ptr);
            }
        }

        // VertexAttribI1ivEXT overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void VertexAttribI1ivEXT(this GL.NVExtension glInstance, uint index, ReadOnlySpan<int> v)
        {
            fixed (int* v_ptr = v) // SpanOrArrayLayer
            {
                glInstance.VertexAttribI1ivEXT(index, v_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void VertexAttribI1ivEXT(this GL.NVExtension glInstance, uint index, int[] v)
        {
            fixed (int* v_ptr = v) // SpanOrArrayLayer
            {
                glInstance.VertexAttribI1ivEXT(index, v_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void VertexAttribI1ivEXT(this GL.NVExtension glInstance, uint index, in int v)
        {
            fixed (int* v_ptr = &v) // RefInsteadOfPointerLayer
            {
                glInstance.VertexAttribI1ivEXT(index, v_ptr);
            }
        }

        // VertexAttribI2ivEXT overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void VertexAttribI2ivEXT(this GL.NVExtension glInstance, uint index, ReadOnlySpan<int> v)
        {
            fixed (int* v_ptr = v) // SpanOrArrayLayer
            {
                glInstance.VertexAttribI2ivEXT(index, v_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void VertexAttribI2ivEXT(this GL.NVExtension glInstance, uint index, int[] v)
        {
            fixed (int* v_ptr = v) // SpanOrArrayLayer
            {
                glInstance.VertexAttribI2ivEXT(index, v_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void VertexAttribI2ivEXT(this GL.NVExtension glInstance, uint index, in int v)
        {
            fixed (int* v_ptr = &v) // RefInsteadOfPointerLayer
            {
                glInstance.VertexAttribI2ivEXT(index, v_ptr);
            }
        }

        // VertexAttribI3ivEXT overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void VertexAttribI3ivEXT(this GL.NVExtension glInstance, uint index, ReadOnlySpan<int> v)
        {
            fixed (int* v_ptr = v) // SpanOrArrayLayer
            {
                glInstance.VertexAttribI3ivEXT(index, v_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void VertexAttribI3ivEXT(this GL.NVExtension glInstance, uint index, int[] v)
        {
            fixed (int* v_ptr = v) // SpanOrArrayLayer
            {
                glInstance.VertexAttribI3ivEXT(index, v_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void VertexAttribI3ivEXT(this GL.NVExtension glInstance, uint index, in int v)
        {
            fixed (int* v_ptr = &v) // RefInsteadOfPointerLayer
            {
                glInstance.VertexAttribI3ivEXT(index, v_ptr);
            }
        }

        // VertexAttribI4ivEXT overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void VertexAttribI4ivEXT(this GL.NVExtension glInstance, uint index, ReadOnlySpan<int> v)
        {
            fixed (int* v_ptr = v) // SpanOrArrayLayer
            {
                glInstance.VertexAttribI4ivEXT(index, v_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void VertexAttribI4ivEXT(this GL.NVExtension glInstance, uint index, int[] v)
        {
            fixed (int* v_ptr = v) // SpanOrArrayLayer
            {
                glInstance.VertexAttribI4ivEXT(index, v_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void VertexAttribI4ivEXT(this GL.NVExtension glInstance, uint index, in int v)
        {
            fixed (int* v_ptr = &v) // RefInsteadOfPointerLayer
            {
                glInstance.VertexAttribI4ivEXT(index, v_ptr);
            }
        }

        // VertexAttribI1uivEXT overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void VertexAttribI1uivEXT(this GL.NVExtension glInstance, uint index, ReadOnlySpan<uint> v)
        {
            fixed (uint* v_ptr = v) // SpanOrArrayLayer
            {
                glInstance.VertexAttribI1uivEXT(index, v_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void VertexAttribI1uivEXT(this GL.NVExtension glInstance, uint index, uint[] v)
        {
            fixed (uint* v_ptr = v) // SpanOrArrayLayer
            {
                glInstance.VertexAttribI1uivEXT(index, v_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void VertexAttribI1uivEXT(this GL.NVExtension glInstance, uint index, in uint v)
        {
            fixed (uint* v_ptr = &v) // RefInsteadOfPointerLayer
            {
                glInstance.VertexAttribI1uivEXT(index, v_ptr);
            }
        }

        // VertexAttribI2uivEXT overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void VertexAttribI2uivEXT(this GL.NVExtension glInstance, uint index, ReadOnlySpan<uint> v)
        {
            fixed (uint* v_ptr = v) // SpanOrArrayLayer
            {
                glInstance.VertexAttribI2uivEXT(index, v_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void VertexAttribI2uivEXT(this GL.NVExtension glInstance, uint index, uint[] v)
        {
            fixed (uint* v_ptr = v) // SpanOrArrayLayer
            {
                glInstance.VertexAttribI2uivEXT(index, v_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void VertexAttribI2uivEXT(this GL.NVExtension glInstance, uint index, in uint v)
        {
            fixed (uint* v_ptr = &v) // RefInsteadOfPointerLayer
            {
                glInstance.VertexAttribI2uivEXT(index, v_ptr);
            }
        }

        // VertexAttribI3uivEXT overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void VertexAttribI3uivEXT(this GL.NVExtension glInstance, uint index, ReadOnlySpan<uint> v)
        {
            fixed (uint* v_ptr = v) // SpanOrArrayLayer
            {
                glInstance.VertexAttribI3uivEXT(index, v_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void VertexAttribI3uivEXT(this GL.NVExtension glInstance, uint index, uint[] v)
        {
            fixed (uint* v_ptr = v) // SpanOrArrayLayer
            {
                glInstance.VertexAttribI3uivEXT(index, v_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void VertexAttribI3uivEXT(this GL.NVExtension glInstance, uint index, in uint v)
        {
            fixed (uint* v_ptr = &v) // RefInsteadOfPointerLayer
            {
                glInstance.VertexAttribI3uivEXT(index, v_ptr);
            }
        }

        // VertexAttribI4uivEXT overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void VertexAttribI4uivEXT(this GL.NVExtension glInstance, uint index, ReadOnlySpan<uint> v)
        {
            fixed (uint* v_ptr = v) // SpanOrArrayLayer
            {
                glInstance.VertexAttribI4uivEXT(index, v_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void VertexAttribI4uivEXT(this GL.NVExtension glInstance, uint index, uint[] v)
        {
            fixed (uint* v_ptr = v) // SpanOrArrayLayer
            {
                glInstance.VertexAttribI4uivEXT(index, v_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void VertexAttribI4uivEXT(this GL.NVExtension glInstance, uint index, in uint v)
        {
            fixed (uint* v_ptr = &v) // RefInsteadOfPointerLayer
            {
                glInstance.VertexAttribI4uivEXT(index, v_ptr);
            }
        }

        // VertexAttribI4bvEXT overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void VertexAttribI4bvEXT(this GL.NVExtension glInstance, uint index, ReadOnlySpan<sbyte> v)
        {
            fixed (sbyte* v_ptr = v) // SpanOrArrayLayer
            {
                glInstance.VertexAttribI4bvEXT(index, v_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void VertexAttribI4bvEXT(this GL.NVExtension glInstance, uint index, sbyte[] v)
        {
            fixed (sbyte* v_ptr = v) // SpanOrArrayLayer
            {
                glInstance.VertexAttribI4bvEXT(index, v_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void VertexAttribI4bvEXT(this GL.NVExtension glInstance, uint index, in sbyte v)
        {
            fixed (sbyte* v_ptr = &v) // RefInsteadOfPointerLayer
            {
                glInstance.VertexAttribI4bvEXT(index, v_ptr);
            }
        }

        // VertexAttribI4svEXT overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void VertexAttribI4svEXT(this GL.NVExtension glInstance, uint index, ReadOnlySpan<short> v)
        {
            fixed (short* v_ptr = v) // SpanOrArrayLayer
            {
                glInstance.VertexAttribI4svEXT(index, v_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void VertexAttribI4svEXT(this GL.NVExtension glInstance, uint index, short[] v)
        {
            fixed (short* v_ptr = v) // SpanOrArrayLayer
            {
                glInstance.VertexAttribI4svEXT(index, v_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void VertexAttribI4svEXT(this GL.NVExtension glInstance, uint index, in short v)
        {
            fixed (short* v_ptr = &v) // RefInsteadOfPointerLayer
            {
                glInstance.VertexAttribI4svEXT(index, v_ptr);
            }
        }

        // VertexAttribI4ubvEXT overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void VertexAttribI4ubvEXT(this GL.NVExtension glInstance, uint index, ReadOnlySpan<byte> v)
        {
            fixed (byte* v_ptr = v) // SpanOrArrayLayer
            {
                glInstance.VertexAttribI4ubvEXT(index, v_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void VertexAttribI4ubvEXT(this GL.NVExtension glInstance, uint index, byte[] v)
        {
            fixed (byte* v_ptr = v) // SpanOrArrayLayer
            {
                glInstance.VertexAttribI4ubvEXT(index, v_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void VertexAttribI4ubvEXT(this GL.NVExtension glInstance, uint index, in byte v)
        {
            fixed (byte* v_ptr = &v) // RefInsteadOfPointerLayer
            {
                glInstance.VertexAttribI4ubvEXT(index, v_ptr);
            }
        }

        // VertexAttribI4usvEXT overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void VertexAttribI4usvEXT(this GL.NVExtension glInstance, uint index, ReadOnlySpan<ushort> v)
        {
            fixed (ushort* v_ptr = v) // SpanOrArrayLayer
            {
                glInstance.VertexAttribI4usvEXT(index, v_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void VertexAttribI4usvEXT(this GL.NVExtension glInstance, uint index, ushort[] v)
        {
            fixed (ushort* v_ptr = v) // SpanOrArrayLayer
            {
                glInstance.VertexAttribI4usvEXT(index, v_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void VertexAttribI4usvEXT(this GL.NVExtension glInstance, uint index, in ushort v)
        {
            fixed (ushort* v_ptr = &v) // RefInsteadOfPointerLayer
            {
                glInstance.VertexAttribI4usvEXT(index, v_ptr);
            }
        }

        // VertexAttribIPointerEXT overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.VoidPtrToIntPtrOverloader
        public static unsafe void VertexAttribIPointerEXT(this GL.NVExtension glInstance, uint index, int size, VertexAttribIType type, int stride, IntPtr pointer)
        {
            var pointer_vptr = (void*)pointer;
            glInstance.VertexAttribIPointerEXT(index, size, type, stride, pointer_vptr);
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void VertexAttribIPointerEXT<T1>(this GL.NVExtension glInstance, uint index, int size, VertexAttribIType type, int stride, ReadOnlySpan<T1> pointer)
            where T1 : unmanaged
        {
            fixed (void* pointer_ptr = pointer) // SpanOrArrayLayer
            {
                glInstance.VertexAttribIPointerEXT(index, size, type, stride, pointer_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void VertexAttribIPointerEXT<T1>(this GL.NVExtension glInstance, uint index, int size, VertexAttribIType type, int stride, T1[] pointer)
            where T1 : unmanaged
        {
            fixed (void* pointer_ptr = pointer) // SpanOrArrayLayer
            {
                glInstance.VertexAttribIPointerEXT(index, size, type, stride, pointer_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void VertexAttribIPointerEXT<T1>(this GL.NVExtension glInstance, uint index, int size, VertexAttribIType type, int stride, in T1 pointer)
            where T1 : unmanaged
        {
            fixed (void* pointer_ptr = &pointer) // RefInsteadOfPointerLayer
            {
                glInstance.VertexAttribIPointerEXT(index, size, type, stride, pointer_ptr);
            }
        }

        // GetVertexAttribIivEXT overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetVertexAttribIivEXT(this GL.NVExtension glInstance, uint index, VertexAttribEnum pname, Span<int> parameters)
        {
            fixed (int* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.GetVertexAttribIivEXT(index, pname, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetVertexAttribIivEXT(this GL.NVExtension glInstance, uint index, VertexAttribEnum pname, int[] parameters)
        {
            fixed (int* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.GetVertexAttribIivEXT(index, pname, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void GetVertexAttribIivEXT(this GL.NVExtension glInstance, uint index, VertexAttribEnum pname, ref int parameters)
        {
            fixed (int* parameters_ptr = &parameters) // RefInsteadOfPointerLayer
            {
                glInstance.GetVertexAttribIivEXT(index, pname, parameters_ptr);
            }
        }

        // GetVertexAttribIuivEXT overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetVertexAttribIuivEXT(this GL.NVExtension glInstance, uint index, VertexAttribEnum pname, Span<uint> parameters)
        {
            fixed (uint* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.GetVertexAttribIuivEXT(index, pname, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetVertexAttribIuivEXT(this GL.NVExtension glInstance, uint index, VertexAttribEnum pname, uint[] parameters)
        {
            fixed (uint* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.GetVertexAttribIuivEXT(index, pname, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void GetVertexAttribIuivEXT(this GL.NVExtension glInstance, uint index, VertexAttribEnum pname, ref uint parameters)
        {
            fixed (uint* parameters_ptr = &parameters) // RefInsteadOfPointerLayer
            {
                glInstance.GetVertexAttribIuivEXT(index, pname, parameters_ptr);
            }
        }

        // GetVideoCaptureivNV overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetVideoCaptureivNV(this GL.NVExtension glInstance, uint video_capture_slot, GLEnum pname, Span<int> parameters)
        {
            fixed (int* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.GetVideoCaptureivNV(video_capture_slot, pname, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetVideoCaptureivNV(this GL.NVExtension glInstance, uint video_capture_slot, GLEnum pname, int[] parameters)
        {
            fixed (int* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.GetVideoCaptureivNV(video_capture_slot, pname, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void GetVideoCaptureivNV(this GL.NVExtension glInstance, uint video_capture_slot, GLEnum pname, ref int parameters)
        {
            fixed (int* parameters_ptr = &parameters) // RefInsteadOfPointerLayer
            {
                glInstance.GetVideoCaptureivNV(video_capture_slot, pname, parameters_ptr);
            }
        }

        // GetVideoCaptureStreamivNV overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetVideoCaptureStreamivNV(this GL.NVExtension glInstance, uint video_capture_slot, uint stream, GLEnum pname, Span<int> parameters)
        {
            fixed (int* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.GetVideoCaptureStreamivNV(video_capture_slot, stream, pname, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetVideoCaptureStreamivNV(this GL.NVExtension glInstance, uint video_capture_slot, uint stream, GLEnum pname, int[] parameters)
        {
            fixed (int* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.GetVideoCaptureStreamivNV(video_capture_slot, stream, pname, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void GetVideoCaptureStreamivNV(this GL.NVExtension glInstance, uint video_capture_slot, uint stream, GLEnum pname, ref int parameters)
        {
            fixed (int* parameters_ptr = &parameters) // RefInsteadOfPointerLayer
            {
                glInstance.GetVideoCaptureStreamivNV(video_capture_slot, stream, pname, parameters_ptr);
            }
        }

        // GetVideoCaptureStreamfvNV overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetVideoCaptureStreamfvNV(this GL.NVExtension glInstance, uint video_capture_slot, uint stream, GLEnum pname, Span<float> parameters)
        {
            fixed (float* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.GetVideoCaptureStreamfvNV(video_capture_slot, stream, pname, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetVideoCaptureStreamfvNV(this GL.NVExtension glInstance, uint video_capture_slot, uint stream, GLEnum pname, float[] parameters)
        {
            fixed (float* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.GetVideoCaptureStreamfvNV(video_capture_slot, stream, pname, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void GetVideoCaptureStreamfvNV(this GL.NVExtension glInstance, uint video_capture_slot, uint stream, GLEnum pname, ref float parameters)
        {
            fixed (float* parameters_ptr = &parameters) // RefInsteadOfPointerLayer
            {
                glInstance.GetVideoCaptureStreamfvNV(video_capture_slot, stream, pname, parameters_ptr);
            }
        }

        // GetVideoCaptureStreamdvNV overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetVideoCaptureStreamdvNV(this GL.NVExtension glInstance, uint video_capture_slot, uint stream, GLEnum pname, Span<double> parameters)
        {
            fixed (double* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.GetVideoCaptureStreamdvNV(video_capture_slot, stream, pname, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetVideoCaptureStreamdvNV(this GL.NVExtension glInstance, uint video_capture_slot, uint stream, GLEnum pname, double[] parameters)
        {
            fixed (double* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.GetVideoCaptureStreamdvNV(video_capture_slot, stream, pname, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void GetVideoCaptureStreamdvNV(this GL.NVExtension glInstance, uint video_capture_slot, uint stream, GLEnum pname, ref double parameters)
        {
            fixed (double* parameters_ptr = &parameters) // RefInsteadOfPointerLayer
            {
                glInstance.GetVideoCaptureStreamdvNV(video_capture_slot, stream, pname, parameters_ptr);
            }
        }

        // VideoCaptureNV overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe GLEnum VideoCaptureNV(this GL.NVExtension glInstance, uint video_capture_slot, ref uint sequence_num, ref ulong capture_time)
        {
            GLEnum returnValue;
            fixed (uint* sequence_num_ptr = &sequence_num) // RefInsteadOfPointerLayer
            fixed (ulong* capture_time_ptr = &capture_time) // RefInsteadOfPointerLayer
            {
                returnValue = glInstance.VideoCaptureNV(video_capture_slot, sequence_num_ptr, capture_time_ptr);
            }
            return returnValue;
        }

        // VideoCaptureStreamParameterivNV overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void VideoCaptureStreamParameterivNV(this GL.NVExtension glInstance, uint video_capture_slot, uint stream, GLEnum pname, ReadOnlySpan<int> parameters)
        {
            fixed (int* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.VideoCaptureStreamParameterivNV(video_capture_slot, stream, pname, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void VideoCaptureStreamParameterivNV(this GL.NVExtension glInstance, uint video_capture_slot, uint stream, GLEnum pname, int[] parameters)
        {
            fixed (int* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.VideoCaptureStreamParameterivNV(video_capture_slot, stream, pname, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void VideoCaptureStreamParameterivNV(this GL.NVExtension glInstance, uint video_capture_slot, uint stream, GLEnum pname, in int parameters)
        {
            fixed (int* parameters_ptr = &parameters) // RefInsteadOfPointerLayer
            {
                glInstance.VideoCaptureStreamParameterivNV(video_capture_slot, stream, pname, parameters_ptr);
            }
        }

        // VideoCaptureStreamParameterfvNV overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void VideoCaptureStreamParameterfvNV(this GL.NVExtension glInstance, uint video_capture_slot, uint stream, GLEnum pname, ReadOnlySpan<float> parameters)
        {
            fixed (float* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.VideoCaptureStreamParameterfvNV(video_capture_slot, stream, pname, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void VideoCaptureStreamParameterfvNV(this GL.NVExtension glInstance, uint video_capture_slot, uint stream, GLEnum pname, float[] parameters)
        {
            fixed (float* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.VideoCaptureStreamParameterfvNV(video_capture_slot, stream, pname, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void VideoCaptureStreamParameterfvNV(this GL.NVExtension glInstance, uint video_capture_slot, uint stream, GLEnum pname, in float parameters)
        {
            fixed (float* parameters_ptr = &parameters) // RefInsteadOfPointerLayer
            {
                glInstance.VideoCaptureStreamParameterfvNV(video_capture_slot, stream, pname, parameters_ptr);
            }
        }

        // VideoCaptureStreamParameterdvNV overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void VideoCaptureStreamParameterdvNV(this GL.NVExtension glInstance, uint video_capture_slot, uint stream, GLEnum pname, ReadOnlySpan<double> parameters)
        {
            fixed (double* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.VideoCaptureStreamParameterdvNV(video_capture_slot, stream, pname, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void VideoCaptureStreamParameterdvNV(this GL.NVExtension glInstance, uint video_capture_slot, uint stream, GLEnum pname, double[] parameters)
        {
            fixed (double* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.VideoCaptureStreamParameterdvNV(video_capture_slot, stream, pname, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void VideoCaptureStreamParameterdvNV(this GL.NVExtension glInstance, uint video_capture_slot, uint stream, GLEnum pname, in double parameters)
        {
            fixed (double* parameters_ptr = &parameters) // RefInsteadOfPointerLayer
            {
                glInstance.VideoCaptureStreamParameterdvNV(video_capture_slot, stream, pname, parameters_ptr);
            }
        }
    }

#pragma warning restore IDE1006 // Naming Styles
}
