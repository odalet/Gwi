// This file is auto generated, do not edit.
using System;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;

namespace Gwi.OpenGL.GLCompat
{
#pragma warning disable IDE1006 // Naming Styles

    public static class OESOverloads
    {
        // MultiTexCoord1bvOES overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void MultiTexCoord1bvOES(this GL.OESExtension glInstance, TextureUnit texture, ReadOnlySpan<sbyte> coords)
        {
            fixed (sbyte* coords_ptr = coords) // SpanOrArrayLayer
            {
                glInstance.MultiTexCoord1bvOES(texture, coords_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void MultiTexCoord1bvOES(this GL.OESExtension glInstance, TextureUnit texture, sbyte[] coords)
        {
            fixed (sbyte* coords_ptr = coords) // SpanOrArrayLayer
            {
                glInstance.MultiTexCoord1bvOES(texture, coords_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void MultiTexCoord1bvOES(this GL.OESExtension glInstance, TextureUnit texture, in sbyte coords)
        {
            fixed (sbyte* coords_ptr = &coords) // RefInsteadOfPointerLayer
            {
                glInstance.MultiTexCoord1bvOES(texture, coords_ptr);
            }
        }

        // MultiTexCoord2bvOES overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void MultiTexCoord2bvOES(this GL.OESExtension glInstance, TextureUnit texture, ReadOnlySpan<sbyte> coords)
        {
            fixed (sbyte* coords_ptr = coords) // SpanOrArrayLayer
            {
                glInstance.MultiTexCoord2bvOES(texture, coords_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void MultiTexCoord2bvOES(this GL.OESExtension glInstance, TextureUnit texture, sbyte[] coords)
        {
            fixed (sbyte* coords_ptr = coords) // SpanOrArrayLayer
            {
                glInstance.MultiTexCoord2bvOES(texture, coords_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void MultiTexCoord2bvOES(this GL.OESExtension glInstance, TextureUnit texture, in sbyte coords)
        {
            fixed (sbyte* coords_ptr = &coords) // RefInsteadOfPointerLayer
            {
                glInstance.MultiTexCoord2bvOES(texture, coords_ptr);
            }
        }

        // MultiTexCoord3bvOES overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void MultiTexCoord3bvOES(this GL.OESExtension glInstance, TextureUnit texture, ReadOnlySpan<sbyte> coords)
        {
            fixed (sbyte* coords_ptr = coords) // SpanOrArrayLayer
            {
                glInstance.MultiTexCoord3bvOES(texture, coords_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void MultiTexCoord3bvOES(this GL.OESExtension glInstance, TextureUnit texture, sbyte[] coords)
        {
            fixed (sbyte* coords_ptr = coords) // SpanOrArrayLayer
            {
                glInstance.MultiTexCoord3bvOES(texture, coords_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void MultiTexCoord3bvOES(this GL.OESExtension glInstance, TextureUnit texture, in sbyte coords)
        {
            fixed (sbyte* coords_ptr = &coords) // RefInsteadOfPointerLayer
            {
                glInstance.MultiTexCoord3bvOES(texture, coords_ptr);
            }
        }

        // MultiTexCoord4bvOES overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void MultiTexCoord4bvOES(this GL.OESExtension glInstance, TextureUnit texture, ReadOnlySpan<sbyte> coords)
        {
            fixed (sbyte* coords_ptr = coords) // SpanOrArrayLayer
            {
                glInstance.MultiTexCoord4bvOES(texture, coords_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void MultiTexCoord4bvOES(this GL.OESExtension glInstance, TextureUnit texture, sbyte[] coords)
        {
            fixed (sbyte* coords_ptr = coords) // SpanOrArrayLayer
            {
                glInstance.MultiTexCoord4bvOES(texture, coords_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void MultiTexCoord4bvOES(this GL.OESExtension glInstance, TextureUnit texture, in sbyte coords)
        {
            fixed (sbyte* coords_ptr = &coords) // RefInsteadOfPointerLayer
            {
                glInstance.MultiTexCoord4bvOES(texture, coords_ptr);
            }
        }

        // TexCoord1bvOES overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void TexCoord1bvOES(this GL.OESExtension glInstance, ReadOnlySpan<sbyte> coords)
        {
            fixed (sbyte* coords_ptr = coords) // SpanOrArrayLayer
            {
                glInstance.TexCoord1bvOES(coords_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void TexCoord1bvOES(this GL.OESExtension glInstance, sbyte[] coords)
        {
            fixed (sbyte* coords_ptr = coords) // SpanOrArrayLayer
            {
                glInstance.TexCoord1bvOES(coords_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void TexCoord1bvOES(this GL.OESExtension glInstance, in sbyte coords)
        {
            fixed (sbyte* coords_ptr = &coords) // RefInsteadOfPointerLayer
            {
                glInstance.TexCoord1bvOES(coords_ptr);
            }
        }

        // TexCoord2bvOES overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void TexCoord2bvOES(this GL.OESExtension glInstance, ReadOnlySpan<sbyte> coords)
        {
            fixed (sbyte* coords_ptr = coords) // SpanOrArrayLayer
            {
                glInstance.TexCoord2bvOES(coords_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void TexCoord2bvOES(this GL.OESExtension glInstance, sbyte[] coords)
        {
            fixed (sbyte* coords_ptr = coords) // SpanOrArrayLayer
            {
                glInstance.TexCoord2bvOES(coords_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void TexCoord2bvOES(this GL.OESExtension glInstance, in sbyte coords)
        {
            fixed (sbyte* coords_ptr = &coords) // RefInsteadOfPointerLayer
            {
                glInstance.TexCoord2bvOES(coords_ptr);
            }
        }

        // TexCoord3bvOES overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void TexCoord3bvOES(this GL.OESExtension glInstance, ReadOnlySpan<sbyte> coords)
        {
            fixed (sbyte* coords_ptr = coords) // SpanOrArrayLayer
            {
                glInstance.TexCoord3bvOES(coords_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void TexCoord3bvOES(this GL.OESExtension glInstance, sbyte[] coords)
        {
            fixed (sbyte* coords_ptr = coords) // SpanOrArrayLayer
            {
                glInstance.TexCoord3bvOES(coords_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void TexCoord3bvOES(this GL.OESExtension glInstance, in sbyte coords)
        {
            fixed (sbyte* coords_ptr = &coords) // RefInsteadOfPointerLayer
            {
                glInstance.TexCoord3bvOES(coords_ptr);
            }
        }

        // TexCoord4bvOES overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void TexCoord4bvOES(this GL.OESExtension glInstance, ReadOnlySpan<sbyte> coords)
        {
            fixed (sbyte* coords_ptr = coords) // SpanOrArrayLayer
            {
                glInstance.TexCoord4bvOES(coords_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void TexCoord4bvOES(this GL.OESExtension glInstance, sbyte[] coords)
        {
            fixed (sbyte* coords_ptr = coords) // SpanOrArrayLayer
            {
                glInstance.TexCoord4bvOES(coords_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void TexCoord4bvOES(this GL.OESExtension glInstance, in sbyte coords)
        {
            fixed (sbyte* coords_ptr = &coords) // RefInsteadOfPointerLayer
            {
                glInstance.TexCoord4bvOES(coords_ptr);
            }
        }

        // Vertex2bvOES overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void Vertex2bvOES(this GL.OESExtension glInstance, ReadOnlySpan<sbyte> coords)
        {
            fixed (sbyte* coords_ptr = coords) // SpanOrArrayLayer
            {
                glInstance.Vertex2bvOES(coords_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void Vertex2bvOES(this GL.OESExtension glInstance, sbyte[] coords)
        {
            fixed (sbyte* coords_ptr = coords) // SpanOrArrayLayer
            {
                glInstance.Vertex2bvOES(coords_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void Vertex2bvOES(this GL.OESExtension glInstance, in sbyte coords)
        {
            fixed (sbyte* coords_ptr = &coords) // RefInsteadOfPointerLayer
            {
                glInstance.Vertex2bvOES(coords_ptr);
            }
        }

        // Vertex3bvOES overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void Vertex3bvOES(this GL.OESExtension glInstance, ReadOnlySpan<sbyte> coords)
        {
            fixed (sbyte* coords_ptr = coords) // SpanOrArrayLayer
            {
                glInstance.Vertex3bvOES(coords_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void Vertex3bvOES(this GL.OESExtension glInstance, sbyte[] coords)
        {
            fixed (sbyte* coords_ptr = coords) // SpanOrArrayLayer
            {
                glInstance.Vertex3bvOES(coords_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void Vertex3bvOES(this GL.OESExtension glInstance, in sbyte coords)
        {
            fixed (sbyte* coords_ptr = &coords) // RefInsteadOfPointerLayer
            {
                glInstance.Vertex3bvOES(coords_ptr);
            }
        }

        // Vertex4bvOES overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void Vertex4bvOES(this GL.OESExtension glInstance, ReadOnlySpan<sbyte> coords)
        {
            fixed (sbyte* coords_ptr = coords) // SpanOrArrayLayer
            {
                glInstance.Vertex4bvOES(coords_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void Vertex4bvOES(this GL.OESExtension glInstance, sbyte[] coords)
        {
            fixed (sbyte* coords_ptr = coords) // SpanOrArrayLayer
            {
                glInstance.Vertex4bvOES(coords_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void Vertex4bvOES(this GL.OESExtension glInstance, in sbyte coords)
        {
            fixed (sbyte* coords_ptr = &coords) // RefInsteadOfPointerLayer
            {
                glInstance.Vertex4bvOES(coords_ptr);
            }
        }

        // ClipPlanexOES overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void ClipPlanexOES(this GL.OESExtension glInstance, ClipPlaneName plane, ReadOnlySpan<int> equation)
        {
            fixed (int* equation_ptr = equation) // SpanOrArrayLayer
            {
                glInstance.ClipPlanexOES(plane, equation_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void ClipPlanexOES(this GL.OESExtension glInstance, ClipPlaneName plane, int[] equation)
        {
            fixed (int* equation_ptr = equation) // SpanOrArrayLayer
            {
                glInstance.ClipPlanexOES(plane, equation_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void ClipPlanexOES(this GL.OESExtension glInstance, ClipPlaneName plane, in int equation)
        {
            fixed (int* equation_ptr = &equation) // RefInsteadOfPointerLayer
            {
                glInstance.ClipPlanexOES(plane, equation_ptr);
            }
        }

        // FogxvOES overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void FogxvOES(this GL.OESExtension glInstance, FogPName pname, ReadOnlySpan<int> param)
        {
            fixed (int* param_ptr = param) // SpanOrArrayLayer
            {
                glInstance.FogxvOES(pname, param_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void FogxvOES(this GL.OESExtension glInstance, FogPName pname, int[] param)
        {
            fixed (int* param_ptr = param) // SpanOrArrayLayer
            {
                glInstance.FogxvOES(pname, param_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void FogxvOES(this GL.OESExtension glInstance, FogPName pname, in int param)
        {
            fixed (int* param_ptr = &param) // RefInsteadOfPointerLayer
            {
                glInstance.FogxvOES(pname, param_ptr);
            }
        }

        // GetClipPlanexOES overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetClipPlanexOES(this GL.OESExtension glInstance, ClipPlaneName plane, Span<int> equation)
        {
            fixed (int* equation_ptr = equation) // SpanOrArrayLayer
            {
                glInstance.GetClipPlanexOES(plane, equation_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetClipPlanexOES(this GL.OESExtension glInstance, ClipPlaneName plane, int[] equation)
        {
            fixed (int* equation_ptr = equation) // SpanOrArrayLayer
            {
                glInstance.GetClipPlanexOES(plane, equation_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void GetClipPlanexOES(this GL.OESExtension glInstance, ClipPlaneName plane, ref int equation)
        {
            fixed (int* equation_ptr = &equation) // RefInsteadOfPointerLayer
            {
                glInstance.GetClipPlanexOES(plane, equation_ptr);
            }
        }

        // GetFixedvOES overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetFixedvOES(this GL.OESExtension glInstance, GetPName pname, Span<int> parameters)
        {
            fixed (int* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.GetFixedvOES(pname, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetFixedvOES(this GL.OESExtension glInstance, GetPName pname, int[] parameters)
        {
            fixed (int* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.GetFixedvOES(pname, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void GetFixedvOES(this GL.OESExtension glInstance, GetPName pname, ref int parameters)
        {
            fixed (int* parameters_ptr = &parameters) // RefInsteadOfPointerLayer
            {
                glInstance.GetFixedvOES(pname, parameters_ptr);
            }
        }

        // GetTexEnvxvOES overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetTexEnvxvOES(this GL.OESExtension glInstance, TextureEnvTarget target, TextureEnvParameter pname, Span<int> parameters)
        {
            fixed (int* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.GetTexEnvxvOES(target, pname, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetTexEnvxvOES(this GL.OESExtension glInstance, TextureEnvTarget target, TextureEnvParameter pname, int[] parameters)
        {
            fixed (int* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.GetTexEnvxvOES(target, pname, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void GetTexEnvxvOES(this GL.OESExtension glInstance, TextureEnvTarget target, TextureEnvParameter pname, ref int parameters)
        {
            fixed (int* parameters_ptr = &parameters) // RefInsteadOfPointerLayer
            {
                glInstance.GetTexEnvxvOES(target, pname, parameters_ptr);
            }
        }

        // GetTexParameterxvOES overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetTexParameterxvOES(this GL.OESExtension glInstance, TextureTarget target, GetTextureParameter pname, Span<int> parameters)
        {
            fixed (int* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.GetTexParameterxvOES(target, pname, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetTexParameterxvOES(this GL.OESExtension glInstance, TextureTarget target, GetTextureParameter pname, int[] parameters)
        {
            fixed (int* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.GetTexParameterxvOES(target, pname, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void GetTexParameterxvOES(this GL.OESExtension glInstance, TextureTarget target, GetTextureParameter pname, ref int parameters)
        {
            fixed (int* parameters_ptr = &parameters) // RefInsteadOfPointerLayer
            {
                glInstance.GetTexParameterxvOES(target, pname, parameters_ptr);
            }
        }

        // LightModelxvOES overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void LightModelxvOES(this GL.OESExtension glInstance, LightModelParameter pname, ReadOnlySpan<int> param)
        {
            fixed (int* param_ptr = param) // SpanOrArrayLayer
            {
                glInstance.LightModelxvOES(pname, param_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void LightModelxvOES(this GL.OESExtension glInstance, LightModelParameter pname, int[] param)
        {
            fixed (int* param_ptr = param) // SpanOrArrayLayer
            {
                glInstance.LightModelxvOES(pname, param_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void LightModelxvOES(this GL.OESExtension glInstance, LightModelParameter pname, in int param)
        {
            fixed (int* param_ptr = &param) // RefInsteadOfPointerLayer
            {
                glInstance.LightModelxvOES(pname, param_ptr);
            }
        }

        // LightxvOES overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void LightxvOES(this GL.OESExtension glInstance, LightName light, LightParameter pname, ReadOnlySpan<int> parameters)
        {
            fixed (int* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.LightxvOES(light, pname, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void LightxvOES(this GL.OESExtension glInstance, LightName light, LightParameter pname, int[] parameters)
        {
            fixed (int* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.LightxvOES(light, pname, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void LightxvOES(this GL.OESExtension glInstance, LightName light, LightParameter pname, in int parameters)
        {
            fixed (int* parameters_ptr = &parameters) // RefInsteadOfPointerLayer
            {
                glInstance.LightxvOES(light, pname, parameters_ptr);
            }
        }

        // LoadMatrixxOES overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void LoadMatrixxOES(this GL.OESExtension glInstance, ReadOnlySpan<int> m)
        {
            fixed (int* m_ptr = m) // SpanOrArrayLayer
            {
                glInstance.LoadMatrixxOES(m_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void LoadMatrixxOES(this GL.OESExtension glInstance, int[] m)
        {
            fixed (int* m_ptr = m) // SpanOrArrayLayer
            {
                glInstance.LoadMatrixxOES(m_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void LoadMatrixxOES(this GL.OESExtension glInstance, in int m)
        {
            fixed (int* m_ptr = &m) // RefInsteadOfPointerLayer
            {
                glInstance.LoadMatrixxOES(m_ptr);
            }
        }

        // MaterialxvOES overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void MaterialxvOES(this GL.OESExtension glInstance, MaterialFace face, MaterialParameter pname, ReadOnlySpan<int> param)
        {
            fixed (int* param_ptr = param) // SpanOrArrayLayer
            {
                glInstance.MaterialxvOES(face, pname, param_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void MaterialxvOES(this GL.OESExtension glInstance, MaterialFace face, MaterialParameter pname, int[] param)
        {
            fixed (int* param_ptr = param) // SpanOrArrayLayer
            {
                glInstance.MaterialxvOES(face, pname, param_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void MaterialxvOES(this GL.OESExtension glInstance, MaterialFace face, MaterialParameter pname, in int param)
        {
            fixed (int* param_ptr = &param) // RefInsteadOfPointerLayer
            {
                glInstance.MaterialxvOES(face, pname, param_ptr);
            }
        }

        // MultMatrixxOES overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void MultMatrixxOES(this GL.OESExtension glInstance, ReadOnlySpan<int> m)
        {
            fixed (int* m_ptr = m) // SpanOrArrayLayer
            {
                glInstance.MultMatrixxOES(m_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void MultMatrixxOES(this GL.OESExtension glInstance, int[] m)
        {
            fixed (int* m_ptr = m) // SpanOrArrayLayer
            {
                glInstance.MultMatrixxOES(m_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void MultMatrixxOES(this GL.OESExtension glInstance, in int m)
        {
            fixed (int* m_ptr = &m) // RefInsteadOfPointerLayer
            {
                glInstance.MultMatrixxOES(m_ptr);
            }
        }

        // PointParameterxvOES overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void PointParameterxvOES(this GL.OESExtension glInstance, PointParameterNameARB pname, ReadOnlySpan<int> parameters)
        {
            fixed (int* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.PointParameterxvOES(pname, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void PointParameterxvOES(this GL.OESExtension glInstance, PointParameterNameARB pname, int[] parameters)
        {
            fixed (int* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.PointParameterxvOES(pname, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void PointParameterxvOES(this GL.OESExtension glInstance, PointParameterNameARB pname, in int parameters)
        {
            fixed (int* parameters_ptr = &parameters) // RefInsteadOfPointerLayer
            {
                glInstance.PointParameterxvOES(pname, parameters_ptr);
            }
        }

        // TexEnvxvOES overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void TexEnvxvOES(this GL.OESExtension glInstance, TextureEnvTarget target, TextureEnvParameter pname, ReadOnlySpan<int> parameters)
        {
            fixed (int* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.TexEnvxvOES(target, pname, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void TexEnvxvOES(this GL.OESExtension glInstance, TextureEnvTarget target, TextureEnvParameter pname, int[] parameters)
        {
            fixed (int* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.TexEnvxvOES(target, pname, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void TexEnvxvOES(this GL.OESExtension glInstance, TextureEnvTarget target, TextureEnvParameter pname, in int parameters)
        {
            fixed (int* parameters_ptr = &parameters) // RefInsteadOfPointerLayer
            {
                glInstance.TexEnvxvOES(target, pname, parameters_ptr);
            }
        }

        // TexParameterxvOES overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void TexParameterxvOES(this GL.OESExtension glInstance, TextureTarget target, GetTextureParameter pname, ReadOnlySpan<int> parameters)
        {
            fixed (int* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.TexParameterxvOES(target, pname, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void TexParameterxvOES(this GL.OESExtension glInstance, TextureTarget target, GetTextureParameter pname, int[] parameters)
        {
            fixed (int* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.TexParameterxvOES(target, pname, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void TexParameterxvOES(this GL.OESExtension glInstance, TextureTarget target, GetTextureParameter pname, in int parameters)
        {
            fixed (int* parameters_ptr = &parameters) // RefInsteadOfPointerLayer
            {
                glInstance.TexParameterxvOES(target, pname, parameters_ptr);
            }
        }

        // GetLightxvOES overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetLightxvOES(this GL.OESExtension glInstance, LightName light, LightParameter pname, Span<int> parameters)
        {
            fixed (int* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.GetLightxvOES(light, pname, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetLightxvOES(this GL.OESExtension glInstance, LightName light, LightParameter pname, int[] parameters)
        {
            fixed (int* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.GetLightxvOES(light, pname, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void GetLightxvOES(this GL.OESExtension glInstance, LightName light, LightParameter pname, ref int parameters)
        {
            fixed (int* parameters_ptr = &parameters) // RefInsteadOfPointerLayer
            {
                glInstance.GetLightxvOES(light, pname, parameters_ptr);
            }
        }

        // GetMaterialxvOES overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetMaterialxvOES(this GL.OESExtension glInstance, MaterialFace face, MaterialParameter pname, Span<int> parameters)
        {
            fixed (int* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.GetMaterialxvOES(face, pname, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetMaterialxvOES(this GL.OESExtension glInstance, MaterialFace face, MaterialParameter pname, int[] parameters)
        {
            fixed (int* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.GetMaterialxvOES(face, pname, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void GetMaterialxvOES(this GL.OESExtension glInstance, MaterialFace face, MaterialParameter pname, ref int parameters)
        {
            fixed (int* parameters_ptr = &parameters) // RefInsteadOfPointerLayer
            {
                glInstance.GetMaterialxvOES(face, pname, parameters_ptr);
            }
        }

        // SampleCoveragexOES overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.BoolOverloader
        public static unsafe void SampleCoveragexOES(this GL.OESExtension glInstance, int value, bool invert)
        {
            var invert_byte = (byte)(invert ? 1 : 0);
            glInstance.SampleCoveragexOES(value, invert_byte);
        }

        // BitmapxOES overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void BitmapxOES(this GL.OESExtension glInstance, int width, int height, int xorig, int yorig, int xmove, int ymove, ReadOnlySpan<byte> bitmap)
        {
            fixed (byte* bitmap_ptr = bitmap) // SpanOrArrayLayer
            {
                glInstance.BitmapxOES(width, height, xorig, yorig, xmove, ymove, bitmap_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void BitmapxOES(this GL.OESExtension glInstance, int width, int height, int xorig, int yorig, int xmove, int ymove, byte[] bitmap)
        {
            fixed (byte* bitmap_ptr = bitmap) // SpanOrArrayLayer
            {
                glInstance.BitmapxOES(width, height, xorig, yorig, xmove, ymove, bitmap_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void BitmapxOES(this GL.OESExtension glInstance, int width, int height, int xorig, int yorig, int xmove, int ymove, in byte bitmap)
        {
            fixed (byte* bitmap_ptr = &bitmap) // RefInsteadOfPointerLayer
            {
                glInstance.BitmapxOES(width, height, xorig, yorig, xmove, ymove, bitmap_ptr);
            }
        }

        // Color3xvOES overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void Color3xvOES(this GL.OESExtension glInstance, ReadOnlySpan<int> components)
        {
            fixed (int* components_ptr = components) // SpanOrArrayLayer
            {
                glInstance.Color3xvOES(components_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void Color3xvOES(this GL.OESExtension glInstance, int[] components)
        {
            fixed (int* components_ptr = components) // SpanOrArrayLayer
            {
                glInstance.Color3xvOES(components_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void Color3xvOES(this GL.OESExtension glInstance, in int components)
        {
            fixed (int* components_ptr = &components) // RefInsteadOfPointerLayer
            {
                glInstance.Color3xvOES(components_ptr);
            }
        }

        // Color4xvOES overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void Color4xvOES(this GL.OESExtension glInstance, ReadOnlySpan<int> components)
        {
            fixed (int* components_ptr = components) // SpanOrArrayLayer
            {
                glInstance.Color4xvOES(components_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void Color4xvOES(this GL.OESExtension glInstance, int[] components)
        {
            fixed (int* components_ptr = components) // SpanOrArrayLayer
            {
                glInstance.Color4xvOES(components_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void Color4xvOES(this GL.OESExtension glInstance, in int components)
        {
            fixed (int* components_ptr = &components) // RefInsteadOfPointerLayer
            {
                glInstance.Color4xvOES(components_ptr);
            }
        }

        // ConvolutionParameterxvOES overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void ConvolutionParameterxvOES(this GL.OESExtension glInstance, ConvolutionTargetEXT target, ConvolutionParameterEXT pname, ReadOnlySpan<int> parameters)
        {
            fixed (int* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.ConvolutionParameterxvOES(target, pname, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void ConvolutionParameterxvOES(this GL.OESExtension glInstance, ConvolutionTargetEXT target, ConvolutionParameterEXT pname, int[] parameters)
        {
            fixed (int* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.ConvolutionParameterxvOES(target, pname, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void ConvolutionParameterxvOES(this GL.OESExtension glInstance, ConvolutionTargetEXT target, ConvolutionParameterEXT pname, in int parameters)
        {
            fixed (int* parameters_ptr = &parameters) // RefInsteadOfPointerLayer
            {
                glInstance.ConvolutionParameterxvOES(target, pname, parameters_ptr);
            }
        }

        // EvalCoord1xvOES overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void EvalCoord1xvOES(this GL.OESExtension glInstance, ReadOnlySpan<int> coords)
        {
            fixed (int* coords_ptr = coords) // SpanOrArrayLayer
            {
                glInstance.EvalCoord1xvOES(coords_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void EvalCoord1xvOES(this GL.OESExtension glInstance, int[] coords)
        {
            fixed (int* coords_ptr = coords) // SpanOrArrayLayer
            {
                glInstance.EvalCoord1xvOES(coords_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void EvalCoord1xvOES(this GL.OESExtension glInstance, in int coords)
        {
            fixed (int* coords_ptr = &coords) // RefInsteadOfPointerLayer
            {
                glInstance.EvalCoord1xvOES(coords_ptr);
            }
        }

        // EvalCoord2xvOES overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void EvalCoord2xvOES(this GL.OESExtension glInstance, ReadOnlySpan<int> coords)
        {
            fixed (int* coords_ptr = coords) // SpanOrArrayLayer
            {
                glInstance.EvalCoord2xvOES(coords_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void EvalCoord2xvOES(this GL.OESExtension glInstance, int[] coords)
        {
            fixed (int* coords_ptr = coords) // SpanOrArrayLayer
            {
                glInstance.EvalCoord2xvOES(coords_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void EvalCoord2xvOES(this GL.OESExtension glInstance, in int coords)
        {
            fixed (int* coords_ptr = &coords) // RefInsteadOfPointerLayer
            {
                glInstance.EvalCoord2xvOES(coords_ptr);
            }
        }

        // FeedbackBufferxOES overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void FeedbackBufferxOES(this GL.OESExtension glInstance, GLEnum type, ReadOnlySpan<int> buffer)
        {
            var n = (int)(buffer.Length);
            fixed (int* buffer_ptr = buffer) // SpanOrArrayLayer
            {
                glInstance.FeedbackBufferxOES(n, type, buffer_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void FeedbackBufferxOES(this GL.OESExtension glInstance, GLEnum type, int[] buffer)
        {
            var n = (int)(buffer.Length);
            fixed (int* buffer_ptr = buffer) // SpanOrArrayLayer
            {
                glInstance.FeedbackBufferxOES(n, type, buffer_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void FeedbackBufferxOES(this GL.OESExtension glInstance, int n, GLEnum type, in int buffer)
        {
            fixed (int* buffer_ptr = &buffer) // RefInsteadOfPointerLayer
            {
                glInstance.FeedbackBufferxOES(n, type, buffer_ptr);
            }
        }

        // GetConvolutionParameterxvOES overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetConvolutionParameterxvOES(this GL.OESExtension glInstance, GLEnum target, GLEnum pname, Span<int> parameters)
        {
            fixed (int* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.GetConvolutionParameterxvOES(target, pname, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetConvolutionParameterxvOES(this GL.OESExtension glInstance, GLEnum target, GLEnum pname, int[] parameters)
        {
            fixed (int* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.GetConvolutionParameterxvOES(target, pname, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void GetConvolutionParameterxvOES(this GL.OESExtension glInstance, GLEnum target, GLEnum pname, ref int parameters)
        {
            fixed (int* parameters_ptr = &parameters) // RefInsteadOfPointerLayer
            {
                glInstance.GetConvolutionParameterxvOES(target, pname, parameters_ptr);
            }
        }

        // GetHistogramParameterxvOES overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetHistogramParameterxvOES(this GL.OESExtension glInstance, HistogramTargetEXT target, GetHistogramParameterPNameEXT pname, Span<int> parameters)
        {
            fixed (int* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.GetHistogramParameterxvOES(target, pname, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetHistogramParameterxvOES(this GL.OESExtension glInstance, HistogramTargetEXT target, GetHistogramParameterPNameEXT pname, int[] parameters)
        {
            fixed (int* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.GetHistogramParameterxvOES(target, pname, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void GetHistogramParameterxvOES(this GL.OESExtension glInstance, HistogramTargetEXT target, GetHistogramParameterPNameEXT pname, ref int parameters)
        {
            fixed (int* parameters_ptr = &parameters) // RefInsteadOfPointerLayer
            {
                glInstance.GetHistogramParameterxvOES(target, pname, parameters_ptr);
            }
        }

        // GetLightxOES overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetLightxOES(this GL.OESExtension glInstance, LightName light, LightParameter pname, Span<int> parameters)
        {
            fixed (int* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.GetLightxOES(light, pname, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetLightxOES(this GL.OESExtension glInstance, LightName light, LightParameter pname, int[] parameters)
        {
            fixed (int* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.GetLightxOES(light, pname, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void GetLightxOES(this GL.OESExtension glInstance, LightName light, LightParameter pname, ref int parameters)
        {
            fixed (int* parameters_ptr = &parameters) // RefInsteadOfPointerLayer
            {
                glInstance.GetLightxOES(light, pname, parameters_ptr);
            }
        }

        // GetMapxvOES overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetMapxvOES(this GL.OESExtension glInstance, MapTarget target, GetMapQuery query, Span<int> v)
        {
            fixed (int* v_ptr = v) // SpanOrArrayLayer
            {
                glInstance.GetMapxvOES(target, query, v_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetMapxvOES(this GL.OESExtension glInstance, MapTarget target, GetMapQuery query, int[] v)
        {
            fixed (int* v_ptr = v) // SpanOrArrayLayer
            {
                glInstance.GetMapxvOES(target, query, v_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void GetMapxvOES(this GL.OESExtension glInstance, MapTarget target, GetMapQuery query, ref int v)
        {
            fixed (int* v_ptr = &v) // RefInsteadOfPointerLayer
            {
                glInstance.GetMapxvOES(target, query, v_ptr);
            }
        }

        // GetPixelMapxv overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetPixelMapx(this GL.OESExtension glInstance, PixelMap map, Span<int> values)
        {
            var size = (int)(values.Length);
            fixed (int* values_ptr = values) // SpanOrArrayLayer
            {
                glInstance.GetPixelMapxv(map, size, values_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetPixelMapx(this GL.OESExtension glInstance, PixelMap map, int[] values)
        {
            var size = (int)(values.Length);
            fixed (int* values_ptr = values) // SpanOrArrayLayer
            {
                glInstance.GetPixelMapxv(map, size, values_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void GetPixelMapx(this GL.OESExtension glInstance, PixelMap map, int size, ref int values)
        {
            fixed (int* values_ptr = &values) // RefInsteadOfPointerLayer
            {
                glInstance.GetPixelMapxv(map, size, values_ptr);
            }
        }

        // GetTexGenxvOES overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetTexGenxvOES(this GL.OESExtension glInstance, TextureCoordName coord, TextureGenParameter pname, Span<int> parameters)
        {
            fixed (int* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.GetTexGenxvOES(coord, pname, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetTexGenxvOES(this GL.OESExtension glInstance, TextureCoordName coord, TextureGenParameter pname, int[] parameters)
        {
            fixed (int* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.GetTexGenxvOES(coord, pname, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void GetTexGenxvOES(this GL.OESExtension glInstance, TextureCoordName coord, TextureGenParameter pname, ref int parameters)
        {
            fixed (int* parameters_ptr = &parameters) // RefInsteadOfPointerLayer
            {
                glInstance.GetTexGenxvOES(coord, pname, parameters_ptr);
            }
        }

        // GetTexLevelParameterxvOES overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetTexLevelParameterxvOES(this GL.OESExtension glInstance, TextureTarget target, int level, GetTextureParameter pname, Span<int> parameters)
        {
            fixed (int* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.GetTexLevelParameterxvOES(target, level, pname, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetTexLevelParameterxvOES(this GL.OESExtension glInstance, TextureTarget target, int level, GetTextureParameter pname, int[] parameters)
        {
            fixed (int* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.GetTexLevelParameterxvOES(target, level, pname, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void GetTexLevelParameterxvOES(this GL.OESExtension glInstance, TextureTarget target, int level, GetTextureParameter pname, ref int parameters)
        {
            fixed (int* parameters_ptr = &parameters) // RefInsteadOfPointerLayer
            {
                glInstance.GetTexLevelParameterxvOES(target, level, pname, parameters_ptr);
            }
        }

        // IndexxvOES overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void IndexxvOES(this GL.OESExtension glInstance, ReadOnlySpan<int> component)
        {
            fixed (int* component_ptr = component) // SpanOrArrayLayer
            {
                glInstance.IndexxvOES(component_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void IndexxvOES(this GL.OESExtension glInstance, int[] component)
        {
            fixed (int* component_ptr = component) // SpanOrArrayLayer
            {
                glInstance.IndexxvOES(component_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void IndexxvOES(this GL.OESExtension glInstance, in int component)
        {
            fixed (int* component_ptr = &component) // RefInsteadOfPointerLayer
            {
                glInstance.IndexxvOES(component_ptr);
            }
        }

        // LoadTransposeMatrixxOES overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void LoadTransposeMatrixxOES(this GL.OESExtension glInstance, ReadOnlySpan<int> m)
        {
            fixed (int* m_ptr = m) // SpanOrArrayLayer
            {
                glInstance.LoadTransposeMatrixxOES(m_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void LoadTransposeMatrixxOES(this GL.OESExtension glInstance, int[] m)
        {
            fixed (int* m_ptr = m) // SpanOrArrayLayer
            {
                glInstance.LoadTransposeMatrixxOES(m_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void LoadTransposeMatrixxOES(this GL.OESExtension glInstance, in int m)
        {
            fixed (int* m_ptr = &m) // RefInsteadOfPointerLayer
            {
                glInstance.LoadTransposeMatrixxOES(m_ptr);
            }
        }

        // MultTransposeMatrixxOES overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void MultTransposeMatrixxOES(this GL.OESExtension glInstance, ReadOnlySpan<int> m)
        {
            fixed (int* m_ptr = m) // SpanOrArrayLayer
            {
                glInstance.MultTransposeMatrixxOES(m_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void MultTransposeMatrixxOES(this GL.OESExtension glInstance, int[] m)
        {
            fixed (int* m_ptr = m) // SpanOrArrayLayer
            {
                glInstance.MultTransposeMatrixxOES(m_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void MultTransposeMatrixxOES(this GL.OESExtension glInstance, in int m)
        {
            fixed (int* m_ptr = &m) // RefInsteadOfPointerLayer
            {
                glInstance.MultTransposeMatrixxOES(m_ptr);
            }
        }

        // MultiTexCoord1xvOES overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void MultiTexCoord1xvOES(this GL.OESExtension glInstance, TextureUnit texture, ReadOnlySpan<int> coords)
        {
            fixed (int* coords_ptr = coords) // SpanOrArrayLayer
            {
                glInstance.MultiTexCoord1xvOES(texture, coords_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void MultiTexCoord1xvOES(this GL.OESExtension glInstance, TextureUnit texture, int[] coords)
        {
            fixed (int* coords_ptr = coords) // SpanOrArrayLayer
            {
                glInstance.MultiTexCoord1xvOES(texture, coords_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void MultiTexCoord1xvOES(this GL.OESExtension glInstance, TextureUnit texture, in int coords)
        {
            fixed (int* coords_ptr = &coords) // RefInsteadOfPointerLayer
            {
                glInstance.MultiTexCoord1xvOES(texture, coords_ptr);
            }
        }

        // MultiTexCoord2xvOES overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void MultiTexCoord2xvOES(this GL.OESExtension glInstance, TextureUnit texture, ReadOnlySpan<int> coords)
        {
            fixed (int* coords_ptr = coords) // SpanOrArrayLayer
            {
                glInstance.MultiTexCoord2xvOES(texture, coords_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void MultiTexCoord2xvOES(this GL.OESExtension glInstance, TextureUnit texture, int[] coords)
        {
            fixed (int* coords_ptr = coords) // SpanOrArrayLayer
            {
                glInstance.MultiTexCoord2xvOES(texture, coords_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void MultiTexCoord2xvOES(this GL.OESExtension glInstance, TextureUnit texture, in int coords)
        {
            fixed (int* coords_ptr = &coords) // RefInsteadOfPointerLayer
            {
                glInstance.MultiTexCoord2xvOES(texture, coords_ptr);
            }
        }

        // MultiTexCoord3xvOES overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void MultiTexCoord3xvOES(this GL.OESExtension glInstance, TextureUnit texture, ReadOnlySpan<int> coords)
        {
            fixed (int* coords_ptr = coords) // SpanOrArrayLayer
            {
                glInstance.MultiTexCoord3xvOES(texture, coords_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void MultiTexCoord3xvOES(this GL.OESExtension glInstance, TextureUnit texture, int[] coords)
        {
            fixed (int* coords_ptr = coords) // SpanOrArrayLayer
            {
                glInstance.MultiTexCoord3xvOES(texture, coords_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void MultiTexCoord3xvOES(this GL.OESExtension glInstance, TextureUnit texture, in int coords)
        {
            fixed (int* coords_ptr = &coords) // RefInsteadOfPointerLayer
            {
                glInstance.MultiTexCoord3xvOES(texture, coords_ptr);
            }
        }

        // MultiTexCoord4xvOES overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void MultiTexCoord4xvOES(this GL.OESExtension glInstance, TextureUnit texture, ReadOnlySpan<int> coords)
        {
            fixed (int* coords_ptr = coords) // SpanOrArrayLayer
            {
                glInstance.MultiTexCoord4xvOES(texture, coords_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void MultiTexCoord4xvOES(this GL.OESExtension glInstance, TextureUnit texture, int[] coords)
        {
            fixed (int* coords_ptr = coords) // SpanOrArrayLayer
            {
                glInstance.MultiTexCoord4xvOES(texture, coords_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void MultiTexCoord4xvOES(this GL.OESExtension glInstance, TextureUnit texture, in int coords)
        {
            fixed (int* coords_ptr = &coords) // RefInsteadOfPointerLayer
            {
                glInstance.MultiTexCoord4xvOES(texture, coords_ptr);
            }
        }

        // Normal3xvOES overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void Normal3xvOES(this GL.OESExtension glInstance, ReadOnlySpan<int> coords)
        {
            fixed (int* coords_ptr = coords) // SpanOrArrayLayer
            {
                glInstance.Normal3xvOES(coords_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void Normal3xvOES(this GL.OESExtension glInstance, int[] coords)
        {
            fixed (int* coords_ptr = coords) // SpanOrArrayLayer
            {
                glInstance.Normal3xvOES(coords_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void Normal3xvOES(this GL.OESExtension glInstance, in int coords)
        {
            fixed (int* coords_ptr = &coords) // RefInsteadOfPointerLayer
            {
                glInstance.Normal3xvOES(coords_ptr);
            }
        }

        // PixelMapx overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void PixelMapx(this GL.OESExtension glInstance, PixelMap map, ReadOnlySpan<int> values)
        {
            var size = (int)(values.Length);
            fixed (int* values_ptr = values) // SpanOrArrayLayer
            {
                glInstance.PixelMapx(map, size, values_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void PixelMapx(this GL.OESExtension glInstance, PixelMap map, int[] values)
        {
            var size = (int)(values.Length);
            fixed (int* values_ptr = values) // SpanOrArrayLayer
            {
                glInstance.PixelMapx(map, size, values_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void PixelMapx(this GL.OESExtension glInstance, PixelMap map, int size, in int values)
        {
            fixed (int* values_ptr = &values) // RefInsteadOfPointerLayer
            {
                glInstance.PixelMapx(map, size, values_ptr);
            }
        }

        // PrioritizeTexturesxOES overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void PrioritizeTexturesxOES(this GL.OESExtension glInstance, int n, ReadOnlySpan<TextureHandle> textures, ReadOnlySpan<int> priorities)
        {
            fixed (TextureHandle* textures_ptr = textures) // SpanOrArrayLayer
            {
                fixed (int* priorities_ptr = priorities) // SpanOrArrayLayer
                {
                    glInstance.PrioritizeTexturesxOES(n, textures_ptr, priorities_ptr);
                }
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void PrioritizeTexturesxOES(this GL.OESExtension glInstance, int n, TextureHandle[] textures, int[] priorities)
        {
            fixed (TextureHandle* textures_ptr = textures) // SpanOrArrayLayer
            {
                fixed (int* priorities_ptr = priorities) // SpanOrArrayLayer
                {
                    glInstance.PrioritizeTexturesxOES(n, textures_ptr, priorities_ptr);
                }
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void PrioritizeTexturesxOES(this GL.OESExtension glInstance, int n, in TextureHandle textures, in int priorities)
        {
            fixed (TextureHandle* textures_ptr = &textures) // RefInsteadOfPointerLayer
            fixed (int* priorities_ptr = &priorities) // RefInsteadOfPointerLayer
            {
                glInstance.PrioritizeTexturesxOES(n, textures_ptr, priorities_ptr);
            }
        }

        // RasterPos2xvOES overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void RasterPos2xvOES(this GL.OESExtension glInstance, ReadOnlySpan<int> coords)
        {
            fixed (int* coords_ptr = coords) // SpanOrArrayLayer
            {
                glInstance.RasterPos2xvOES(coords_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void RasterPos2xvOES(this GL.OESExtension glInstance, int[] coords)
        {
            fixed (int* coords_ptr = coords) // SpanOrArrayLayer
            {
                glInstance.RasterPos2xvOES(coords_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void RasterPos2xvOES(this GL.OESExtension glInstance, in int coords)
        {
            fixed (int* coords_ptr = &coords) // RefInsteadOfPointerLayer
            {
                glInstance.RasterPos2xvOES(coords_ptr);
            }
        }

        // RasterPos3xvOES overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void RasterPos3xvOES(this GL.OESExtension glInstance, ReadOnlySpan<int> coords)
        {
            fixed (int* coords_ptr = coords) // SpanOrArrayLayer
            {
                glInstance.RasterPos3xvOES(coords_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void RasterPos3xvOES(this GL.OESExtension glInstance, int[] coords)
        {
            fixed (int* coords_ptr = coords) // SpanOrArrayLayer
            {
                glInstance.RasterPos3xvOES(coords_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void RasterPos3xvOES(this GL.OESExtension glInstance, in int coords)
        {
            fixed (int* coords_ptr = &coords) // RefInsteadOfPointerLayer
            {
                glInstance.RasterPos3xvOES(coords_ptr);
            }
        }

        // RasterPos4xvOES overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void RasterPos4xvOES(this GL.OESExtension glInstance, ReadOnlySpan<int> coords)
        {
            fixed (int* coords_ptr = coords) // SpanOrArrayLayer
            {
                glInstance.RasterPos4xvOES(coords_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void RasterPos4xvOES(this GL.OESExtension glInstance, int[] coords)
        {
            fixed (int* coords_ptr = coords) // SpanOrArrayLayer
            {
                glInstance.RasterPos4xvOES(coords_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void RasterPos4xvOES(this GL.OESExtension glInstance, in int coords)
        {
            fixed (int* coords_ptr = &coords) // RefInsteadOfPointerLayer
            {
                glInstance.RasterPos4xvOES(coords_ptr);
            }
        }

        // RectxvOES overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void RectxvOES(this GL.OESExtension glInstance, ReadOnlySpan<int> v1, ReadOnlySpan<int> v2)
        {
            fixed (int* v1_ptr = v1) // SpanOrArrayLayer
            {
                fixed (int* v2_ptr = v2) // SpanOrArrayLayer
                {
                    glInstance.RectxvOES(v1_ptr, v2_ptr);
                }
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void RectxvOES(this GL.OESExtension glInstance, int[] v1, int[] v2)
        {
            fixed (int* v1_ptr = v1) // SpanOrArrayLayer
            {
                fixed (int* v2_ptr = v2) // SpanOrArrayLayer
                {
                    glInstance.RectxvOES(v1_ptr, v2_ptr);
                }
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void RectxvOES(this GL.OESExtension glInstance, in int v1, in int v2)
        {
            fixed (int* v1_ptr = &v1) // RefInsteadOfPointerLayer
            fixed (int* v2_ptr = &v2) // RefInsteadOfPointerLayer
            {
                glInstance.RectxvOES(v1_ptr, v2_ptr);
            }
        }

        // TexCoord1xvOES overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void TexCoord1xvOES(this GL.OESExtension glInstance, ReadOnlySpan<int> coords)
        {
            fixed (int* coords_ptr = coords) // SpanOrArrayLayer
            {
                glInstance.TexCoord1xvOES(coords_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void TexCoord1xvOES(this GL.OESExtension glInstance, int[] coords)
        {
            fixed (int* coords_ptr = coords) // SpanOrArrayLayer
            {
                glInstance.TexCoord1xvOES(coords_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void TexCoord1xvOES(this GL.OESExtension glInstance, in int coords)
        {
            fixed (int* coords_ptr = &coords) // RefInsteadOfPointerLayer
            {
                glInstance.TexCoord1xvOES(coords_ptr);
            }
        }

        // TexCoord2xvOES overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void TexCoord2xvOES(this GL.OESExtension glInstance, ReadOnlySpan<int> coords)
        {
            fixed (int* coords_ptr = coords) // SpanOrArrayLayer
            {
                glInstance.TexCoord2xvOES(coords_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void TexCoord2xvOES(this GL.OESExtension glInstance, int[] coords)
        {
            fixed (int* coords_ptr = coords) // SpanOrArrayLayer
            {
                glInstance.TexCoord2xvOES(coords_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void TexCoord2xvOES(this GL.OESExtension glInstance, in int coords)
        {
            fixed (int* coords_ptr = &coords) // RefInsteadOfPointerLayer
            {
                glInstance.TexCoord2xvOES(coords_ptr);
            }
        }

        // TexCoord3xvOES overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void TexCoord3xvOES(this GL.OESExtension glInstance, ReadOnlySpan<int> coords)
        {
            fixed (int* coords_ptr = coords) // SpanOrArrayLayer
            {
                glInstance.TexCoord3xvOES(coords_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void TexCoord3xvOES(this GL.OESExtension glInstance, int[] coords)
        {
            fixed (int* coords_ptr = coords) // SpanOrArrayLayer
            {
                glInstance.TexCoord3xvOES(coords_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void TexCoord3xvOES(this GL.OESExtension glInstance, in int coords)
        {
            fixed (int* coords_ptr = &coords) // RefInsteadOfPointerLayer
            {
                glInstance.TexCoord3xvOES(coords_ptr);
            }
        }

        // TexCoord4xvOES overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void TexCoord4xvOES(this GL.OESExtension glInstance, ReadOnlySpan<int> coords)
        {
            fixed (int* coords_ptr = coords) // SpanOrArrayLayer
            {
                glInstance.TexCoord4xvOES(coords_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void TexCoord4xvOES(this GL.OESExtension glInstance, int[] coords)
        {
            fixed (int* coords_ptr = coords) // SpanOrArrayLayer
            {
                glInstance.TexCoord4xvOES(coords_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void TexCoord4xvOES(this GL.OESExtension glInstance, in int coords)
        {
            fixed (int* coords_ptr = &coords) // RefInsteadOfPointerLayer
            {
                glInstance.TexCoord4xvOES(coords_ptr);
            }
        }

        // TexGenxvOES overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void TexGenxvOES(this GL.OESExtension glInstance, TextureCoordName coord, TextureGenParameter pname, ReadOnlySpan<int> parameters)
        {
            fixed (int* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.TexGenxvOES(coord, pname, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void TexGenxvOES(this GL.OESExtension glInstance, TextureCoordName coord, TextureGenParameter pname, int[] parameters)
        {
            fixed (int* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.TexGenxvOES(coord, pname, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void TexGenxvOES(this GL.OESExtension glInstance, TextureCoordName coord, TextureGenParameter pname, in int parameters)
        {
            fixed (int* parameters_ptr = &parameters) // RefInsteadOfPointerLayer
            {
                glInstance.TexGenxvOES(coord, pname, parameters_ptr);
            }
        }

        // Vertex2xvOES overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void Vertex2xvOES(this GL.OESExtension glInstance, ReadOnlySpan<int> coords)
        {
            fixed (int* coords_ptr = coords) // SpanOrArrayLayer
            {
                glInstance.Vertex2xvOES(coords_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void Vertex2xvOES(this GL.OESExtension glInstance, int[] coords)
        {
            fixed (int* coords_ptr = coords) // SpanOrArrayLayer
            {
                glInstance.Vertex2xvOES(coords_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void Vertex2xvOES(this GL.OESExtension glInstance, in int coords)
        {
            fixed (int* coords_ptr = &coords) // RefInsteadOfPointerLayer
            {
                glInstance.Vertex2xvOES(coords_ptr);
            }
        }

        // Vertex3xvOES overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void Vertex3xvOES(this GL.OESExtension glInstance, ReadOnlySpan<int> coords)
        {
            fixed (int* coords_ptr = coords) // SpanOrArrayLayer
            {
                glInstance.Vertex3xvOES(coords_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void Vertex3xvOES(this GL.OESExtension glInstance, int[] coords)
        {
            fixed (int* coords_ptr = coords) // SpanOrArrayLayer
            {
                glInstance.Vertex3xvOES(coords_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void Vertex3xvOES(this GL.OESExtension glInstance, in int coords)
        {
            fixed (int* coords_ptr = &coords) // RefInsteadOfPointerLayer
            {
                glInstance.Vertex3xvOES(coords_ptr);
            }
        }

        // Vertex4xvOES overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void Vertex4xvOES(this GL.OESExtension glInstance, ReadOnlySpan<int> coords)
        {
            fixed (int* coords_ptr = coords) // SpanOrArrayLayer
            {
                glInstance.Vertex4xvOES(coords_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void Vertex4xvOES(this GL.OESExtension glInstance, int[] coords)
        {
            fixed (int* coords_ptr = coords) // SpanOrArrayLayer
            {
                glInstance.Vertex4xvOES(coords_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void Vertex4xvOES(this GL.OESExtension glInstance, in int coords)
        {
            fixed (int* coords_ptr = &coords) // RefInsteadOfPointerLayer
            {
                glInstance.Vertex4xvOES(coords_ptr);
            }
        }

        // QueryMatrixxOES overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe GLEnum QueryMatrixxOES(this GL.OESExtension glInstance, Span<int> mantissa, Span<int> exponent)
        {
            GLEnum returnValue;
            fixed (int* mantissa_ptr = mantissa) // SpanOrArrayLayer
            {
                fixed (int* exponent_ptr = exponent) // SpanOrArrayLayer
                {
                    returnValue = glInstance.QueryMatrixxOES(mantissa_ptr, exponent_ptr);
                }
            }
            return returnValue;
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe GLEnum QueryMatrixxOES(this GL.OESExtension glInstance, int[] mantissa, int[] exponent)
        {
            GLEnum returnValue;
            fixed (int* mantissa_ptr = mantissa) // SpanOrArrayLayer
            {
                fixed (int* exponent_ptr = exponent) // SpanOrArrayLayer
                {
                    returnValue = glInstance.QueryMatrixxOES(mantissa_ptr, exponent_ptr);
                }
            }
            return returnValue;
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe GLEnum QueryMatrixxOES(this GL.OESExtension glInstance, ref int mantissa, ref int exponent)
        {
            GLEnum returnValue;
            fixed (int* mantissa_ptr = &mantissa) // RefInsteadOfPointerLayer
            fixed (int* exponent_ptr = &exponent) // RefInsteadOfPointerLayer
            {
                returnValue = glInstance.QueryMatrixxOES(mantissa_ptr, exponent_ptr);
            }
            return returnValue;
        }

        // ClipPlanefOES overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void ClipPlanefOES(this GL.OESExtension glInstance, ClipPlaneName plane, ReadOnlySpan<float> equation)
        {
            fixed (float* equation_ptr = equation) // SpanOrArrayLayer
            {
                glInstance.ClipPlanefOES(plane, equation_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void ClipPlanefOES(this GL.OESExtension glInstance, ClipPlaneName plane, float[] equation)
        {
            fixed (float* equation_ptr = equation) // SpanOrArrayLayer
            {
                glInstance.ClipPlanefOES(plane, equation_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void ClipPlanefOES(this GL.OESExtension glInstance, ClipPlaneName plane, in float equation)
        {
            fixed (float* equation_ptr = &equation) // RefInsteadOfPointerLayer
            {
                glInstance.ClipPlanefOES(plane, equation_ptr);
            }
        }

        // GetClipPlanefOES overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetClipPlanefOES(this GL.OESExtension glInstance, ClipPlaneName plane, Span<float> equation)
        {
            fixed (float* equation_ptr = equation) // SpanOrArrayLayer
            {
                glInstance.GetClipPlanefOES(plane, equation_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetClipPlanefOES(this GL.OESExtension glInstance, ClipPlaneName plane, float[] equation)
        {
            fixed (float* equation_ptr = equation) // SpanOrArrayLayer
            {
                glInstance.GetClipPlanefOES(plane, equation_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void GetClipPlanefOES(this GL.OESExtension glInstance, ClipPlaneName plane, ref float equation)
        {
            fixed (float* equation_ptr = &equation) // RefInsteadOfPointerLayer
            {
                glInstance.GetClipPlanefOES(plane, equation_ptr);
            }
        }
    }

#pragma warning restore IDE1006 // Naming Styles
}
