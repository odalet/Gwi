// This file is auto generated, do not edit.
using System;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;

namespace Gwi.OpenGL.GL4
{
#pragma warning disable IDE1006 // Naming Styles

    public static class KHROverloads
    {
        // DebugMessageControl overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void DebugMessageControl(this GL.KHRExtension glInstance, DebugSource source, DebugType type, DebugSeverity severity, ReadOnlySpan<uint> ids, bool enabled)
        {
            var count = (int)(ids.Length);
            fixed (uint* ids_ptr = ids) // SpanOrArrayLayer
            {
                var enabled_byte = (byte)(enabled ? 1 : 0);
                glInstance.DebugMessageControl(source, type, severity, count, ids_ptr, enabled_byte);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void DebugMessageControl(this GL.KHRExtension glInstance, DebugSource source, DebugType type, DebugSeverity severity, uint[] ids, bool enabled)
        {
            var count = (int)(ids.Length);
            fixed (uint* ids_ptr = ids) // SpanOrArrayLayer
            {
                var enabled_byte = (byte)(enabled ? 1 : 0);
                glInstance.DebugMessageControl(source, type, severity, count, ids_ptr, enabled_byte);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void DebugMessageControl(this GL.KHRExtension glInstance, DebugSource source, DebugType type, DebugSeverity severity, int count, in uint ids, bool enabled)
        {
            fixed (uint* ids_ptr = &ids) // RefInsteadOfPointerLayer
            {
                var enabled_byte = (byte)(enabled ? 1 : 0);
                glInstance.DebugMessageControl(source, type, severity, count, ids_ptr, enabled_byte);
            }
        }

        // DebugMessageInsert overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.Transformer
        public static unsafe void DebugMessageInsert(this GL.KHRExtension glInstance, DebugSource source, DebugType type, uint id, DebugSeverity severity, int length, string buf)
        {
            byte* buf_ptr = (byte*)Marshal.StringToCoTaskMemUTF8(buf);
            glInstance.DebugMessageInsert(source, type, id, severity, length, buf_ptr);
            Marshal.FreeCoTaskMem((IntPtr)buf_ptr);
        }

        // DebugMessageCallback overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.VoidPtrToIntPtrOverloader
        public static unsafe void DebugMessageCallback(this GL.KHRExtension glInstance, GLDebugProc callback, IntPtr userParam)
        {
            var userParam_vptr = (void*)userParam;
            IntPtr callback_ptr = Marshal.GetFunctionPointerForDelegate(callback);
            glInstance.DebugMessageCallback(callback_ptr, userParam_vptr);
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void DebugMessageCallback<T1>(this GL.KHRExtension glInstance, GLDebugProc callback, in T1 userParam)
            where T1 : unmanaged
        {
            fixed (void* userParam_ptr = &userParam) // RefInsteadOfPointerLayer
            {
                IntPtr callback_ptr = Marshal.GetFunctionPointerForDelegate(callback);
                glInstance.DebugMessageCallback(callback_ptr, userParam_ptr);
            }
        }

        // GetDebugMessageLog overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe uint GetDebugMessageLog(this GL.KHRExtension glInstance, uint count, int bufSize, Span<DebugSource> sources, Span<DebugType> types, Span<uint> ids, Span<DebugSeverity> severities, Span<int> lengths, out string messageLog)
        {
            uint returnValue;
            fixed (DebugSource* sources_ptr = sources) // SpanOrArrayLayer
            {
                fixed (DebugType* types_ptr = types) // SpanOrArrayLayer
                {
                    fixed (uint* ids_ptr = ids) // SpanOrArrayLayer
                    {
                        fixed (DebugSeverity* severities_ptr = severities) // SpanOrArrayLayer
                        {
                            fixed (int* lengths_ptr = lengths) // SpanOrArrayLayer
                            {
                                var messageLog_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                                returnValue = glInstance.GetDebugMessageLog(count, bufSize, sources_ptr, types_ptr, ids_ptr, severities_ptr, lengths_ptr, messageLog_ptr);
                                messageLog = Marshal.PtrToStringUTF8((IntPtr)messageLog_ptr)!;
                                Marshal.FreeCoTaskMem((IntPtr)messageLog_ptr);
                            }
                        }
                    }
                }
            }
            return returnValue;
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe uint GetDebugMessageLog(this GL.KHRExtension glInstance, uint count, int bufSize, DebugSource[] sources, DebugType[] types, uint[] ids, DebugSeverity[] severities, int[] lengths, out string messageLog)
        {
            uint returnValue;
            fixed (DebugSource* sources_ptr = sources) // SpanOrArrayLayer
            {
                fixed (DebugType* types_ptr = types) // SpanOrArrayLayer
                {
                    fixed (uint* ids_ptr = ids) // SpanOrArrayLayer
                    {
                        fixed (DebugSeverity* severities_ptr = severities) // SpanOrArrayLayer
                        {
                            fixed (int* lengths_ptr = lengths) // SpanOrArrayLayer
                            {
                                var messageLog_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                                returnValue = glInstance.GetDebugMessageLog(count, bufSize, sources_ptr, types_ptr, ids_ptr, severities_ptr, lengths_ptr, messageLog_ptr);
                                messageLog = Marshal.PtrToStringUTF8((IntPtr)messageLog_ptr)!;
                                Marshal.FreeCoTaskMem((IntPtr)messageLog_ptr);
                            }
                        }
                    }
                }
            }
            return returnValue;
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe uint GetDebugMessageLog(this GL.KHRExtension glInstance, uint count, int bufSize, ref DebugSource sources, ref DebugType types, ref uint ids, ref DebugSeverity severities, ref int lengths, out string messageLog)
        {
            uint returnValue;
            fixed (DebugSource* sources_ptr = &sources) // RefInsteadOfPointerLayer
            fixed (DebugType* types_ptr = &types) // RefInsteadOfPointerLayer
            fixed (uint* ids_ptr = &ids) // RefInsteadOfPointerLayer
            fixed (DebugSeverity* severities_ptr = &severities) // RefInsteadOfPointerLayer
            fixed (int* lengths_ptr = &lengths) // RefInsteadOfPointerLayer
            {
                var messageLog_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                returnValue = glInstance.GetDebugMessageLog(count, bufSize, sources_ptr, types_ptr, ids_ptr, severities_ptr, lengths_ptr, messageLog_ptr);
                messageLog = Marshal.PtrToStringUTF8((IntPtr)messageLog_ptr)!;
                Marshal.FreeCoTaskMem((IntPtr)messageLog_ptr);
            }
            return returnValue;
        }

        // PushDebugGroup overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.Transformer
        public static unsafe void PushDebugGroup(this GL.KHRExtension glInstance, DebugSource source, uint id, int length, string message)
        {
            byte* message_ptr = (byte*)Marshal.StringToCoTaskMemUTF8(message);
            glInstance.PushDebugGroup(source, id, length, message_ptr);
            Marshal.FreeCoTaskMem((IntPtr)message_ptr);
        }

        // ObjectLabel overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.Transformer
        public static unsafe void ObjectLabel(this GL.KHRExtension glInstance, ObjectIdentifier identifier, uint name, int length, string label)
        {
            byte* label_ptr = (byte*)Marshal.StringToCoTaskMemUTF8(label);
            glInstance.ObjectLabel(identifier, name, length, label_ptr);
            Marshal.FreeCoTaskMem((IntPtr)label_ptr);
        }

        // GetObjectLabel overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.OutToReturnOverloader
        public static unsafe string GetObjectLabel(this GL.KHRExtension glInstance, ObjectIdentifier identifier, uint name, int bufSize, Span<int> length)
        {
            string label;
            fixed (int* length_ptr = length) // SpanOrArrayLayer
            {
                var label_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                glInstance.GetObjectLabel(identifier, name, bufSize, length_ptr, label_ptr);
                label = Marshal.PtrToStringUTF8((IntPtr)label_ptr)!;
                Marshal.FreeCoTaskMem((IntPtr)label_ptr);
            }
            return label;
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetObjectLabel(this GL.KHRExtension glInstance, ObjectIdentifier identifier, uint name, int bufSize, Span<int> length, out string label)
        {
            fixed (int* length_ptr = length) // SpanOrArrayLayer
            {
                var label_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                glInstance.GetObjectLabel(identifier, name, bufSize, length_ptr, label_ptr);
                label = Marshal.PtrToStringUTF8((IntPtr)label_ptr)!;
                Marshal.FreeCoTaskMem((IntPtr)label_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.OutToReturnOverloader
        public static unsafe string GetObjectLabel(this GL.KHRExtension glInstance, ObjectIdentifier identifier, uint name, int bufSize, int[] length)
        {
            string label;
            fixed (int* length_ptr = length) // SpanOrArrayLayer
            {
                var label_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                glInstance.GetObjectLabel(identifier, name, bufSize, length_ptr, label_ptr);
                label = Marshal.PtrToStringUTF8((IntPtr)label_ptr)!;
                Marshal.FreeCoTaskMem((IntPtr)label_ptr);
            }
            return label;
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetObjectLabel(this GL.KHRExtension glInstance, ObjectIdentifier identifier, uint name, int bufSize, int[] length, out string label)
        {
            fixed (int* length_ptr = length) // SpanOrArrayLayer
            {
                var label_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                glInstance.GetObjectLabel(identifier, name, bufSize, length_ptr, label_ptr);
                label = Marshal.PtrToStringUTF8((IntPtr)label_ptr)!;
                Marshal.FreeCoTaskMem((IntPtr)label_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.OutToReturnOverloader
        public static unsafe string GetObjectLabel(this GL.KHRExtension glInstance, ObjectIdentifier identifier, uint name, int bufSize, ref int length)
        {
            string label;
            fixed (int* length_ptr = &length) // RefInsteadOfPointerLayer
            {
                var label_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                glInstance.GetObjectLabel(identifier, name, bufSize, length_ptr, label_ptr);
                label = Marshal.PtrToStringUTF8((IntPtr)label_ptr)!;
                Marshal.FreeCoTaskMem((IntPtr)label_ptr);
            }
            return label;
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void GetObjectLabel(this GL.KHRExtension glInstance, ObjectIdentifier identifier, uint name, int bufSize, ref int length, out string label)
        {
            fixed (int* length_ptr = &length) // RefInsteadOfPointerLayer
            {
                var label_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                glInstance.GetObjectLabel(identifier, name, bufSize, length_ptr, label_ptr);
                label = Marshal.PtrToStringUTF8((IntPtr)label_ptr)!;
                Marshal.FreeCoTaskMem((IntPtr)label_ptr);
            }
        }

        // ObjectPtrLabel overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.VoidPtrToIntPtrOverloader
        public static unsafe void ObjectPtrLabel(this GL.KHRExtension glInstance, IntPtr ptr, int length, string label)
        {
            byte* label_ptr = (byte*)Marshal.StringToCoTaskMemUTF8(label);
            var ptr_vptr = (void*)ptr;
            glInstance.ObjectPtrLabel(ptr_vptr, length, label_ptr);
            Marshal.FreeCoTaskMem((IntPtr)label_ptr);
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void ObjectPtrLabel<T1>(this GL.KHRExtension glInstance, in T1 ptr, int length, string label)
            where T1 : unmanaged
        {
            fixed (void* ptr_ptr = &ptr) // RefInsteadOfPointerLayer
            {
                byte* label_ptr = (byte*)Marshal.StringToCoTaskMemUTF8(label);
                glInstance.ObjectPtrLabel(ptr_ptr, length, label_ptr);
                Marshal.FreeCoTaskMem((IntPtr)label_ptr);
            }
        }

        // GetObjectPtrLabel overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.OutToReturnOverloader
        public static unsafe string GetObjectPtrLabel(this GL.KHRExtension glInstance, IntPtr ptr, int bufSize, Span<int> length)
        {
            string label;
            fixed (int* length_ptr = length) // SpanOrArrayLayer
            {
                var label_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                var ptr_vptr = (void*)ptr;
                glInstance.GetObjectPtrLabel(ptr_vptr, bufSize, length_ptr, label_ptr);
                label = Marshal.PtrToStringUTF8((IntPtr)label_ptr)!;
                Marshal.FreeCoTaskMem((IntPtr)label_ptr);
            }
            return label;
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetObjectPtrLabel(this GL.KHRExtension glInstance, IntPtr ptr, int bufSize, Span<int> length, out string label)
        {
            fixed (int* length_ptr = length) // SpanOrArrayLayer
            {
                var label_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                var ptr_vptr = (void*)ptr;
                glInstance.GetObjectPtrLabel(ptr_vptr, bufSize, length_ptr, label_ptr);
                label = Marshal.PtrToStringUTF8((IntPtr)label_ptr)!;
                Marshal.FreeCoTaskMem((IntPtr)label_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.OutToReturnOverloader
        public static unsafe string GetObjectPtrLabel(this GL.KHRExtension glInstance, IntPtr ptr, int bufSize, int[] length)
        {
            string label;
            fixed (int* length_ptr = length) // SpanOrArrayLayer
            {
                var label_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                var ptr_vptr = (void*)ptr;
                glInstance.GetObjectPtrLabel(ptr_vptr, bufSize, length_ptr, label_ptr);
                label = Marshal.PtrToStringUTF8((IntPtr)label_ptr)!;
                Marshal.FreeCoTaskMem((IntPtr)label_ptr);
            }
            return label;
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetObjectPtrLabel(this GL.KHRExtension glInstance, IntPtr ptr, int bufSize, int[] length, out string label)
        {
            fixed (int* length_ptr = length) // SpanOrArrayLayer
            {
                var label_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                var ptr_vptr = (void*)ptr;
                glInstance.GetObjectPtrLabel(ptr_vptr, bufSize, length_ptr, label_ptr);
                label = Marshal.PtrToStringUTF8((IntPtr)label_ptr)!;
                Marshal.FreeCoTaskMem((IntPtr)label_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.OutToReturnOverloader
        public static unsafe string GetObjectPtrLabel(this GL.KHRExtension glInstance, IntPtr ptr, int bufSize, ref int length)
        {
            string label;
            fixed (int* length_ptr = &length) // RefInsteadOfPointerLayer
            {
                var label_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                var ptr_vptr = (void*)ptr;
                glInstance.GetObjectPtrLabel(ptr_vptr, bufSize, length_ptr, label_ptr);
                label = Marshal.PtrToStringUTF8((IntPtr)label_ptr)!;
                Marshal.FreeCoTaskMem((IntPtr)label_ptr);
            }
            return label;
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void GetObjectPtrLabel(this GL.KHRExtension glInstance, IntPtr ptr, int bufSize, ref int length, out string label)
        {
            fixed (int* length_ptr = &length) // RefInsteadOfPointerLayer
            {
                var label_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                var ptr_vptr = (void*)ptr;
                glInstance.GetObjectPtrLabel(ptr_vptr, bufSize, length_ptr, label_ptr);
                label = Marshal.PtrToStringUTF8((IntPtr)label_ptr)!;
                Marshal.FreeCoTaskMem((IntPtr)label_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.OutToReturnOverloader
        public static unsafe string GetObjectPtrLabel<T1>(this GL.KHRExtension glInstance, in T1 ptr, int bufSize, Span<int> length)
            where T1 : unmanaged
        {
            string label;
            fixed (void* ptr_ptr = &ptr) // RefInsteadOfPointerLayer
            {
                fixed (int* length_ptr = length) // SpanOrArrayLayer
                {
                    var label_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                    glInstance.GetObjectPtrLabel(ptr_ptr, bufSize, length_ptr, label_ptr);
                    label = Marshal.PtrToStringUTF8((IntPtr)label_ptr)!;
                    Marshal.FreeCoTaskMem((IntPtr)label_ptr);
                }
            }
            return label;
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void GetObjectPtrLabel<T1>(this GL.KHRExtension glInstance, in T1 ptr, int bufSize, Span<int> length, out string label)
            where T1 : unmanaged
        {
            fixed (void* ptr_ptr = &ptr) // RefInsteadOfPointerLayer
            {
                fixed (int* length_ptr = length) // SpanOrArrayLayer
                {
                    var label_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                    glInstance.GetObjectPtrLabel(ptr_ptr, bufSize, length_ptr, label_ptr);
                    label = Marshal.PtrToStringUTF8((IntPtr)label_ptr)!;
                    Marshal.FreeCoTaskMem((IntPtr)label_ptr);
                }
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.OutToReturnOverloader
        public static unsafe string GetObjectPtrLabel<T1>(this GL.KHRExtension glInstance, in T1 ptr, int bufSize, int[] length)
            where T1 : unmanaged
        {
            string label;
            fixed (void* ptr_ptr = &ptr) // RefInsteadOfPointerLayer
            {
                fixed (int* length_ptr = length) // SpanOrArrayLayer
                {
                    var label_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                    glInstance.GetObjectPtrLabel(ptr_ptr, bufSize, length_ptr, label_ptr);
                    label = Marshal.PtrToStringUTF8((IntPtr)label_ptr)!;
                    Marshal.FreeCoTaskMem((IntPtr)label_ptr);
                }
            }
            return label;
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void GetObjectPtrLabel<T1>(this GL.KHRExtension glInstance, in T1 ptr, int bufSize, int[] length, out string label)
            where T1 : unmanaged
        {
            fixed (void* ptr_ptr = &ptr) // RefInsteadOfPointerLayer
            {
                fixed (int* length_ptr = length) // SpanOrArrayLayer
                {
                    var label_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                    glInstance.GetObjectPtrLabel(ptr_ptr, bufSize, length_ptr, label_ptr);
                    label = Marshal.PtrToStringUTF8((IntPtr)label_ptr)!;
                    Marshal.FreeCoTaskMem((IntPtr)label_ptr);
                }
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.OutToReturnOverloader
        public static unsafe string GetObjectPtrLabel<T1>(this GL.KHRExtension glInstance, in T1 ptr, int bufSize, ref int length)
            where T1 : unmanaged
        {
            string label;
            fixed (void* ptr_ptr = &ptr) // RefInsteadOfPointerLayer
            fixed (int* length_ptr = &length) // RefInsteadOfPointerLayer
            {
                var label_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                glInstance.GetObjectPtrLabel(ptr_ptr, bufSize, length_ptr, label_ptr);
                label = Marshal.PtrToStringUTF8((IntPtr)label_ptr)!;
                Marshal.FreeCoTaskMem((IntPtr)label_ptr);
            }
            return label;
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void GetObjectPtrLabel<T1>(this GL.KHRExtension glInstance, in T1 ptr, int bufSize, ref int length, out string label)
            where T1 : unmanaged
        {
            fixed (void* ptr_ptr = &ptr) // RefInsteadOfPointerLayer
            fixed (int* length_ptr = &length) // RefInsteadOfPointerLayer
            {
                var label_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                glInstance.GetObjectPtrLabel(ptr_ptr, bufSize, length_ptr, label_ptr);
                label = Marshal.PtrToStringUTF8((IntPtr)label_ptr)!;
                Marshal.FreeCoTaskMem((IntPtr)label_ptr);
            }
        }

        // DebugMessageControlKHR overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void DebugMessageControlKHR(this GL.KHRExtension glInstance, DebugSource source, DebugType type, DebugSeverity severity, int count, in uint ids, bool enabled)
        {
            fixed (uint* ids_ptr = &ids) // RefInsteadOfPointerLayer
            {
                var enabled_byte = (byte)(enabled ? 1 : 0);
                glInstance.DebugMessageControlKHR(source, type, severity, count, ids_ptr, enabled_byte);
            }
        }

        // DebugMessageInsertKHR overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.Transformer
        public static unsafe void DebugMessageInsertKHR(this GL.KHRExtension glInstance, DebugSource source, DebugType type, uint id, DebugSeverity severity, int length, string buf)
        {
            byte* buf_ptr = (byte*)Marshal.StringToCoTaskMemUTF8(buf);
            glInstance.DebugMessageInsertKHR(source, type, id, severity, length, buf_ptr);
            Marshal.FreeCoTaskMem((IntPtr)buf_ptr);
        }

        // DebugMessageCallbackKHR overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.VoidPtrToIntPtrOverloader
        public static unsafe void DebugMessageCallbackKHR(this GL.KHRExtension glInstance, GLDebugProcKHR callback, IntPtr userParam)
        {
            var userParam_vptr = (void*)userParam;
            IntPtr callback_ptr = Marshal.GetFunctionPointerForDelegate(callback);
            glInstance.DebugMessageCallbackKHR(callback_ptr, userParam_vptr);
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void DebugMessageCallbackKHR<T1>(this GL.KHRExtension glInstance, GLDebugProcKHR callback, in T1 userParam)
            where T1 : unmanaged
        {
            fixed (void* userParam_ptr = &userParam) // RefInsteadOfPointerLayer
            {
                IntPtr callback_ptr = Marshal.GetFunctionPointerForDelegate(callback);
                glInstance.DebugMessageCallbackKHR(callback_ptr, userParam_ptr);
            }
        }

        // GetDebugMessageLogKHR overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe uint GetDebugMessageLogKHR(this GL.KHRExtension glInstance, uint count, int bufSize, Span<DebugSource> sources, Span<DebugType> types, Span<uint> ids, Span<DebugSeverity> severities, Span<int> lengths, out string messageLog)
        {
            uint returnValue;
            fixed (DebugSource* sources_ptr = sources) // SpanOrArrayLayer
            {
                fixed (DebugType* types_ptr = types) // SpanOrArrayLayer
                {
                    fixed (uint* ids_ptr = ids) // SpanOrArrayLayer
                    {
                        fixed (DebugSeverity* severities_ptr = severities) // SpanOrArrayLayer
                        {
                            fixed (int* lengths_ptr = lengths) // SpanOrArrayLayer
                            {
                                var messageLog_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                                returnValue = glInstance.GetDebugMessageLogKHR(count, bufSize, sources_ptr, types_ptr, ids_ptr, severities_ptr, lengths_ptr, messageLog_ptr);
                                messageLog = Marshal.PtrToStringUTF8((IntPtr)messageLog_ptr)!;
                                Marshal.FreeCoTaskMem((IntPtr)messageLog_ptr);
                            }
                        }
                    }
                }
            }
            return returnValue;
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe uint GetDebugMessageLogKHR(this GL.KHRExtension glInstance, uint count, int bufSize, DebugSource[] sources, DebugType[] types, uint[] ids, DebugSeverity[] severities, int[] lengths, out string messageLog)
        {
            uint returnValue;
            fixed (DebugSource* sources_ptr = sources) // SpanOrArrayLayer
            {
                fixed (DebugType* types_ptr = types) // SpanOrArrayLayer
                {
                    fixed (uint* ids_ptr = ids) // SpanOrArrayLayer
                    {
                        fixed (DebugSeverity* severities_ptr = severities) // SpanOrArrayLayer
                        {
                            fixed (int* lengths_ptr = lengths) // SpanOrArrayLayer
                            {
                                var messageLog_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                                returnValue = glInstance.GetDebugMessageLogKHR(count, bufSize, sources_ptr, types_ptr, ids_ptr, severities_ptr, lengths_ptr, messageLog_ptr);
                                messageLog = Marshal.PtrToStringUTF8((IntPtr)messageLog_ptr)!;
                                Marshal.FreeCoTaskMem((IntPtr)messageLog_ptr);
                            }
                        }
                    }
                }
            }
            return returnValue;
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe uint GetDebugMessageLogKHR(this GL.KHRExtension glInstance, uint count, int bufSize, ref DebugSource sources, ref DebugType types, ref uint ids, ref DebugSeverity severities, ref int lengths, out string messageLog)
        {
            uint returnValue;
            fixed (DebugSource* sources_ptr = &sources) // RefInsteadOfPointerLayer
            fixed (DebugType* types_ptr = &types) // RefInsteadOfPointerLayer
            fixed (uint* ids_ptr = &ids) // RefInsteadOfPointerLayer
            fixed (DebugSeverity* severities_ptr = &severities) // RefInsteadOfPointerLayer
            fixed (int* lengths_ptr = &lengths) // RefInsteadOfPointerLayer
            {
                var messageLog_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                returnValue = glInstance.GetDebugMessageLogKHR(count, bufSize, sources_ptr, types_ptr, ids_ptr, severities_ptr, lengths_ptr, messageLog_ptr);
                messageLog = Marshal.PtrToStringUTF8((IntPtr)messageLog_ptr)!;
                Marshal.FreeCoTaskMem((IntPtr)messageLog_ptr);
            }
            return returnValue;
        }

        // PushDebugGroupKHR overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.Transformer
        public static unsafe void PushDebugGroupKHR(this GL.KHRExtension glInstance, DebugSource source, uint id, int length, string message)
        {
            byte* message_ptr = (byte*)Marshal.StringToCoTaskMemUTF8(message);
            glInstance.PushDebugGroupKHR(source, id, length, message_ptr);
            Marshal.FreeCoTaskMem((IntPtr)message_ptr);
        }

        // ObjectLabelKHR overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.Transformer
        public static unsafe void ObjectLabelKHR(this GL.KHRExtension glInstance, ObjectIdentifier identifier, uint name, int length, string label)
        {
            byte* label_ptr = (byte*)Marshal.StringToCoTaskMemUTF8(label);
            glInstance.ObjectLabelKHR(identifier, name, length, label_ptr);
            Marshal.FreeCoTaskMem((IntPtr)label_ptr);
        }

        // GetObjectLabelKHR overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.OutToReturnOverloader
        public static unsafe string GetObjectLabelKHR(this GL.KHRExtension glInstance, GLEnum identifier, uint name, int bufSize, ref int length)
        {
            string label;
            fixed (int* length_ptr = &length) // RefInsteadOfPointerLayer
            {
                var label_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                glInstance.GetObjectLabelKHR(identifier, name, bufSize, length_ptr, label_ptr);
                label = Marshal.PtrToStringUTF8((IntPtr)label_ptr)!;
                Marshal.FreeCoTaskMem((IntPtr)label_ptr);
            }
            return label;
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void GetObjectLabelKHR(this GL.KHRExtension glInstance, GLEnum identifier, uint name, int bufSize, ref int length, out string label)
        {
            fixed (int* length_ptr = &length) // RefInsteadOfPointerLayer
            {
                var label_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                glInstance.GetObjectLabelKHR(identifier, name, bufSize, length_ptr, label_ptr);
                label = Marshal.PtrToStringUTF8((IntPtr)label_ptr)!;
                Marshal.FreeCoTaskMem((IntPtr)label_ptr);
            }
        }

        // ObjectPtrLabelKHR overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.VoidPtrToIntPtrOverloader
        public static unsafe void ObjectPtrLabelKHR(this GL.KHRExtension glInstance, IntPtr ptr, int length, string label)
        {
            byte* label_ptr = (byte*)Marshal.StringToCoTaskMemUTF8(label);
            var ptr_vptr = (void*)ptr;
            glInstance.ObjectPtrLabelKHR(ptr_vptr, length, label_ptr);
            Marshal.FreeCoTaskMem((IntPtr)label_ptr);
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void ObjectPtrLabelKHR<T1>(this GL.KHRExtension glInstance, in T1 ptr, int length, string label)
            where T1 : unmanaged
        {
            fixed (void* ptr_ptr = &ptr) // RefInsteadOfPointerLayer
            {
                byte* label_ptr = (byte*)Marshal.StringToCoTaskMemUTF8(label);
                glInstance.ObjectPtrLabelKHR(ptr_ptr, length, label_ptr);
                Marshal.FreeCoTaskMem((IntPtr)label_ptr);
            }
        }

        // GetObjectPtrLabelKHR overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.OutToReturnOverloader
        public static unsafe string GetObjectPtrLabelKHR(this GL.KHRExtension glInstance, IntPtr ptr, int bufSize, Span<int> length)
        {
            string label;
            fixed (int* length_ptr = length) // SpanOrArrayLayer
            {
                var label_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                var ptr_vptr = (void*)ptr;
                glInstance.GetObjectPtrLabelKHR(ptr_vptr, bufSize, length_ptr, label_ptr);
                label = Marshal.PtrToStringUTF8((IntPtr)label_ptr)!;
                Marshal.FreeCoTaskMem((IntPtr)label_ptr);
            }
            return label;
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetObjectPtrLabelKHR(this GL.KHRExtension glInstance, IntPtr ptr, int bufSize, Span<int> length, out string label)
        {
            fixed (int* length_ptr = length) // SpanOrArrayLayer
            {
                var label_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                var ptr_vptr = (void*)ptr;
                glInstance.GetObjectPtrLabelKHR(ptr_vptr, bufSize, length_ptr, label_ptr);
                label = Marshal.PtrToStringUTF8((IntPtr)label_ptr)!;
                Marshal.FreeCoTaskMem((IntPtr)label_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.OutToReturnOverloader
        public static unsafe string GetObjectPtrLabelKHR(this GL.KHRExtension glInstance, IntPtr ptr, int bufSize, int[] length)
        {
            string label;
            fixed (int* length_ptr = length) // SpanOrArrayLayer
            {
                var label_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                var ptr_vptr = (void*)ptr;
                glInstance.GetObjectPtrLabelKHR(ptr_vptr, bufSize, length_ptr, label_ptr);
                label = Marshal.PtrToStringUTF8((IntPtr)label_ptr)!;
                Marshal.FreeCoTaskMem((IntPtr)label_ptr);
            }
            return label;
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetObjectPtrLabelKHR(this GL.KHRExtension glInstance, IntPtr ptr, int bufSize, int[] length, out string label)
        {
            fixed (int* length_ptr = length) // SpanOrArrayLayer
            {
                var label_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                var ptr_vptr = (void*)ptr;
                glInstance.GetObjectPtrLabelKHR(ptr_vptr, bufSize, length_ptr, label_ptr);
                label = Marshal.PtrToStringUTF8((IntPtr)label_ptr)!;
                Marshal.FreeCoTaskMem((IntPtr)label_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.OutToReturnOverloader
        public static unsafe string GetObjectPtrLabelKHR(this GL.KHRExtension glInstance, IntPtr ptr, int bufSize, ref int length)
        {
            string label;
            fixed (int* length_ptr = &length) // RefInsteadOfPointerLayer
            {
                var label_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                var ptr_vptr = (void*)ptr;
                glInstance.GetObjectPtrLabelKHR(ptr_vptr, bufSize, length_ptr, label_ptr);
                label = Marshal.PtrToStringUTF8((IntPtr)label_ptr)!;
                Marshal.FreeCoTaskMem((IntPtr)label_ptr);
            }
            return label;
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void GetObjectPtrLabelKHR(this GL.KHRExtension glInstance, IntPtr ptr, int bufSize, ref int length, out string label)
        {
            fixed (int* length_ptr = &length) // RefInsteadOfPointerLayer
            {
                var label_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                var ptr_vptr = (void*)ptr;
                glInstance.GetObjectPtrLabelKHR(ptr_vptr, bufSize, length_ptr, label_ptr);
                label = Marshal.PtrToStringUTF8((IntPtr)label_ptr)!;
                Marshal.FreeCoTaskMem((IntPtr)label_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.OutToReturnOverloader
        public static unsafe string GetObjectPtrLabelKHR<T1>(this GL.KHRExtension glInstance, in T1 ptr, int bufSize, Span<int> length)
            where T1 : unmanaged
        {
            string label;
            fixed (void* ptr_ptr = &ptr) // RefInsteadOfPointerLayer
            {
                fixed (int* length_ptr = length) // SpanOrArrayLayer
                {
                    var label_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                    glInstance.GetObjectPtrLabelKHR(ptr_ptr, bufSize, length_ptr, label_ptr);
                    label = Marshal.PtrToStringUTF8((IntPtr)label_ptr)!;
                    Marshal.FreeCoTaskMem((IntPtr)label_ptr);
                }
            }
            return label;
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void GetObjectPtrLabelKHR<T1>(this GL.KHRExtension glInstance, in T1 ptr, int bufSize, Span<int> length, out string label)
            where T1 : unmanaged
        {
            fixed (void* ptr_ptr = &ptr) // RefInsteadOfPointerLayer
            {
                fixed (int* length_ptr = length) // SpanOrArrayLayer
                {
                    var label_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                    glInstance.GetObjectPtrLabelKHR(ptr_ptr, bufSize, length_ptr, label_ptr);
                    label = Marshal.PtrToStringUTF8((IntPtr)label_ptr)!;
                    Marshal.FreeCoTaskMem((IntPtr)label_ptr);
                }
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.OutToReturnOverloader
        public static unsafe string GetObjectPtrLabelKHR<T1>(this GL.KHRExtension glInstance, in T1 ptr, int bufSize, int[] length)
            where T1 : unmanaged
        {
            string label;
            fixed (void* ptr_ptr = &ptr) // RefInsteadOfPointerLayer
            {
                fixed (int* length_ptr = length) // SpanOrArrayLayer
                {
                    var label_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                    glInstance.GetObjectPtrLabelKHR(ptr_ptr, bufSize, length_ptr, label_ptr);
                    label = Marshal.PtrToStringUTF8((IntPtr)label_ptr)!;
                    Marshal.FreeCoTaskMem((IntPtr)label_ptr);
                }
            }
            return label;
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void GetObjectPtrLabelKHR<T1>(this GL.KHRExtension glInstance, in T1 ptr, int bufSize, int[] length, out string label)
            where T1 : unmanaged
        {
            fixed (void* ptr_ptr = &ptr) // RefInsteadOfPointerLayer
            {
                fixed (int* length_ptr = length) // SpanOrArrayLayer
                {
                    var label_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                    glInstance.GetObjectPtrLabelKHR(ptr_ptr, bufSize, length_ptr, label_ptr);
                    label = Marshal.PtrToStringUTF8((IntPtr)label_ptr)!;
                    Marshal.FreeCoTaskMem((IntPtr)label_ptr);
                }
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.OutToReturnOverloader
        public static unsafe string GetObjectPtrLabelKHR<T1>(this GL.KHRExtension glInstance, in T1 ptr, int bufSize, ref int length)
            where T1 : unmanaged
        {
            string label;
            fixed (void* ptr_ptr = &ptr) // RefInsteadOfPointerLayer
            fixed (int* length_ptr = &length) // RefInsteadOfPointerLayer
            {
                var label_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                glInstance.GetObjectPtrLabelKHR(ptr_ptr, bufSize, length_ptr, label_ptr);
                label = Marshal.PtrToStringUTF8((IntPtr)label_ptr)!;
                Marshal.FreeCoTaskMem((IntPtr)label_ptr);
            }
            return label;
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void GetObjectPtrLabelKHR<T1>(this GL.KHRExtension glInstance, in T1 ptr, int bufSize, ref int length, out string label)
            where T1 : unmanaged
        {
            fixed (void* ptr_ptr = &ptr) // RefInsteadOfPointerLayer
            fixed (int* length_ptr = &length) // RefInsteadOfPointerLayer
            {
                var label_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                glInstance.GetObjectPtrLabelKHR(ptr_ptr, bufSize, length_ptr, label_ptr);
                label = Marshal.PtrToStringUTF8((IntPtr)label_ptr)!;
                Marshal.FreeCoTaskMem((IntPtr)label_ptr);
            }
        }

        // ReadnPixels overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.VoidPtrToIntPtrOverloader
        public static unsafe void ReadnPixels(this GL.KHRExtension glInstance, int x, int y, int width, int height, PixelFormat format, PixelType type, int bufSize, IntPtr data)
        {
            var data_vptr = (void*)data;
            glInstance.ReadnPixels(x, y, width, height, format, type, bufSize, data_vptr);
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void ReadnPixels<T1>(this GL.KHRExtension glInstance, int x, int y, int width, int height, PixelFormat format, PixelType type, Span<T1> data)
            where T1 : unmanaged
        {
            var bufSize = (int)(data.Length * sizeof(T1));
            fixed (void* data_ptr = data) // SpanOrArrayLayer
            {
                glInstance.ReadnPixels(x, y, width, height, format, type, bufSize, data_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void ReadnPixels<T1>(this GL.KHRExtension glInstance, int x, int y, int width, int height, PixelFormat format, PixelType type, T1[] data)
            where T1 : unmanaged
        {
            var bufSize = (int)(data.Length * sizeof(T1));
            fixed (void* data_ptr = data) // SpanOrArrayLayer
            {
                glInstance.ReadnPixels(x, y, width, height, format, type, bufSize, data_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void ReadnPixels<T1>(this GL.KHRExtension glInstance, int x, int y, int width, int height, PixelFormat format, PixelType type, int bufSize, ref T1 data)
            where T1 : unmanaged
        {
            fixed (void* data_ptr = &data) // RefInsteadOfPointerLayer
            {
                glInstance.ReadnPixels(x, y, width, height, format, type, bufSize, data_ptr);
            }
        }

        // GetnUniformfv overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetnUniformf(this GL.KHRExtension glInstance, ProgramHandle program, int location, Span<float> parameters)
        {
            var bufSize = (int)(parameters.Length * 4);
            fixed (float* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.GetnUniformfv(program, location, bufSize, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetnUniformf(this GL.KHRExtension glInstance, ProgramHandle program, int location, float[] parameters)
        {
            var bufSize = (int)(parameters.Length * 4);
            fixed (float* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.GetnUniformfv(program, location, bufSize, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void GetnUniformf(this GL.KHRExtension glInstance, ProgramHandle program, int location, int bufSize, ref float parameters)
        {
            fixed (float* parameters_ptr = &parameters) // RefInsteadOfPointerLayer
            {
                glInstance.GetnUniformfv(program, location, bufSize, parameters_ptr);
            }
        }

        // GetnUniformiv overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetnUniformi(this GL.KHRExtension glInstance, ProgramHandle program, int location, Span<int> parameters)
        {
            var bufSize = (int)(parameters.Length * 4);
            fixed (int* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.GetnUniformiv(program, location, bufSize, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetnUniformi(this GL.KHRExtension glInstance, ProgramHandle program, int location, int[] parameters)
        {
            var bufSize = (int)(parameters.Length * 4);
            fixed (int* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.GetnUniformiv(program, location, bufSize, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void GetnUniformi(this GL.KHRExtension glInstance, ProgramHandle program, int location, int bufSize, ref int parameters)
        {
            fixed (int* parameters_ptr = &parameters) // RefInsteadOfPointerLayer
            {
                glInstance.GetnUniformiv(program, location, bufSize, parameters_ptr);
            }
        }

        // GetnUniformuiv overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetnUniformui(this GL.KHRExtension glInstance, ProgramHandle program, int location, Span<uint> parameters)
        {
            var bufSize = (int)(parameters.Length * 4);
            fixed (uint* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.GetnUniformuiv(program, location, bufSize, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetnUniformui(this GL.KHRExtension glInstance, ProgramHandle program, int location, uint[] parameters)
        {
            var bufSize = (int)(parameters.Length * 4);
            fixed (uint* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.GetnUniformuiv(program, location, bufSize, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void GetnUniformui(this GL.KHRExtension glInstance, ProgramHandle program, int location, int bufSize, ref uint parameters)
        {
            fixed (uint* parameters_ptr = &parameters) // RefInsteadOfPointerLayer
            {
                glInstance.GetnUniformuiv(program, location, bufSize, parameters_ptr);
            }
        }

        // ReadnPixelsKHR overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.VoidPtrToIntPtrOverloader
        public static unsafe void ReadnPixelsKHR(this GL.KHRExtension glInstance, int x, int y, int width, int height, PixelFormat format, PixelType type, int bufSize, IntPtr data)
        {
            var data_vptr = (void*)data;
            glInstance.ReadnPixelsKHR(x, y, width, height, format, type, bufSize, data_vptr);
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void ReadnPixelsKHR<T1>(this GL.KHRExtension glInstance, int x, int y, int width, int height, PixelFormat format, PixelType type, Span<T1> data)
            where T1 : unmanaged
        {
            var bufSize = (int)(data.Length * sizeof(T1));
            fixed (void* data_ptr = data) // SpanOrArrayLayer
            {
                glInstance.ReadnPixelsKHR(x, y, width, height, format, type, bufSize, data_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void ReadnPixelsKHR<T1>(this GL.KHRExtension glInstance, int x, int y, int width, int height, PixelFormat format, PixelType type, T1[] data)
            where T1 : unmanaged
        {
            var bufSize = (int)(data.Length * sizeof(T1));
            fixed (void* data_ptr = data) // SpanOrArrayLayer
            {
                glInstance.ReadnPixelsKHR(x, y, width, height, format, type, bufSize, data_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void ReadnPixelsKHR<T1>(this GL.KHRExtension glInstance, int x, int y, int width, int height, PixelFormat format, PixelType type, int bufSize, ref T1 data)
            where T1 : unmanaged
        {
            fixed (void* data_ptr = &data) // RefInsteadOfPointerLayer
            {
                glInstance.ReadnPixelsKHR(x, y, width, height, format, type, bufSize, data_ptr);
            }
        }

        // GetnUniformfvKHR overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetnUniformfvKHR(this GL.KHRExtension glInstance, ProgramHandle program, int location, Span<float> parameters)
        {
            var bufSize = (int)(parameters.Length * 4);
            fixed (float* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.GetnUniformfvKHR(program, location, bufSize, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetnUniformfvKHR(this GL.KHRExtension glInstance, ProgramHandle program, int location, float[] parameters)
        {
            var bufSize = (int)(parameters.Length * 4);
            fixed (float* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.GetnUniformfvKHR(program, location, bufSize, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void GetnUniformfvKHR(this GL.KHRExtension glInstance, ProgramHandle program, int location, int bufSize, ref float parameters)
        {
            fixed (float* parameters_ptr = &parameters) // RefInsteadOfPointerLayer
            {
                glInstance.GetnUniformfvKHR(program, location, bufSize, parameters_ptr);
            }
        }

        // GetnUniformivKHR overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetnUniformivKHR(this GL.KHRExtension glInstance, ProgramHandle program, int location, Span<int> parameters)
        {
            var bufSize = (int)(parameters.Length * 4);
            fixed (int* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.GetnUniformivKHR(program, location, bufSize, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetnUniformivKHR(this GL.KHRExtension glInstance, ProgramHandle program, int location, int[] parameters)
        {
            var bufSize = (int)(parameters.Length * 4);
            fixed (int* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.GetnUniformivKHR(program, location, bufSize, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void GetnUniformivKHR(this GL.KHRExtension glInstance, ProgramHandle program, int location, int bufSize, ref int parameters)
        {
            fixed (int* parameters_ptr = &parameters) // RefInsteadOfPointerLayer
            {
                glInstance.GetnUniformivKHR(program, location, bufSize, parameters_ptr);
            }
        }

        // GetnUniformuivKHR overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetnUniformuivKHR(this GL.KHRExtension glInstance, ProgramHandle program, int location, Span<uint> parameters)
        {
            var bufSize = (int)(parameters.Length * 4);
            fixed (uint* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.GetnUniformuivKHR(program, location, bufSize, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetnUniformuivKHR(this GL.KHRExtension glInstance, ProgramHandle program, int location, uint[] parameters)
        {
            var bufSize = (int)(parameters.Length * 4);
            fixed (uint* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.GetnUniformuivKHR(program, location, bufSize, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void GetnUniformuivKHR(this GL.KHRExtension glInstance, ProgramHandle program, int location, int bufSize, ref uint parameters)
        {
            fixed (uint* parameters_ptr = &parameters) // RefInsteadOfPointerLayer
            {
                glInstance.GetnUniformuivKHR(program, location, bufSize, parameters_ptr);
            }
        }
    }

#pragma warning restore IDE1006 // Naming Styles
}
