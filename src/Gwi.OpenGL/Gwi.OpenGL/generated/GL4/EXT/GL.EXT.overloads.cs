// This file is auto generated, do not edit.
using System;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;

namespace Gwi.OpenGL.GL4
{
#pragma warning disable IDE1006 // Naming Styles

    public static class EXTOverloads
    {
        // EGLImageTargetTexStorageEXT overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void EGLImageTargetTexStorageEXT(this GL.EXTExtension glInstance, GLEnum target, IntPtr image, in int attrib_list)
        {
            fixed (int* attrib_list_ptr = &attrib_list) // RefInsteadOfPointerLayer
            {
                var image_vptr = (void*)image;
                glInstance.EGLImageTargetTexStorageEXT(target, image_vptr, attrib_list_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void EGLImageTargetTexStorageEXT<T1>(this GL.EXTExtension glInstance, GLEnum target, ref T1 image, in int attrib_list)
            where T1 : unmanaged
        {
            fixed (void* image_ptr = &image) // RefInsteadOfPointerLayer
            fixed (int* attrib_list_ptr = &attrib_list) // RefInsteadOfPointerLayer
            {
                glInstance.EGLImageTargetTexStorageEXT(target, image_ptr, attrib_list_ptr);
            }
        }

        // EGLImageTargetTextureStorageEXT overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void EGLImageTargetTextureStorageEXT(this GL.EXTExtension glInstance, TextureHandle texture, IntPtr image, in int attrib_list)
        {
            fixed (int* attrib_list_ptr = &attrib_list) // RefInsteadOfPointerLayer
            {
                var image_vptr = (void*)image;
                glInstance.EGLImageTargetTextureStorageEXT(texture, image_vptr, attrib_list_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void EGLImageTargetTextureStorageEXT<T1>(this GL.EXTExtension glInstance, TextureHandle texture, ref T1 image, in int attrib_list)
            where T1 : unmanaged
        {
            fixed (void* image_ptr = &image) // RefInsteadOfPointerLayer
            fixed (int* attrib_list_ptr = &attrib_list) // RefInsteadOfPointerLayer
            {
                glInstance.EGLImageTargetTextureStorageEXT(texture, image_ptr, attrib_list_ptr);
            }
        }

        // ColorSubTableEXT overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.VoidPtrToIntPtrOverloader
        public static unsafe void ColorSubTableEXT(this GL.EXTExtension glInstance, ColorTableTarget target, int start, int count, PixelFormat format, PixelType type, IntPtr data)
        {
            var data_vptr = (void*)data;
            glInstance.ColorSubTableEXT(target, start, count, format, type, data_vptr);
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void ColorSubTableEXT<T1>(this GL.EXTExtension glInstance, ColorTableTarget target, int start, int count, PixelFormat format, PixelType type, ReadOnlySpan<T1> data)
            where T1 : unmanaged
        {
            fixed (void* data_ptr = data) // SpanOrArrayLayer
            {
                glInstance.ColorSubTableEXT(target, start, count, format, type, data_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void ColorSubTableEXT<T1>(this GL.EXTExtension glInstance, ColorTableTarget target, int start, int count, PixelFormat format, PixelType type, T1[] data)
            where T1 : unmanaged
        {
            fixed (void* data_ptr = data) // SpanOrArrayLayer
            {
                glInstance.ColorSubTableEXT(target, start, count, format, type, data_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void ColorSubTableEXT<T1>(this GL.EXTExtension glInstance, ColorTableTarget target, int start, int count, PixelFormat format, PixelType type, in T1 data)
            where T1 : unmanaged
        {
            fixed (void* data_ptr = &data) // RefInsteadOfPointerLayer
            {
                glInstance.ColorSubTableEXT(target, start, count, format, type, data_ptr);
            }
        }

        // ConvolutionFilter1DEXT overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.VoidPtrToIntPtrOverloader
        public static unsafe void ConvolutionFilter1DEXT(this GL.EXTExtension glInstance, ConvolutionTargetEXT target, InternalFormat internalformat, int width, PixelFormat format, PixelType type, IntPtr image)
        {
            var image_vptr = (void*)image;
            glInstance.ConvolutionFilter1DEXT(target, internalformat, width, format, type, image_vptr);
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void ConvolutionFilter1DEXT<T1>(this GL.EXTExtension glInstance, ConvolutionTargetEXT target, InternalFormat internalformat, int width, PixelFormat format, PixelType type, ReadOnlySpan<T1> image)
            where T1 : unmanaged
        {
            fixed (void* image_ptr = image) // SpanOrArrayLayer
            {
                glInstance.ConvolutionFilter1DEXT(target, internalformat, width, format, type, image_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void ConvolutionFilter1DEXT<T1>(this GL.EXTExtension glInstance, ConvolutionTargetEXT target, InternalFormat internalformat, int width, PixelFormat format, PixelType type, T1[] image)
            where T1 : unmanaged
        {
            fixed (void* image_ptr = image) // SpanOrArrayLayer
            {
                glInstance.ConvolutionFilter1DEXT(target, internalformat, width, format, type, image_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void ConvolutionFilter1DEXT<T1>(this GL.EXTExtension glInstance, ConvolutionTargetEXT target, InternalFormat internalformat, int width, PixelFormat format, PixelType type, in T1 image)
            where T1 : unmanaged
        {
            fixed (void* image_ptr = &image) // RefInsteadOfPointerLayer
            {
                glInstance.ConvolutionFilter1DEXT(target, internalformat, width, format, type, image_ptr);
            }
        }

        // ConvolutionFilter2DEXT overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.VoidPtrToIntPtrOverloader
        public static unsafe void ConvolutionFilter2DEXT(this GL.EXTExtension glInstance, ConvolutionTargetEXT target, InternalFormat internalformat, int width, int height, PixelFormat format, PixelType type, IntPtr image)
        {
            var image_vptr = (void*)image;
            glInstance.ConvolutionFilter2DEXT(target, internalformat, width, height, format, type, image_vptr);
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void ConvolutionFilter2DEXT<T1>(this GL.EXTExtension glInstance, ConvolutionTargetEXT target, InternalFormat internalformat, int width, int height, PixelFormat format, PixelType type, ReadOnlySpan<T1> image)
            where T1 : unmanaged
        {
            fixed (void* image_ptr = image) // SpanOrArrayLayer
            {
                glInstance.ConvolutionFilter2DEXT(target, internalformat, width, height, format, type, image_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void ConvolutionFilter2DEXT<T1>(this GL.EXTExtension glInstance, ConvolutionTargetEXT target, InternalFormat internalformat, int width, int height, PixelFormat format, PixelType type, T1[] image)
            where T1 : unmanaged
        {
            fixed (void* image_ptr = image) // SpanOrArrayLayer
            {
                glInstance.ConvolutionFilter2DEXT(target, internalformat, width, height, format, type, image_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void ConvolutionFilter2DEXT<T1>(this GL.EXTExtension glInstance, ConvolutionTargetEXT target, InternalFormat internalformat, int width, int height, PixelFormat format, PixelType type, in T1 image)
            where T1 : unmanaged
        {
            fixed (void* image_ptr = &image) // RefInsteadOfPointerLayer
            {
                glInstance.ConvolutionFilter2DEXT(target, internalformat, width, height, format, type, image_ptr);
            }
        }

        // ConvolutionParameterfvEXT overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void ConvolutionParameterfvEXT(this GL.EXTExtension glInstance, ConvolutionTargetEXT target, ConvolutionParameterEXT pname, ReadOnlySpan<float> parameters)
        {
            fixed (float* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.ConvolutionParameterfvEXT(target, pname, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void ConvolutionParameterfvEXT(this GL.EXTExtension glInstance, ConvolutionTargetEXT target, ConvolutionParameterEXT pname, float[] parameters)
        {
            fixed (float* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.ConvolutionParameterfvEXT(target, pname, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void ConvolutionParameterfvEXT(this GL.EXTExtension glInstance, ConvolutionTargetEXT target, ConvolutionParameterEXT pname, in float parameters)
        {
            fixed (float* parameters_ptr = &parameters) // RefInsteadOfPointerLayer
            {
                glInstance.ConvolutionParameterfvEXT(target, pname, parameters_ptr);
            }
        }

        // ConvolutionParameterivEXT overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void ConvolutionParameterivEXT(this GL.EXTExtension glInstance, ConvolutionTargetEXT target, ConvolutionParameterEXT pname, ReadOnlySpan<int> parameters)
        {
            fixed (int* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.ConvolutionParameterivEXT(target, pname, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void ConvolutionParameterivEXT(this GL.EXTExtension glInstance, ConvolutionTargetEXT target, ConvolutionParameterEXT pname, int[] parameters)
        {
            fixed (int* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.ConvolutionParameterivEXT(target, pname, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void ConvolutionParameterivEXT(this GL.EXTExtension glInstance, ConvolutionTargetEXT target, ConvolutionParameterEXT pname, in int parameters)
        {
            fixed (int* parameters_ptr = &parameters) // RefInsteadOfPointerLayer
            {
                glInstance.ConvolutionParameterivEXT(target, pname, parameters_ptr);
            }
        }

        // GetConvolutionFilterEXT overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.VoidPtrToIntPtrOverloader
        public static unsafe void GetConvolutionFilterEXT(this GL.EXTExtension glInstance, ConvolutionTargetEXT target, PixelFormat format, PixelType type, IntPtr image)
        {
            var image_vptr = (void*)image;
            glInstance.GetConvolutionFilterEXT(target, format, type, image_vptr);
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetConvolutionFilterEXT<T1>(this GL.EXTExtension glInstance, ConvolutionTargetEXT target, PixelFormat format, PixelType type, Span<T1> image)
            where T1 : unmanaged
        {
            fixed (void* image_ptr = image) // SpanOrArrayLayer
            {
                glInstance.GetConvolutionFilterEXT(target, format, type, image_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetConvolutionFilterEXT<T1>(this GL.EXTExtension glInstance, ConvolutionTargetEXT target, PixelFormat format, PixelType type, T1[] image)
            where T1 : unmanaged
        {
            fixed (void* image_ptr = image) // SpanOrArrayLayer
            {
                glInstance.GetConvolutionFilterEXT(target, format, type, image_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void GetConvolutionFilterEXT<T1>(this GL.EXTExtension glInstance, ConvolutionTargetEXT target, PixelFormat format, PixelType type, ref T1 image)
            where T1 : unmanaged
        {
            fixed (void* image_ptr = &image) // RefInsteadOfPointerLayer
            {
                glInstance.GetConvolutionFilterEXT(target, format, type, image_ptr);
            }
        }

        // GetConvolutionParameterfvEXT overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetConvolutionParameterfvEXT(this GL.EXTExtension glInstance, ConvolutionTargetEXT target, ConvolutionParameterEXT pname, Span<float> parameters)
        {
            fixed (float* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.GetConvolutionParameterfvEXT(target, pname, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetConvolutionParameterfvEXT(this GL.EXTExtension glInstance, ConvolutionTargetEXT target, ConvolutionParameterEXT pname, float[] parameters)
        {
            fixed (float* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.GetConvolutionParameterfvEXT(target, pname, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void GetConvolutionParameterfvEXT(this GL.EXTExtension glInstance, ConvolutionTargetEXT target, ConvolutionParameterEXT pname, ref float parameters)
        {
            fixed (float* parameters_ptr = &parameters) // RefInsteadOfPointerLayer
            {
                glInstance.GetConvolutionParameterfvEXT(target, pname, parameters_ptr);
            }
        }

        // GetConvolutionParameterivEXT overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetConvolutionParameterivEXT(this GL.EXTExtension glInstance, ConvolutionTargetEXT target, ConvolutionParameterEXT pname, Span<int> parameters)
        {
            fixed (int* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.GetConvolutionParameterivEXT(target, pname, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetConvolutionParameterivEXT(this GL.EXTExtension glInstance, ConvolutionTargetEXT target, ConvolutionParameterEXT pname, int[] parameters)
        {
            fixed (int* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.GetConvolutionParameterivEXT(target, pname, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void GetConvolutionParameterivEXT(this GL.EXTExtension glInstance, ConvolutionTargetEXT target, ConvolutionParameterEXT pname, ref int parameters)
        {
            fixed (int* parameters_ptr = &parameters) // RefInsteadOfPointerLayer
            {
                glInstance.GetConvolutionParameterivEXT(target, pname, parameters_ptr);
            }
        }

        // GetSeparableFilterEXT overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.VoidPtrToIntPtrOverloader
        public static unsafe void GetSeparableFilterEXT(this GL.EXTExtension glInstance, SeparableTargetEXT target, PixelFormat format, PixelType type, IntPtr row, IntPtr column, IntPtr span)
        {
            var row_vptr = (void*)row;
            var column_vptr = (void*)column;
            var span_vptr = (void*)span;
            glInstance.GetSeparableFilterEXT(target, format, type, row_vptr, column_vptr, span_vptr);
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetSeparableFilterEXT<T1, T2, T3>(this GL.EXTExtension glInstance, SeparableTargetEXT target, PixelFormat format, PixelType type, Span<T3> row, Span<T2> column, Span<T1> span)
            where T1 : unmanaged
            where T2 : unmanaged
            where T3 : unmanaged
        {
            fixed (void* row_ptr = row) // SpanOrArrayLayer
            {
                fixed (void* column_ptr = column) // SpanOrArrayLayer
                {
                    fixed (void* span_ptr = span) // SpanOrArrayLayer
                    {
                        glInstance.GetSeparableFilterEXT(target, format, type, row_ptr, column_ptr, span_ptr);
                    }
                }
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetSeparableFilterEXT<T1, T2, T3>(this GL.EXTExtension glInstance, SeparableTargetEXT target, PixelFormat format, PixelType type, T3[] row, T2[] column, T1[] span)
            where T1 : unmanaged
            where T2 : unmanaged
            where T3 : unmanaged
        {
            fixed (void* row_ptr = row) // SpanOrArrayLayer
            {
                fixed (void* column_ptr = column) // SpanOrArrayLayer
                {
                    fixed (void* span_ptr = span) // SpanOrArrayLayer
                    {
                        glInstance.GetSeparableFilterEXT(target, format, type, row_ptr, column_ptr, span_ptr);
                    }
                }
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void GetSeparableFilterEXT<T1, T2, T3>(this GL.EXTExtension glInstance, SeparableTargetEXT target, PixelFormat format, PixelType type, ref T1 row, ref T2 column, ref T3 span)
            where T1 : unmanaged
            where T2 : unmanaged
            where T3 : unmanaged
        {
            fixed (void* row_ptr = &row) // RefInsteadOfPointerLayer
            fixed (void* column_ptr = &column) // RefInsteadOfPointerLayer
            fixed (void* span_ptr = &span) // RefInsteadOfPointerLayer
            {
                glInstance.GetSeparableFilterEXT(target, format, type, row_ptr, column_ptr, span_ptr);
            }
        }

        // SeparableFilter2DEXT overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.VoidPtrToIntPtrOverloader
        public static unsafe void SeparableFilter2DEXT(this GL.EXTExtension glInstance, SeparableTargetEXT target, InternalFormat internalformat, int width, int height, PixelFormat format, PixelType type, IntPtr row, IntPtr column)
        {
            var row_vptr = (void*)row;
            var column_vptr = (void*)column;
            glInstance.SeparableFilter2DEXT(target, internalformat, width, height, format, type, row_vptr, column_vptr);
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void SeparableFilter2DEXT<T1, T2>(this GL.EXTExtension glInstance, SeparableTargetEXT target, InternalFormat internalformat, int width, int height, PixelFormat format, PixelType type, ReadOnlySpan<T2> row, ReadOnlySpan<T1> column)
            where T1 : unmanaged
            where T2 : unmanaged
        {
            fixed (void* row_ptr = row) // SpanOrArrayLayer
            {
                fixed (void* column_ptr = column) // SpanOrArrayLayer
                {
                    glInstance.SeparableFilter2DEXT(target, internalformat, width, height, format, type, row_ptr, column_ptr);
                }
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void SeparableFilter2DEXT<T1, T2>(this GL.EXTExtension glInstance, SeparableTargetEXT target, InternalFormat internalformat, int width, int height, PixelFormat format, PixelType type, T2[] row, T1[] column)
            where T1 : unmanaged
            where T2 : unmanaged
        {
            fixed (void* row_ptr = row) // SpanOrArrayLayer
            {
                fixed (void* column_ptr = column) // SpanOrArrayLayer
                {
                    glInstance.SeparableFilter2DEXT(target, internalformat, width, height, format, type, row_ptr, column_ptr);
                }
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void SeparableFilter2DEXT<T1, T2>(this GL.EXTExtension glInstance, SeparableTargetEXT target, InternalFormat internalformat, int width, int height, PixelFormat format, PixelType type, in T1 row, in T2 column)
            where T1 : unmanaged
            where T2 : unmanaged
        {
            fixed (void* row_ptr = &row) // RefInsteadOfPointerLayer
            fixed (void* column_ptr = &column) // RefInsteadOfPointerLayer
            {
                glInstance.SeparableFilter2DEXT(target, internalformat, width, height, format, type, row_ptr, column_ptr);
            }
        }

        // Tangent3bvEXT overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void Tangent3bvEXT(this GL.EXTExtension glInstance, ReadOnlySpan<sbyte> v)
        {
            fixed (sbyte* v_ptr = v) // SpanOrArrayLayer
            {
                glInstance.Tangent3bvEXT(v_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void Tangent3bvEXT(this GL.EXTExtension glInstance, sbyte[] v)
        {
            fixed (sbyte* v_ptr = v) // SpanOrArrayLayer
            {
                glInstance.Tangent3bvEXT(v_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void Tangent3bvEXT(this GL.EXTExtension glInstance, in sbyte v)
        {
            fixed (sbyte* v_ptr = &v) // RefInsteadOfPointerLayer
            {
                glInstance.Tangent3bvEXT(v_ptr);
            }
        }

        // Tangent3dvEXT overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void Tangent3dvEXT(this GL.EXTExtension glInstance, ReadOnlySpan<double> v)
        {
            fixed (double* v_ptr = v) // SpanOrArrayLayer
            {
                glInstance.Tangent3dvEXT(v_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void Tangent3dvEXT(this GL.EXTExtension glInstance, double[] v)
        {
            fixed (double* v_ptr = v) // SpanOrArrayLayer
            {
                glInstance.Tangent3dvEXT(v_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void Tangent3dvEXT(this GL.EXTExtension glInstance, in double v)
        {
            fixed (double* v_ptr = &v) // RefInsteadOfPointerLayer
            {
                glInstance.Tangent3dvEXT(v_ptr);
            }
        }

        // Tangent3fvEXT overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void Tangent3fvEXT(this GL.EXTExtension glInstance, ReadOnlySpan<float> v)
        {
            fixed (float* v_ptr = v) // SpanOrArrayLayer
            {
                glInstance.Tangent3fvEXT(v_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void Tangent3fvEXT(this GL.EXTExtension glInstance, float[] v)
        {
            fixed (float* v_ptr = v) // SpanOrArrayLayer
            {
                glInstance.Tangent3fvEXT(v_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void Tangent3fvEXT(this GL.EXTExtension glInstance, in float v)
        {
            fixed (float* v_ptr = &v) // RefInsteadOfPointerLayer
            {
                glInstance.Tangent3fvEXT(v_ptr);
            }
        }

        // Tangent3ivEXT overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void Tangent3ivEXT(this GL.EXTExtension glInstance, ReadOnlySpan<int> v)
        {
            fixed (int* v_ptr = v) // SpanOrArrayLayer
            {
                glInstance.Tangent3ivEXT(v_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void Tangent3ivEXT(this GL.EXTExtension glInstance, int[] v)
        {
            fixed (int* v_ptr = v) // SpanOrArrayLayer
            {
                glInstance.Tangent3ivEXT(v_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void Tangent3ivEXT(this GL.EXTExtension glInstance, in int v)
        {
            fixed (int* v_ptr = &v) // RefInsteadOfPointerLayer
            {
                glInstance.Tangent3ivEXT(v_ptr);
            }
        }

        // Tangent3svEXT overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void Tangent3svEXT(this GL.EXTExtension glInstance, ReadOnlySpan<short> v)
        {
            fixed (short* v_ptr = v) // SpanOrArrayLayer
            {
                glInstance.Tangent3svEXT(v_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void Tangent3svEXT(this GL.EXTExtension glInstance, short[] v)
        {
            fixed (short* v_ptr = v) // SpanOrArrayLayer
            {
                glInstance.Tangent3svEXT(v_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void Tangent3svEXT(this GL.EXTExtension glInstance, in short v)
        {
            fixed (short* v_ptr = &v) // RefInsteadOfPointerLayer
            {
                glInstance.Tangent3svEXT(v_ptr);
            }
        }

        // Binormal3bvEXT overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void Binormal3bvEXT(this GL.EXTExtension glInstance, ReadOnlySpan<sbyte> v)
        {
            fixed (sbyte* v_ptr = v) // SpanOrArrayLayer
            {
                glInstance.Binormal3bvEXT(v_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void Binormal3bvEXT(this GL.EXTExtension glInstance, sbyte[] v)
        {
            fixed (sbyte* v_ptr = v) // SpanOrArrayLayer
            {
                glInstance.Binormal3bvEXT(v_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void Binormal3bvEXT(this GL.EXTExtension glInstance, in sbyte v)
        {
            fixed (sbyte* v_ptr = &v) // RefInsteadOfPointerLayer
            {
                glInstance.Binormal3bvEXT(v_ptr);
            }
        }

        // Binormal3dvEXT overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void Binormal3dvEXT(this GL.EXTExtension glInstance, ReadOnlySpan<double> v)
        {
            fixed (double* v_ptr = v) // SpanOrArrayLayer
            {
                glInstance.Binormal3dvEXT(v_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void Binormal3dvEXT(this GL.EXTExtension glInstance, double[] v)
        {
            fixed (double* v_ptr = v) // SpanOrArrayLayer
            {
                glInstance.Binormal3dvEXT(v_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void Binormal3dvEXT(this GL.EXTExtension glInstance, in double v)
        {
            fixed (double* v_ptr = &v) // RefInsteadOfPointerLayer
            {
                glInstance.Binormal3dvEXT(v_ptr);
            }
        }

        // Binormal3fvEXT overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void Binormal3fvEXT(this GL.EXTExtension glInstance, ReadOnlySpan<float> v)
        {
            fixed (float* v_ptr = v) // SpanOrArrayLayer
            {
                glInstance.Binormal3fvEXT(v_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void Binormal3fvEXT(this GL.EXTExtension glInstance, float[] v)
        {
            fixed (float* v_ptr = v) // SpanOrArrayLayer
            {
                glInstance.Binormal3fvEXT(v_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void Binormal3fvEXT(this GL.EXTExtension glInstance, in float v)
        {
            fixed (float* v_ptr = &v) // RefInsteadOfPointerLayer
            {
                glInstance.Binormal3fvEXT(v_ptr);
            }
        }

        // Binormal3ivEXT overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void Binormal3ivEXT(this GL.EXTExtension glInstance, ReadOnlySpan<int> v)
        {
            fixed (int* v_ptr = v) // SpanOrArrayLayer
            {
                glInstance.Binormal3ivEXT(v_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void Binormal3ivEXT(this GL.EXTExtension glInstance, int[] v)
        {
            fixed (int* v_ptr = v) // SpanOrArrayLayer
            {
                glInstance.Binormal3ivEXT(v_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void Binormal3ivEXT(this GL.EXTExtension glInstance, in int v)
        {
            fixed (int* v_ptr = &v) // RefInsteadOfPointerLayer
            {
                glInstance.Binormal3ivEXT(v_ptr);
            }
        }

        // Binormal3svEXT overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void Binormal3svEXT(this GL.EXTExtension glInstance, ReadOnlySpan<short> v)
        {
            fixed (short* v_ptr = v) // SpanOrArrayLayer
            {
                glInstance.Binormal3svEXT(v_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void Binormal3svEXT(this GL.EXTExtension glInstance, short[] v)
        {
            fixed (short* v_ptr = v) // SpanOrArrayLayer
            {
                glInstance.Binormal3svEXT(v_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void Binormal3svEXT(this GL.EXTExtension glInstance, in short v)
        {
            fixed (short* v_ptr = &v) // RefInsteadOfPointerLayer
            {
                glInstance.Binormal3svEXT(v_ptr);
            }
        }

        // TangentPointerEXT overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.VoidPtrToIntPtrOverloader
        public static unsafe void TangentPointerEXT(this GL.EXTExtension glInstance, TangentPointerTypeEXT type, int stride, IntPtr pointer)
        {
            var pointer_vptr = (void*)pointer;
            glInstance.TangentPointerEXT(type, stride, pointer_vptr);
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void TangentPointerEXT<T1>(this GL.EXTExtension glInstance, TangentPointerTypeEXT type, int stride, ReadOnlySpan<T1> pointer)
            where T1 : unmanaged
        {
            fixed (void* pointer_ptr = pointer) // SpanOrArrayLayer
            {
                glInstance.TangentPointerEXT(type, stride, pointer_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void TangentPointerEXT<T1>(this GL.EXTExtension glInstance, TangentPointerTypeEXT type, int stride, T1[] pointer)
            where T1 : unmanaged
        {
            fixed (void* pointer_ptr = pointer) // SpanOrArrayLayer
            {
                glInstance.TangentPointerEXT(type, stride, pointer_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void TangentPointerEXT<T1>(this GL.EXTExtension glInstance, TangentPointerTypeEXT type, int stride, in T1 pointer)
            where T1 : unmanaged
        {
            fixed (void* pointer_ptr = &pointer) // RefInsteadOfPointerLayer
            {
                glInstance.TangentPointerEXT(type, stride, pointer_ptr);
            }
        }

        // BinormalPointerEXT overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.VoidPtrToIntPtrOverloader
        public static unsafe void BinormalPointerEXT(this GL.EXTExtension glInstance, BinormalPointerTypeEXT type, int stride, IntPtr pointer)
        {
            var pointer_vptr = (void*)pointer;
            glInstance.BinormalPointerEXT(type, stride, pointer_vptr);
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void BinormalPointerEXT<T1>(this GL.EXTExtension glInstance, BinormalPointerTypeEXT type, int stride, ReadOnlySpan<T1> pointer)
            where T1 : unmanaged
        {
            fixed (void* pointer_ptr = pointer) // SpanOrArrayLayer
            {
                glInstance.BinormalPointerEXT(type, stride, pointer_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void BinormalPointerEXT<T1>(this GL.EXTExtension glInstance, BinormalPointerTypeEXT type, int stride, T1[] pointer)
            where T1 : unmanaged
        {
            fixed (void* pointer_ptr = pointer) // SpanOrArrayLayer
            {
                glInstance.BinormalPointerEXT(type, stride, pointer_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void BinormalPointerEXT<T1>(this GL.EXTExtension glInstance, BinormalPointerTypeEXT type, int stride, in T1 pointer)
            where T1 : unmanaged
        {
            fixed (void* pointer_ptr = &pointer) // RefInsteadOfPointerLayer
            {
                glInstance.BinormalPointerEXT(type, stride, pointer_ptr);
            }
        }

        // CullParameterdvEXT overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void CullParameterdvEXT(this GL.EXTExtension glInstance, CullParameterEXT pname, Span<double> parameters)
        {
            fixed (double* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.CullParameterdvEXT(pname, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void CullParameterdvEXT(this GL.EXTExtension glInstance, CullParameterEXT pname, double[] parameters)
        {
            fixed (double* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.CullParameterdvEXT(pname, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void CullParameterdvEXT(this GL.EXTExtension glInstance, CullParameterEXT pname, ref double parameters)
        {
            fixed (double* parameters_ptr = &parameters) // RefInsteadOfPointerLayer
            {
                glInstance.CullParameterdvEXT(pname, parameters_ptr);
            }
        }

        // CullParameterfvEXT overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void CullParameterfvEXT(this GL.EXTExtension glInstance, CullParameterEXT pname, Span<float> parameters)
        {
            fixed (float* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.CullParameterfvEXT(pname, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void CullParameterfvEXT(this GL.EXTExtension glInstance, CullParameterEXT pname, float[] parameters)
        {
            fixed (float* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.CullParameterfvEXT(pname, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void CullParameterfvEXT(this GL.EXTExtension glInstance, CullParameterEXT pname, ref float parameters)
        {
            fixed (float* parameters_ptr = &parameters) // RefInsteadOfPointerLayer
            {
                glInstance.CullParameterfvEXT(pname, parameters_ptr);
            }
        }

        // LabelObjectEXT overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.Transformer
        public static unsafe void LabelObjectEXT(this GL.EXTExtension glInstance, GLEnum type, uint obj, int length, string label)
        {
            byte* label_ptr = (byte*)Marshal.StringToCoTaskMemUTF8(label);
            glInstance.LabelObjectEXT(type, obj, length, label_ptr);
            Marshal.FreeCoTaskMem((IntPtr)label_ptr);
        }

        // GetObjectLabelEXT overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.OutToReturnOverloader
        public static unsafe string GetObjectLabelEXT(this GL.EXTExtension glInstance, GLEnum type, uint obj, int bufSize, Span<int> length)
        {
            string label;
            fixed (int* length_ptr = length) // SpanOrArrayLayer
            {
                var label_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                glInstance.GetObjectLabelEXT(type, obj, bufSize, length_ptr, label_ptr);
                label = Marshal.PtrToStringUTF8((IntPtr)label_ptr)!;
                Marshal.FreeCoTaskMem((IntPtr)label_ptr);
            }
            return label;
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetObjectLabelEXT(this GL.EXTExtension glInstance, GLEnum type, uint obj, int bufSize, Span<int> length, out string label)
        {
            fixed (int* length_ptr = length) // SpanOrArrayLayer
            {
                var label_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                glInstance.GetObjectLabelEXT(type, obj, bufSize, length_ptr, label_ptr);
                label = Marshal.PtrToStringUTF8((IntPtr)label_ptr)!;
                Marshal.FreeCoTaskMem((IntPtr)label_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.OutToReturnOverloader
        public static unsafe string GetObjectLabelEXT(this GL.EXTExtension glInstance, GLEnum type, uint obj, int bufSize, int[] length)
        {
            string label;
            fixed (int* length_ptr = length) // SpanOrArrayLayer
            {
                var label_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                glInstance.GetObjectLabelEXT(type, obj, bufSize, length_ptr, label_ptr);
                label = Marshal.PtrToStringUTF8((IntPtr)label_ptr)!;
                Marshal.FreeCoTaskMem((IntPtr)label_ptr);
            }
            return label;
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetObjectLabelEXT(this GL.EXTExtension glInstance, GLEnum type, uint obj, int bufSize, int[] length, out string label)
        {
            fixed (int* length_ptr = length) // SpanOrArrayLayer
            {
                var label_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                glInstance.GetObjectLabelEXT(type, obj, bufSize, length_ptr, label_ptr);
                label = Marshal.PtrToStringUTF8((IntPtr)label_ptr)!;
                Marshal.FreeCoTaskMem((IntPtr)label_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.OutToReturnOverloader
        public static unsafe string GetObjectLabelEXT(this GL.EXTExtension glInstance, GLEnum type, uint obj, int bufSize, ref int length)
        {
            string label;
            fixed (int* length_ptr = &length) // RefInsteadOfPointerLayer
            {
                var label_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                glInstance.GetObjectLabelEXT(type, obj, bufSize, length_ptr, label_ptr);
                label = Marshal.PtrToStringUTF8((IntPtr)label_ptr)!;
                Marshal.FreeCoTaskMem((IntPtr)label_ptr);
            }
            return label;
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void GetObjectLabelEXT(this GL.EXTExtension glInstance, GLEnum type, uint obj, int bufSize, ref int length, out string label)
        {
            fixed (int* length_ptr = &length) // RefInsteadOfPointerLayer
            {
                var label_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                glInstance.GetObjectLabelEXT(type, obj, bufSize, length_ptr, label_ptr);
                label = Marshal.PtrToStringUTF8((IntPtr)label_ptr)!;
                Marshal.FreeCoTaskMem((IntPtr)label_ptr);
            }
        }

        // InsertEventMarkerEXT overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.Transformer
        public static unsafe void InsertEventMarkerEXT(this GL.EXTExtension glInstance, int length, string marker)
        {
            byte* marker_ptr = (byte*)Marshal.StringToCoTaskMemUTF8(marker);
            glInstance.InsertEventMarkerEXT(length, marker_ptr);
            Marshal.FreeCoTaskMem((IntPtr)marker_ptr);
        }

        // PushGroupMarkerEXT overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.Transformer
        public static unsafe void PushGroupMarkerEXT(this GL.EXTExtension glInstance, int length, string marker)
        {
            byte* marker_ptr = (byte*)Marshal.StringToCoTaskMemUTF8(marker);
            glInstance.PushGroupMarkerEXT(length, marker_ptr);
            Marshal.FreeCoTaskMem((IntPtr)marker_ptr);
        }

        // MatrixLoadfEXT overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void MatrixLoadfEXT(this GL.EXTExtension glInstance, MatrixMode mode, ReadOnlySpan<float> m)
        {
            fixed (float* m_ptr = m) // SpanOrArrayLayer
            {
                glInstance.MatrixLoadfEXT(mode, m_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void MatrixLoadfEXT(this GL.EXTExtension glInstance, MatrixMode mode, float[] m)
        {
            fixed (float* m_ptr = m) // SpanOrArrayLayer
            {
                glInstance.MatrixLoadfEXT(mode, m_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void MatrixLoadfEXT(this GL.EXTExtension glInstance, MatrixMode mode, in float m)
        {
            fixed (float* m_ptr = &m) // RefInsteadOfPointerLayer
            {
                glInstance.MatrixLoadfEXT(mode, m_ptr);
            }
        }

        // MatrixLoaddEXT overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void MatrixLoaddEXT(this GL.EXTExtension glInstance, MatrixMode mode, ReadOnlySpan<double> m)
        {
            fixed (double* m_ptr = m) // SpanOrArrayLayer
            {
                glInstance.MatrixLoaddEXT(mode, m_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void MatrixLoaddEXT(this GL.EXTExtension glInstance, MatrixMode mode, double[] m)
        {
            fixed (double* m_ptr = m) // SpanOrArrayLayer
            {
                glInstance.MatrixLoaddEXT(mode, m_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void MatrixLoaddEXT(this GL.EXTExtension glInstance, MatrixMode mode, in double m)
        {
            fixed (double* m_ptr = &m) // RefInsteadOfPointerLayer
            {
                glInstance.MatrixLoaddEXT(mode, m_ptr);
            }
        }

        // MatrixMultfEXT overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void MatrixMultfEXT(this GL.EXTExtension glInstance, MatrixMode mode, ReadOnlySpan<float> m)
        {
            fixed (float* m_ptr = m) // SpanOrArrayLayer
            {
                glInstance.MatrixMultfEXT(mode, m_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void MatrixMultfEXT(this GL.EXTExtension glInstance, MatrixMode mode, float[] m)
        {
            fixed (float* m_ptr = m) // SpanOrArrayLayer
            {
                glInstance.MatrixMultfEXT(mode, m_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void MatrixMultfEXT(this GL.EXTExtension glInstance, MatrixMode mode, in float m)
        {
            fixed (float* m_ptr = &m) // RefInsteadOfPointerLayer
            {
                glInstance.MatrixMultfEXT(mode, m_ptr);
            }
        }

        // MatrixMultdEXT overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void MatrixMultdEXT(this GL.EXTExtension glInstance, MatrixMode mode, ReadOnlySpan<double> m)
        {
            fixed (double* m_ptr = m) // SpanOrArrayLayer
            {
                glInstance.MatrixMultdEXT(mode, m_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void MatrixMultdEXT(this GL.EXTExtension glInstance, MatrixMode mode, double[] m)
        {
            fixed (double* m_ptr = m) // SpanOrArrayLayer
            {
                glInstance.MatrixMultdEXT(mode, m_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void MatrixMultdEXT(this GL.EXTExtension glInstance, MatrixMode mode, in double m)
        {
            fixed (double* m_ptr = &m) // RefInsteadOfPointerLayer
            {
                glInstance.MatrixMultdEXT(mode, m_ptr);
            }
        }

        // TextureParameterfvEXT overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void TextureParameterfvEXT(this GL.EXTExtension glInstance, TextureHandle texture, TextureTarget target, TextureParameterName pname, ReadOnlySpan<float> parameters)
        {
            fixed (float* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.TextureParameterfvEXT(texture, target, pname, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void TextureParameterfvEXT(this GL.EXTExtension glInstance, TextureHandle texture, TextureTarget target, TextureParameterName pname, float[] parameters)
        {
            fixed (float* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.TextureParameterfvEXT(texture, target, pname, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void TextureParameterfvEXT(this GL.EXTExtension glInstance, TextureHandle texture, TextureTarget target, TextureParameterName pname, in float parameters)
        {
            fixed (float* parameters_ptr = &parameters) // RefInsteadOfPointerLayer
            {
                glInstance.TextureParameterfvEXT(texture, target, pname, parameters_ptr);
            }
        }

        // TextureParameterivEXT overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void TextureParameterivEXT(this GL.EXTExtension glInstance, TextureHandle texture, TextureTarget target, TextureParameterName pname, ReadOnlySpan<int> parameters)
        {
            fixed (int* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.TextureParameterivEXT(texture, target, pname, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void TextureParameterivEXT(this GL.EXTExtension glInstance, TextureHandle texture, TextureTarget target, TextureParameterName pname, int[] parameters)
        {
            fixed (int* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.TextureParameterivEXT(texture, target, pname, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void TextureParameterivEXT(this GL.EXTExtension glInstance, TextureHandle texture, TextureTarget target, TextureParameterName pname, in int parameters)
        {
            fixed (int* parameters_ptr = &parameters) // RefInsteadOfPointerLayer
            {
                glInstance.TextureParameterivEXT(texture, target, pname, parameters_ptr);
            }
        }

        // TextureImage1DEXT overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.VoidPtrToIntPtrOverloader
        public static unsafe void TextureImage1DEXT(this GL.EXTExtension glInstance, TextureHandle texture, TextureTarget target, int level, int internalformat, int width, int border, PixelFormat format, PixelType type, IntPtr pixels)
        {
            var pixels_vptr = (void*)pixels;
            glInstance.TextureImage1DEXT(texture, target, level, internalformat, width, border, format, type, pixels_vptr);
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void TextureImage1DEXT<T1>(this GL.EXTExtension glInstance, TextureHandle texture, TextureTarget target, int level, int internalformat, int width, int border, PixelFormat format, PixelType type, ReadOnlySpan<T1> pixels)
            where T1 : unmanaged
        {
            fixed (void* pixels_ptr = pixels) // SpanOrArrayLayer
            {
                glInstance.TextureImage1DEXT(texture, target, level, internalformat, width, border, format, type, pixels_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void TextureImage1DEXT<T1>(this GL.EXTExtension glInstance, TextureHandle texture, TextureTarget target, int level, int internalformat, int width, int border, PixelFormat format, PixelType type, T1[] pixels)
            where T1 : unmanaged
        {
            fixed (void* pixels_ptr = pixels) // SpanOrArrayLayer
            {
                glInstance.TextureImage1DEXT(texture, target, level, internalformat, width, border, format, type, pixels_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void TextureImage1DEXT<T1>(this GL.EXTExtension glInstance, TextureHandle texture, TextureTarget target, int level, int internalformat, int width, int border, PixelFormat format, PixelType type, in T1 pixels)
            where T1 : unmanaged
        {
            fixed (void* pixels_ptr = &pixels) // RefInsteadOfPointerLayer
            {
                glInstance.TextureImage1DEXT(texture, target, level, internalformat, width, border, format, type, pixels_ptr);
            }
        }

        // TextureImage2DEXT overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.VoidPtrToIntPtrOverloader
        public static unsafe void TextureImage2DEXT(this GL.EXTExtension glInstance, TextureHandle texture, TextureTarget target, int level, int internalformat, int width, int height, int border, PixelFormat format, PixelType type, IntPtr pixels)
        {
            var pixels_vptr = (void*)pixels;
            glInstance.TextureImage2DEXT(texture, target, level, internalformat, width, height, border, format, type, pixels_vptr);
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void TextureImage2DEXT<T1>(this GL.EXTExtension glInstance, TextureHandle texture, TextureTarget target, int level, int internalformat, int width, int height, int border, PixelFormat format, PixelType type, ReadOnlySpan<T1> pixels)
            where T1 : unmanaged
        {
            fixed (void* pixels_ptr = pixels) // SpanOrArrayLayer
            {
                glInstance.TextureImage2DEXT(texture, target, level, internalformat, width, height, border, format, type, pixels_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void TextureImage2DEXT<T1>(this GL.EXTExtension glInstance, TextureHandle texture, TextureTarget target, int level, int internalformat, int width, int height, int border, PixelFormat format, PixelType type, T1[] pixels)
            where T1 : unmanaged
        {
            fixed (void* pixels_ptr = pixels) // SpanOrArrayLayer
            {
                glInstance.TextureImage2DEXT(texture, target, level, internalformat, width, height, border, format, type, pixels_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void TextureImage2DEXT<T1>(this GL.EXTExtension glInstance, TextureHandle texture, TextureTarget target, int level, int internalformat, int width, int height, int border, PixelFormat format, PixelType type, in T1 pixels)
            where T1 : unmanaged
        {
            fixed (void* pixels_ptr = &pixels) // RefInsteadOfPointerLayer
            {
                glInstance.TextureImage2DEXT(texture, target, level, internalformat, width, height, border, format, type, pixels_ptr);
            }
        }

        // TextureSubImage1DEXT overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.VoidPtrToIntPtrOverloader
        public static unsafe void TextureSubImage1DEXT(this GL.EXTExtension glInstance, TextureHandle texture, TextureTarget target, int level, int xoffset, int width, PixelFormat format, PixelType type, IntPtr pixels)
        {
            var pixels_vptr = (void*)pixels;
            glInstance.TextureSubImage1DEXT(texture, target, level, xoffset, width, format, type, pixels_vptr);
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void TextureSubImage1DEXT<T1>(this GL.EXTExtension glInstance, TextureHandle texture, TextureTarget target, int level, int xoffset, int width, PixelFormat format, PixelType type, ReadOnlySpan<T1> pixels)
            where T1 : unmanaged
        {
            fixed (void* pixels_ptr = pixels) // SpanOrArrayLayer
            {
                glInstance.TextureSubImage1DEXT(texture, target, level, xoffset, width, format, type, pixels_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void TextureSubImage1DEXT<T1>(this GL.EXTExtension glInstance, TextureHandle texture, TextureTarget target, int level, int xoffset, int width, PixelFormat format, PixelType type, T1[] pixels)
            where T1 : unmanaged
        {
            fixed (void* pixels_ptr = pixels) // SpanOrArrayLayer
            {
                glInstance.TextureSubImage1DEXT(texture, target, level, xoffset, width, format, type, pixels_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void TextureSubImage1DEXT<T1>(this GL.EXTExtension glInstance, TextureHandle texture, TextureTarget target, int level, int xoffset, int width, PixelFormat format, PixelType type, in T1 pixels)
            where T1 : unmanaged
        {
            fixed (void* pixels_ptr = &pixels) // RefInsteadOfPointerLayer
            {
                glInstance.TextureSubImage1DEXT(texture, target, level, xoffset, width, format, type, pixels_ptr);
            }
        }

        // TextureSubImage2DEXT overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.VoidPtrToIntPtrOverloader
        public static unsafe void TextureSubImage2DEXT(this GL.EXTExtension glInstance, TextureHandle texture, TextureTarget target, int level, int xoffset, int yoffset, int width, int height, PixelFormat format, PixelType type, IntPtr pixels)
        {
            var pixels_vptr = (void*)pixels;
            glInstance.TextureSubImage2DEXT(texture, target, level, xoffset, yoffset, width, height, format, type, pixels_vptr);
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void TextureSubImage2DEXT<T1>(this GL.EXTExtension glInstance, TextureHandle texture, TextureTarget target, int level, int xoffset, int yoffset, int width, int height, PixelFormat format, PixelType type, ReadOnlySpan<T1> pixels)
            where T1 : unmanaged
        {
            fixed (void* pixels_ptr = pixels) // SpanOrArrayLayer
            {
                glInstance.TextureSubImage2DEXT(texture, target, level, xoffset, yoffset, width, height, format, type, pixels_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void TextureSubImage2DEXT<T1>(this GL.EXTExtension glInstance, TextureHandle texture, TextureTarget target, int level, int xoffset, int yoffset, int width, int height, PixelFormat format, PixelType type, T1[] pixels)
            where T1 : unmanaged
        {
            fixed (void* pixels_ptr = pixels) // SpanOrArrayLayer
            {
                glInstance.TextureSubImage2DEXT(texture, target, level, xoffset, yoffset, width, height, format, type, pixels_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void TextureSubImage2DEXT<T1>(this GL.EXTExtension glInstance, TextureHandle texture, TextureTarget target, int level, int xoffset, int yoffset, int width, int height, PixelFormat format, PixelType type, in T1 pixels)
            where T1 : unmanaged
        {
            fixed (void* pixels_ptr = &pixels) // RefInsteadOfPointerLayer
            {
                glInstance.TextureSubImage2DEXT(texture, target, level, xoffset, yoffset, width, height, format, type, pixels_ptr);
            }
        }

        // GetTextureImageEXT overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.VoidPtrToIntPtrOverloader
        public static unsafe void GetTextureImageEXT(this GL.EXTExtension glInstance, TextureHandle texture, TextureTarget target, int level, PixelFormat format, PixelType type, IntPtr pixels)
        {
            var pixels_vptr = (void*)pixels;
            glInstance.GetTextureImageEXT(texture, target, level, format, type, pixels_vptr);
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetTextureImageEXT<T1>(this GL.EXTExtension glInstance, TextureHandle texture, TextureTarget target, int level, PixelFormat format, PixelType type, Span<T1> pixels)
            where T1 : unmanaged
        {
            fixed (void* pixels_ptr = pixels) // SpanOrArrayLayer
            {
                glInstance.GetTextureImageEXT(texture, target, level, format, type, pixels_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetTextureImageEXT<T1>(this GL.EXTExtension glInstance, TextureHandle texture, TextureTarget target, int level, PixelFormat format, PixelType type, T1[] pixels)
            where T1 : unmanaged
        {
            fixed (void* pixels_ptr = pixels) // SpanOrArrayLayer
            {
                glInstance.GetTextureImageEXT(texture, target, level, format, type, pixels_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void GetTextureImageEXT<T1>(this GL.EXTExtension glInstance, TextureHandle texture, TextureTarget target, int level, PixelFormat format, PixelType type, ref T1 pixels)
            where T1 : unmanaged
        {
            fixed (void* pixels_ptr = &pixels) // RefInsteadOfPointerLayer
            {
                glInstance.GetTextureImageEXT(texture, target, level, format, type, pixels_ptr);
            }
        }

        // GetTextureParameterfvEXT overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetTextureParameterfvEXT(this GL.EXTExtension glInstance, TextureHandle texture, TextureTarget target, GetTextureParameter pname, Span<float> parameters)
        {
            fixed (float* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.GetTextureParameterfvEXT(texture, target, pname, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetTextureParameterfvEXT(this GL.EXTExtension glInstance, TextureHandle texture, TextureTarget target, GetTextureParameter pname, float[] parameters)
        {
            fixed (float* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.GetTextureParameterfvEXT(texture, target, pname, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void GetTextureParameterfvEXT(this GL.EXTExtension glInstance, TextureHandle texture, TextureTarget target, GetTextureParameter pname, ref float parameters)
        {
            fixed (float* parameters_ptr = &parameters) // RefInsteadOfPointerLayer
            {
                glInstance.GetTextureParameterfvEXT(texture, target, pname, parameters_ptr);
            }
        }

        // GetTextureParameterivEXT overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetTextureParameterivEXT(this GL.EXTExtension glInstance, TextureHandle texture, TextureTarget target, GetTextureParameter pname, Span<int> parameters)
        {
            fixed (int* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.GetTextureParameterivEXT(texture, target, pname, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetTextureParameterivEXT(this GL.EXTExtension glInstance, TextureHandle texture, TextureTarget target, GetTextureParameter pname, int[] parameters)
        {
            fixed (int* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.GetTextureParameterivEXT(texture, target, pname, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void GetTextureParameterivEXT(this GL.EXTExtension glInstance, TextureHandle texture, TextureTarget target, GetTextureParameter pname, ref int parameters)
        {
            fixed (int* parameters_ptr = &parameters) // RefInsteadOfPointerLayer
            {
                glInstance.GetTextureParameterivEXT(texture, target, pname, parameters_ptr);
            }
        }

        // GetTextureLevelParameterfvEXT overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetTextureLevelParameterfvEXT(this GL.EXTExtension glInstance, TextureHandle texture, TextureTarget target, int level, GetTextureParameter pname, Span<float> parameters)
        {
            fixed (float* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.GetTextureLevelParameterfvEXT(texture, target, level, pname, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetTextureLevelParameterfvEXT(this GL.EXTExtension glInstance, TextureHandle texture, TextureTarget target, int level, GetTextureParameter pname, float[] parameters)
        {
            fixed (float* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.GetTextureLevelParameterfvEXT(texture, target, level, pname, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void GetTextureLevelParameterfvEXT(this GL.EXTExtension glInstance, TextureHandle texture, TextureTarget target, int level, GetTextureParameter pname, ref float parameters)
        {
            fixed (float* parameters_ptr = &parameters) // RefInsteadOfPointerLayer
            {
                glInstance.GetTextureLevelParameterfvEXT(texture, target, level, pname, parameters_ptr);
            }
        }

        // GetTextureLevelParameterivEXT overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetTextureLevelParameterivEXT(this GL.EXTExtension glInstance, TextureHandle texture, TextureTarget target, int level, GetTextureParameter pname, Span<int> parameters)
        {
            fixed (int* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.GetTextureLevelParameterivEXT(texture, target, level, pname, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetTextureLevelParameterivEXT(this GL.EXTExtension glInstance, TextureHandle texture, TextureTarget target, int level, GetTextureParameter pname, int[] parameters)
        {
            fixed (int* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.GetTextureLevelParameterivEXT(texture, target, level, pname, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void GetTextureLevelParameterivEXT(this GL.EXTExtension glInstance, TextureHandle texture, TextureTarget target, int level, GetTextureParameter pname, ref int parameters)
        {
            fixed (int* parameters_ptr = &parameters) // RefInsteadOfPointerLayer
            {
                glInstance.GetTextureLevelParameterivEXT(texture, target, level, pname, parameters_ptr);
            }
        }

        // TextureImage3DEXT overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.VoidPtrToIntPtrOverloader
        public static unsafe void TextureImage3DEXT(this GL.EXTExtension glInstance, TextureHandle texture, TextureTarget target, int level, int internalformat, int width, int height, int depth, int border, PixelFormat format, PixelType type, IntPtr pixels)
        {
            var pixels_vptr = (void*)pixels;
            glInstance.TextureImage3DEXT(texture, target, level, internalformat, width, height, depth, border, format, type, pixels_vptr);
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void TextureImage3DEXT<T1>(this GL.EXTExtension glInstance, TextureHandle texture, TextureTarget target, int level, int internalformat, int width, int height, int depth, int border, PixelFormat format, PixelType type, ReadOnlySpan<T1> pixels)
            where T1 : unmanaged
        {
            fixed (void* pixels_ptr = pixels) // SpanOrArrayLayer
            {
                glInstance.TextureImage3DEXT(texture, target, level, internalformat, width, height, depth, border, format, type, pixels_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void TextureImage3DEXT<T1>(this GL.EXTExtension glInstance, TextureHandle texture, TextureTarget target, int level, int internalformat, int width, int height, int depth, int border, PixelFormat format, PixelType type, T1[] pixels)
            where T1 : unmanaged
        {
            fixed (void* pixels_ptr = pixels) // SpanOrArrayLayer
            {
                glInstance.TextureImage3DEXT(texture, target, level, internalformat, width, height, depth, border, format, type, pixels_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void TextureImage3DEXT<T1>(this GL.EXTExtension glInstance, TextureHandle texture, TextureTarget target, int level, int internalformat, int width, int height, int depth, int border, PixelFormat format, PixelType type, in T1 pixels)
            where T1 : unmanaged
        {
            fixed (void* pixels_ptr = &pixels) // RefInsteadOfPointerLayer
            {
                glInstance.TextureImage3DEXT(texture, target, level, internalformat, width, height, depth, border, format, type, pixels_ptr);
            }
        }

        // TextureSubImage3DEXT overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.VoidPtrToIntPtrOverloader
        public static unsafe void TextureSubImage3DEXT(this GL.EXTExtension glInstance, TextureHandle texture, TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, PixelFormat format, PixelType type, IntPtr pixels)
        {
            var pixels_vptr = (void*)pixels;
            glInstance.TextureSubImage3DEXT(texture, target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels_vptr);
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void TextureSubImage3DEXT<T1>(this GL.EXTExtension glInstance, TextureHandle texture, TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, PixelFormat format, PixelType type, ReadOnlySpan<T1> pixels)
            where T1 : unmanaged
        {
            fixed (void* pixels_ptr = pixels) // SpanOrArrayLayer
            {
                glInstance.TextureSubImage3DEXT(texture, target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void TextureSubImage3DEXT<T1>(this GL.EXTExtension glInstance, TextureHandle texture, TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, PixelFormat format, PixelType type, T1[] pixels)
            where T1 : unmanaged
        {
            fixed (void* pixels_ptr = pixels) // SpanOrArrayLayer
            {
                glInstance.TextureSubImage3DEXT(texture, target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void TextureSubImage3DEXT<T1>(this GL.EXTExtension glInstance, TextureHandle texture, TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, PixelFormat format, PixelType type, in T1 pixels)
            where T1 : unmanaged
        {
            fixed (void* pixels_ptr = &pixels) // RefInsteadOfPointerLayer
            {
                glInstance.TextureSubImage3DEXT(texture, target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels_ptr);
            }
        }

        // MultiTexCoordPointerEXT overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.VoidPtrToIntPtrOverloader
        public static unsafe void MultiTexCoordPointerEXT(this GL.EXTExtension glInstance, TextureUnit texunit, int size, TexCoordPointerType type, int stride, IntPtr pointer)
        {
            var pointer_vptr = (void*)pointer;
            glInstance.MultiTexCoordPointerEXT(texunit, size, type, stride, pointer_vptr);
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void MultiTexCoordPointerEXT<T1>(this GL.EXTExtension glInstance, TextureUnit texunit, int size, TexCoordPointerType type, int stride, ReadOnlySpan<T1> pointer)
            where T1 : unmanaged
        {
            fixed (void* pointer_ptr = pointer) // SpanOrArrayLayer
            {
                glInstance.MultiTexCoordPointerEXT(texunit, size, type, stride, pointer_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void MultiTexCoordPointerEXT<T1>(this GL.EXTExtension glInstance, TextureUnit texunit, int size, TexCoordPointerType type, int stride, T1[] pointer)
            where T1 : unmanaged
        {
            fixed (void* pointer_ptr = pointer) // SpanOrArrayLayer
            {
                glInstance.MultiTexCoordPointerEXT(texunit, size, type, stride, pointer_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void MultiTexCoordPointerEXT<T1>(this GL.EXTExtension glInstance, TextureUnit texunit, int size, TexCoordPointerType type, int stride, in T1 pointer)
            where T1 : unmanaged
        {
            fixed (void* pointer_ptr = &pointer) // RefInsteadOfPointerLayer
            {
                glInstance.MultiTexCoordPointerEXT(texunit, size, type, stride, pointer_ptr);
            }
        }

        // MultiTexEnvfvEXT overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void MultiTexEnvfvEXT(this GL.EXTExtension glInstance, TextureUnit texunit, TextureEnvTarget target, TextureEnvParameter pname, ReadOnlySpan<float> parameters)
        {
            fixed (float* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.MultiTexEnvfvEXT(texunit, target, pname, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void MultiTexEnvfvEXT(this GL.EXTExtension glInstance, TextureUnit texunit, TextureEnvTarget target, TextureEnvParameter pname, float[] parameters)
        {
            fixed (float* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.MultiTexEnvfvEXT(texunit, target, pname, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void MultiTexEnvfvEXT(this GL.EXTExtension glInstance, TextureUnit texunit, TextureEnvTarget target, TextureEnvParameter pname, in float parameters)
        {
            fixed (float* parameters_ptr = &parameters) // RefInsteadOfPointerLayer
            {
                glInstance.MultiTexEnvfvEXT(texunit, target, pname, parameters_ptr);
            }
        }

        // MultiTexEnvivEXT overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void MultiTexEnvivEXT(this GL.EXTExtension glInstance, TextureUnit texunit, TextureEnvTarget target, TextureEnvParameter pname, ReadOnlySpan<int> parameters)
        {
            fixed (int* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.MultiTexEnvivEXT(texunit, target, pname, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void MultiTexEnvivEXT(this GL.EXTExtension glInstance, TextureUnit texunit, TextureEnvTarget target, TextureEnvParameter pname, int[] parameters)
        {
            fixed (int* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.MultiTexEnvivEXT(texunit, target, pname, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void MultiTexEnvivEXT(this GL.EXTExtension glInstance, TextureUnit texunit, TextureEnvTarget target, TextureEnvParameter pname, in int parameters)
        {
            fixed (int* parameters_ptr = &parameters) // RefInsteadOfPointerLayer
            {
                glInstance.MultiTexEnvivEXT(texunit, target, pname, parameters_ptr);
            }
        }

        // MultiTexGendvEXT overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void MultiTexGendvEXT(this GL.EXTExtension glInstance, TextureUnit texunit, TextureCoordName coord, TextureGenParameter pname, ReadOnlySpan<double> parameters)
        {
            fixed (double* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.MultiTexGendvEXT(texunit, coord, pname, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void MultiTexGendvEXT(this GL.EXTExtension glInstance, TextureUnit texunit, TextureCoordName coord, TextureGenParameter pname, double[] parameters)
        {
            fixed (double* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.MultiTexGendvEXT(texunit, coord, pname, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void MultiTexGendvEXT(this GL.EXTExtension glInstance, TextureUnit texunit, TextureCoordName coord, TextureGenParameter pname, in double parameters)
        {
            fixed (double* parameters_ptr = &parameters) // RefInsteadOfPointerLayer
            {
                glInstance.MultiTexGendvEXT(texunit, coord, pname, parameters_ptr);
            }
        }

        // MultiTexGenfvEXT overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void MultiTexGenfvEXT(this GL.EXTExtension glInstance, TextureUnit texunit, TextureCoordName coord, TextureGenParameter pname, ReadOnlySpan<float> parameters)
        {
            fixed (float* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.MultiTexGenfvEXT(texunit, coord, pname, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void MultiTexGenfvEXT(this GL.EXTExtension glInstance, TextureUnit texunit, TextureCoordName coord, TextureGenParameter pname, float[] parameters)
        {
            fixed (float* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.MultiTexGenfvEXT(texunit, coord, pname, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void MultiTexGenfvEXT(this GL.EXTExtension glInstance, TextureUnit texunit, TextureCoordName coord, TextureGenParameter pname, in float parameters)
        {
            fixed (float* parameters_ptr = &parameters) // RefInsteadOfPointerLayer
            {
                glInstance.MultiTexGenfvEXT(texunit, coord, pname, parameters_ptr);
            }
        }

        // MultiTexGenivEXT overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void MultiTexGenivEXT(this GL.EXTExtension glInstance, TextureUnit texunit, TextureCoordName coord, TextureGenParameter pname, ReadOnlySpan<int> parameters)
        {
            fixed (int* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.MultiTexGenivEXT(texunit, coord, pname, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void MultiTexGenivEXT(this GL.EXTExtension glInstance, TextureUnit texunit, TextureCoordName coord, TextureGenParameter pname, int[] parameters)
        {
            fixed (int* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.MultiTexGenivEXT(texunit, coord, pname, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void MultiTexGenivEXT(this GL.EXTExtension glInstance, TextureUnit texunit, TextureCoordName coord, TextureGenParameter pname, in int parameters)
        {
            fixed (int* parameters_ptr = &parameters) // RefInsteadOfPointerLayer
            {
                glInstance.MultiTexGenivEXT(texunit, coord, pname, parameters_ptr);
            }
        }

        // GetMultiTexEnvfvEXT overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetMultiTexEnvfvEXT(this GL.EXTExtension glInstance, TextureUnit texunit, TextureEnvTarget target, TextureEnvParameter pname, Span<float> parameters)
        {
            fixed (float* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.GetMultiTexEnvfvEXT(texunit, target, pname, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetMultiTexEnvfvEXT(this GL.EXTExtension glInstance, TextureUnit texunit, TextureEnvTarget target, TextureEnvParameter pname, float[] parameters)
        {
            fixed (float* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.GetMultiTexEnvfvEXT(texunit, target, pname, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void GetMultiTexEnvfvEXT(this GL.EXTExtension glInstance, TextureUnit texunit, TextureEnvTarget target, TextureEnvParameter pname, ref float parameters)
        {
            fixed (float* parameters_ptr = &parameters) // RefInsteadOfPointerLayer
            {
                glInstance.GetMultiTexEnvfvEXT(texunit, target, pname, parameters_ptr);
            }
        }

        // GetMultiTexEnvivEXT overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetMultiTexEnvivEXT(this GL.EXTExtension glInstance, TextureUnit texunit, TextureEnvTarget target, TextureEnvParameter pname, Span<int> parameters)
        {
            fixed (int* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.GetMultiTexEnvivEXT(texunit, target, pname, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetMultiTexEnvivEXT(this GL.EXTExtension glInstance, TextureUnit texunit, TextureEnvTarget target, TextureEnvParameter pname, int[] parameters)
        {
            fixed (int* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.GetMultiTexEnvivEXT(texunit, target, pname, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void GetMultiTexEnvivEXT(this GL.EXTExtension glInstance, TextureUnit texunit, TextureEnvTarget target, TextureEnvParameter pname, ref int parameters)
        {
            fixed (int* parameters_ptr = &parameters) // RefInsteadOfPointerLayer
            {
                glInstance.GetMultiTexEnvivEXT(texunit, target, pname, parameters_ptr);
            }
        }

        // GetMultiTexGendvEXT overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetMultiTexGendvEXT(this GL.EXTExtension glInstance, TextureUnit texunit, TextureCoordName coord, TextureGenParameter pname, Span<double> parameters)
        {
            fixed (double* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.GetMultiTexGendvEXT(texunit, coord, pname, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetMultiTexGendvEXT(this GL.EXTExtension glInstance, TextureUnit texunit, TextureCoordName coord, TextureGenParameter pname, double[] parameters)
        {
            fixed (double* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.GetMultiTexGendvEXT(texunit, coord, pname, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void GetMultiTexGendvEXT(this GL.EXTExtension glInstance, TextureUnit texunit, TextureCoordName coord, TextureGenParameter pname, ref double parameters)
        {
            fixed (double* parameters_ptr = &parameters) // RefInsteadOfPointerLayer
            {
                glInstance.GetMultiTexGendvEXT(texunit, coord, pname, parameters_ptr);
            }
        }

        // GetMultiTexGenfvEXT overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetMultiTexGenfvEXT(this GL.EXTExtension glInstance, TextureUnit texunit, TextureCoordName coord, TextureGenParameter pname, Span<float> parameters)
        {
            fixed (float* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.GetMultiTexGenfvEXT(texunit, coord, pname, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetMultiTexGenfvEXT(this GL.EXTExtension glInstance, TextureUnit texunit, TextureCoordName coord, TextureGenParameter pname, float[] parameters)
        {
            fixed (float* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.GetMultiTexGenfvEXT(texunit, coord, pname, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void GetMultiTexGenfvEXT(this GL.EXTExtension glInstance, TextureUnit texunit, TextureCoordName coord, TextureGenParameter pname, ref float parameters)
        {
            fixed (float* parameters_ptr = &parameters) // RefInsteadOfPointerLayer
            {
                glInstance.GetMultiTexGenfvEXT(texunit, coord, pname, parameters_ptr);
            }
        }

        // GetMultiTexGenivEXT overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetMultiTexGenivEXT(this GL.EXTExtension glInstance, TextureUnit texunit, TextureCoordName coord, TextureGenParameter pname, Span<int> parameters)
        {
            fixed (int* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.GetMultiTexGenivEXT(texunit, coord, pname, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetMultiTexGenivEXT(this GL.EXTExtension glInstance, TextureUnit texunit, TextureCoordName coord, TextureGenParameter pname, int[] parameters)
        {
            fixed (int* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.GetMultiTexGenivEXT(texunit, coord, pname, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void GetMultiTexGenivEXT(this GL.EXTExtension glInstance, TextureUnit texunit, TextureCoordName coord, TextureGenParameter pname, ref int parameters)
        {
            fixed (int* parameters_ptr = &parameters) // RefInsteadOfPointerLayer
            {
                glInstance.GetMultiTexGenivEXT(texunit, coord, pname, parameters_ptr);
            }
        }

        // MultiTexParameterivEXT overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void MultiTexParameterivEXT(this GL.EXTExtension glInstance, TextureUnit texunit, TextureTarget target, TextureParameterName pname, ReadOnlySpan<int> parameters)
        {
            fixed (int* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.MultiTexParameterivEXT(texunit, target, pname, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void MultiTexParameterivEXT(this GL.EXTExtension glInstance, TextureUnit texunit, TextureTarget target, TextureParameterName pname, int[] parameters)
        {
            fixed (int* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.MultiTexParameterivEXT(texunit, target, pname, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void MultiTexParameterivEXT(this GL.EXTExtension glInstance, TextureUnit texunit, TextureTarget target, TextureParameterName pname, in int parameters)
        {
            fixed (int* parameters_ptr = &parameters) // RefInsteadOfPointerLayer
            {
                glInstance.MultiTexParameterivEXT(texunit, target, pname, parameters_ptr);
            }
        }

        // MultiTexParameterfvEXT overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void MultiTexParameterfvEXT(this GL.EXTExtension glInstance, TextureUnit texunit, TextureTarget target, TextureParameterName pname, ReadOnlySpan<float> parameters)
        {
            fixed (float* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.MultiTexParameterfvEXT(texunit, target, pname, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void MultiTexParameterfvEXT(this GL.EXTExtension glInstance, TextureUnit texunit, TextureTarget target, TextureParameterName pname, float[] parameters)
        {
            fixed (float* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.MultiTexParameterfvEXT(texunit, target, pname, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void MultiTexParameterfvEXT(this GL.EXTExtension glInstance, TextureUnit texunit, TextureTarget target, TextureParameterName pname, in float parameters)
        {
            fixed (float* parameters_ptr = &parameters) // RefInsteadOfPointerLayer
            {
                glInstance.MultiTexParameterfvEXT(texunit, target, pname, parameters_ptr);
            }
        }

        // MultiTexImage1DEXT overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.VoidPtrToIntPtrOverloader
        public static unsafe void MultiTexImage1DEXT(this GL.EXTExtension glInstance, TextureUnit texunit, TextureTarget target, int level, int internalformat, int width, int border, PixelFormat format, PixelType type, IntPtr pixels)
        {
            var pixels_vptr = (void*)pixels;
            glInstance.MultiTexImage1DEXT(texunit, target, level, internalformat, width, border, format, type, pixels_vptr);
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void MultiTexImage1DEXT<T1>(this GL.EXTExtension glInstance, TextureUnit texunit, TextureTarget target, int level, int internalformat, int width, int border, PixelFormat format, PixelType type, ReadOnlySpan<T1> pixels)
            where T1 : unmanaged
        {
            fixed (void* pixels_ptr = pixels) // SpanOrArrayLayer
            {
                glInstance.MultiTexImage1DEXT(texunit, target, level, internalformat, width, border, format, type, pixels_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void MultiTexImage1DEXT<T1>(this GL.EXTExtension glInstance, TextureUnit texunit, TextureTarget target, int level, int internalformat, int width, int border, PixelFormat format, PixelType type, T1[] pixels)
            where T1 : unmanaged
        {
            fixed (void* pixels_ptr = pixels) // SpanOrArrayLayer
            {
                glInstance.MultiTexImage1DEXT(texunit, target, level, internalformat, width, border, format, type, pixels_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void MultiTexImage1DEXT<T1>(this GL.EXTExtension glInstance, TextureUnit texunit, TextureTarget target, int level, int internalformat, int width, int border, PixelFormat format, PixelType type, in T1 pixels)
            where T1 : unmanaged
        {
            fixed (void* pixels_ptr = &pixels) // RefInsteadOfPointerLayer
            {
                glInstance.MultiTexImage1DEXT(texunit, target, level, internalformat, width, border, format, type, pixels_ptr);
            }
        }

        // MultiTexImage2DEXT overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.VoidPtrToIntPtrOverloader
        public static unsafe void MultiTexImage2DEXT(this GL.EXTExtension glInstance, TextureUnit texunit, TextureTarget target, int level, int internalformat, int width, int height, int border, PixelFormat format, PixelType type, IntPtr pixels)
        {
            var pixels_vptr = (void*)pixels;
            glInstance.MultiTexImage2DEXT(texunit, target, level, internalformat, width, height, border, format, type, pixels_vptr);
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void MultiTexImage2DEXT<T1>(this GL.EXTExtension glInstance, TextureUnit texunit, TextureTarget target, int level, int internalformat, int width, int height, int border, PixelFormat format, PixelType type, ReadOnlySpan<T1> pixels)
            where T1 : unmanaged
        {
            fixed (void* pixels_ptr = pixels) // SpanOrArrayLayer
            {
                glInstance.MultiTexImage2DEXT(texunit, target, level, internalformat, width, height, border, format, type, pixels_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void MultiTexImage2DEXT<T1>(this GL.EXTExtension glInstance, TextureUnit texunit, TextureTarget target, int level, int internalformat, int width, int height, int border, PixelFormat format, PixelType type, T1[] pixels)
            where T1 : unmanaged
        {
            fixed (void* pixels_ptr = pixels) // SpanOrArrayLayer
            {
                glInstance.MultiTexImage2DEXT(texunit, target, level, internalformat, width, height, border, format, type, pixels_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void MultiTexImage2DEXT<T1>(this GL.EXTExtension glInstance, TextureUnit texunit, TextureTarget target, int level, int internalformat, int width, int height, int border, PixelFormat format, PixelType type, in T1 pixels)
            where T1 : unmanaged
        {
            fixed (void* pixels_ptr = &pixels) // RefInsteadOfPointerLayer
            {
                glInstance.MultiTexImage2DEXT(texunit, target, level, internalformat, width, height, border, format, type, pixels_ptr);
            }
        }

        // MultiTexSubImage1DEXT overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.VoidPtrToIntPtrOverloader
        public static unsafe void MultiTexSubImage1DEXT(this GL.EXTExtension glInstance, TextureUnit texunit, TextureTarget target, int level, int xoffset, int width, PixelFormat format, PixelType type, IntPtr pixels)
        {
            var pixels_vptr = (void*)pixels;
            glInstance.MultiTexSubImage1DEXT(texunit, target, level, xoffset, width, format, type, pixels_vptr);
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void MultiTexSubImage1DEXT<T1>(this GL.EXTExtension glInstance, TextureUnit texunit, TextureTarget target, int level, int xoffset, int width, PixelFormat format, PixelType type, ReadOnlySpan<T1> pixels)
            where T1 : unmanaged
        {
            fixed (void* pixels_ptr = pixels) // SpanOrArrayLayer
            {
                glInstance.MultiTexSubImage1DEXT(texunit, target, level, xoffset, width, format, type, pixels_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void MultiTexSubImage1DEXT<T1>(this GL.EXTExtension glInstance, TextureUnit texunit, TextureTarget target, int level, int xoffset, int width, PixelFormat format, PixelType type, T1[] pixels)
            where T1 : unmanaged
        {
            fixed (void* pixels_ptr = pixels) // SpanOrArrayLayer
            {
                glInstance.MultiTexSubImage1DEXT(texunit, target, level, xoffset, width, format, type, pixels_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void MultiTexSubImage1DEXT<T1>(this GL.EXTExtension glInstance, TextureUnit texunit, TextureTarget target, int level, int xoffset, int width, PixelFormat format, PixelType type, in T1 pixels)
            where T1 : unmanaged
        {
            fixed (void* pixels_ptr = &pixels) // RefInsteadOfPointerLayer
            {
                glInstance.MultiTexSubImage1DEXT(texunit, target, level, xoffset, width, format, type, pixels_ptr);
            }
        }

        // MultiTexSubImage2DEXT overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.VoidPtrToIntPtrOverloader
        public static unsafe void MultiTexSubImage2DEXT(this GL.EXTExtension glInstance, TextureUnit texunit, TextureTarget target, int level, int xoffset, int yoffset, int width, int height, PixelFormat format, PixelType type, IntPtr pixels)
        {
            var pixels_vptr = (void*)pixels;
            glInstance.MultiTexSubImage2DEXT(texunit, target, level, xoffset, yoffset, width, height, format, type, pixels_vptr);
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void MultiTexSubImage2DEXT<T1>(this GL.EXTExtension glInstance, TextureUnit texunit, TextureTarget target, int level, int xoffset, int yoffset, int width, int height, PixelFormat format, PixelType type, ReadOnlySpan<T1> pixels)
            where T1 : unmanaged
        {
            fixed (void* pixels_ptr = pixels) // SpanOrArrayLayer
            {
                glInstance.MultiTexSubImage2DEXT(texunit, target, level, xoffset, yoffset, width, height, format, type, pixels_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void MultiTexSubImage2DEXT<T1>(this GL.EXTExtension glInstance, TextureUnit texunit, TextureTarget target, int level, int xoffset, int yoffset, int width, int height, PixelFormat format, PixelType type, T1[] pixels)
            where T1 : unmanaged
        {
            fixed (void* pixels_ptr = pixels) // SpanOrArrayLayer
            {
                glInstance.MultiTexSubImage2DEXT(texunit, target, level, xoffset, yoffset, width, height, format, type, pixels_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void MultiTexSubImage2DEXT<T1>(this GL.EXTExtension glInstance, TextureUnit texunit, TextureTarget target, int level, int xoffset, int yoffset, int width, int height, PixelFormat format, PixelType type, in T1 pixels)
            where T1 : unmanaged
        {
            fixed (void* pixels_ptr = &pixels) // RefInsteadOfPointerLayer
            {
                glInstance.MultiTexSubImage2DEXT(texunit, target, level, xoffset, yoffset, width, height, format, type, pixels_ptr);
            }
        }

        // GetMultiTexImageEXT overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.VoidPtrToIntPtrOverloader
        public static unsafe void GetMultiTexImageEXT(this GL.EXTExtension glInstance, TextureUnit texunit, TextureTarget target, int level, PixelFormat format, PixelType type, IntPtr pixels)
        {
            var pixels_vptr = (void*)pixels;
            glInstance.GetMultiTexImageEXT(texunit, target, level, format, type, pixels_vptr);
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetMultiTexImageEXT<T1>(this GL.EXTExtension glInstance, TextureUnit texunit, TextureTarget target, int level, PixelFormat format, PixelType type, Span<T1> pixels)
            where T1 : unmanaged
        {
            fixed (void* pixels_ptr = pixels) // SpanOrArrayLayer
            {
                glInstance.GetMultiTexImageEXT(texunit, target, level, format, type, pixels_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetMultiTexImageEXT<T1>(this GL.EXTExtension glInstance, TextureUnit texunit, TextureTarget target, int level, PixelFormat format, PixelType type, T1[] pixels)
            where T1 : unmanaged
        {
            fixed (void* pixels_ptr = pixels) // SpanOrArrayLayer
            {
                glInstance.GetMultiTexImageEXT(texunit, target, level, format, type, pixels_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void GetMultiTexImageEXT<T1>(this GL.EXTExtension glInstance, TextureUnit texunit, TextureTarget target, int level, PixelFormat format, PixelType type, ref T1 pixels)
            where T1 : unmanaged
        {
            fixed (void* pixels_ptr = &pixels) // RefInsteadOfPointerLayer
            {
                glInstance.GetMultiTexImageEXT(texunit, target, level, format, type, pixels_ptr);
            }
        }

        // GetMultiTexParameterfvEXT overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetMultiTexParameterfvEXT(this GL.EXTExtension glInstance, TextureUnit texunit, TextureTarget target, GetTextureParameter pname, Span<float> parameters)
        {
            fixed (float* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.GetMultiTexParameterfvEXT(texunit, target, pname, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetMultiTexParameterfvEXT(this GL.EXTExtension glInstance, TextureUnit texunit, TextureTarget target, GetTextureParameter pname, float[] parameters)
        {
            fixed (float* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.GetMultiTexParameterfvEXT(texunit, target, pname, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void GetMultiTexParameterfvEXT(this GL.EXTExtension glInstance, TextureUnit texunit, TextureTarget target, GetTextureParameter pname, ref float parameters)
        {
            fixed (float* parameters_ptr = &parameters) // RefInsteadOfPointerLayer
            {
                glInstance.GetMultiTexParameterfvEXT(texunit, target, pname, parameters_ptr);
            }
        }

        // GetMultiTexParameterivEXT overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetMultiTexParameterivEXT(this GL.EXTExtension glInstance, TextureUnit texunit, TextureTarget target, GetTextureParameter pname, Span<int> parameters)
        {
            fixed (int* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.GetMultiTexParameterivEXT(texunit, target, pname, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetMultiTexParameterivEXT(this GL.EXTExtension glInstance, TextureUnit texunit, TextureTarget target, GetTextureParameter pname, int[] parameters)
        {
            fixed (int* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.GetMultiTexParameterivEXT(texunit, target, pname, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void GetMultiTexParameterivEXT(this GL.EXTExtension glInstance, TextureUnit texunit, TextureTarget target, GetTextureParameter pname, ref int parameters)
        {
            fixed (int* parameters_ptr = &parameters) // RefInsteadOfPointerLayer
            {
                glInstance.GetMultiTexParameterivEXT(texunit, target, pname, parameters_ptr);
            }
        }

        // GetMultiTexLevelParameterfvEXT overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetMultiTexLevelParameterfvEXT(this GL.EXTExtension glInstance, TextureUnit texunit, TextureTarget target, int level, GetTextureParameter pname, Span<float> parameters)
        {
            fixed (float* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.GetMultiTexLevelParameterfvEXT(texunit, target, level, pname, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetMultiTexLevelParameterfvEXT(this GL.EXTExtension glInstance, TextureUnit texunit, TextureTarget target, int level, GetTextureParameter pname, float[] parameters)
        {
            fixed (float* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.GetMultiTexLevelParameterfvEXT(texunit, target, level, pname, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void GetMultiTexLevelParameterfvEXT(this GL.EXTExtension glInstance, TextureUnit texunit, TextureTarget target, int level, GetTextureParameter pname, ref float parameters)
        {
            fixed (float* parameters_ptr = &parameters) // RefInsteadOfPointerLayer
            {
                glInstance.GetMultiTexLevelParameterfvEXT(texunit, target, level, pname, parameters_ptr);
            }
        }

        // GetMultiTexLevelParameterivEXT overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetMultiTexLevelParameterivEXT(this GL.EXTExtension glInstance, TextureUnit texunit, TextureTarget target, int level, GetTextureParameter pname, Span<int> parameters)
        {
            fixed (int* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.GetMultiTexLevelParameterivEXT(texunit, target, level, pname, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetMultiTexLevelParameterivEXT(this GL.EXTExtension glInstance, TextureUnit texunit, TextureTarget target, int level, GetTextureParameter pname, int[] parameters)
        {
            fixed (int* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.GetMultiTexLevelParameterivEXT(texunit, target, level, pname, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void GetMultiTexLevelParameterivEXT(this GL.EXTExtension glInstance, TextureUnit texunit, TextureTarget target, int level, GetTextureParameter pname, ref int parameters)
        {
            fixed (int* parameters_ptr = &parameters) // RefInsteadOfPointerLayer
            {
                glInstance.GetMultiTexLevelParameterivEXT(texunit, target, level, pname, parameters_ptr);
            }
        }

        // MultiTexImage3DEXT overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.VoidPtrToIntPtrOverloader
        public static unsafe void MultiTexImage3DEXT(this GL.EXTExtension glInstance, TextureUnit texunit, TextureTarget target, int level, int internalformat, int width, int height, int depth, int border, PixelFormat format, PixelType type, IntPtr pixels)
        {
            var pixels_vptr = (void*)pixels;
            glInstance.MultiTexImage3DEXT(texunit, target, level, internalformat, width, height, depth, border, format, type, pixels_vptr);
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void MultiTexImage3DEXT<T1>(this GL.EXTExtension glInstance, TextureUnit texunit, TextureTarget target, int level, int internalformat, int width, int height, int depth, int border, PixelFormat format, PixelType type, ReadOnlySpan<T1> pixels)
            where T1 : unmanaged
        {
            fixed (void* pixels_ptr = pixels) // SpanOrArrayLayer
            {
                glInstance.MultiTexImage3DEXT(texunit, target, level, internalformat, width, height, depth, border, format, type, pixels_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void MultiTexImage3DEXT<T1>(this GL.EXTExtension glInstance, TextureUnit texunit, TextureTarget target, int level, int internalformat, int width, int height, int depth, int border, PixelFormat format, PixelType type, T1[] pixels)
            where T1 : unmanaged
        {
            fixed (void* pixels_ptr = pixels) // SpanOrArrayLayer
            {
                glInstance.MultiTexImage3DEXT(texunit, target, level, internalformat, width, height, depth, border, format, type, pixels_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void MultiTexImage3DEXT<T1>(this GL.EXTExtension glInstance, TextureUnit texunit, TextureTarget target, int level, int internalformat, int width, int height, int depth, int border, PixelFormat format, PixelType type, in T1 pixels)
            where T1 : unmanaged
        {
            fixed (void* pixels_ptr = &pixels) // RefInsteadOfPointerLayer
            {
                glInstance.MultiTexImage3DEXT(texunit, target, level, internalformat, width, height, depth, border, format, type, pixels_ptr);
            }
        }

        // MultiTexSubImage3DEXT overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.VoidPtrToIntPtrOverloader
        public static unsafe void MultiTexSubImage3DEXT(this GL.EXTExtension glInstance, TextureUnit texunit, TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, PixelFormat format, PixelType type, IntPtr pixels)
        {
            var pixels_vptr = (void*)pixels;
            glInstance.MultiTexSubImage3DEXT(texunit, target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels_vptr);
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void MultiTexSubImage3DEXT<T1>(this GL.EXTExtension glInstance, TextureUnit texunit, TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, PixelFormat format, PixelType type, ReadOnlySpan<T1> pixels)
            where T1 : unmanaged
        {
            fixed (void* pixels_ptr = pixels) // SpanOrArrayLayer
            {
                glInstance.MultiTexSubImage3DEXT(texunit, target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void MultiTexSubImage3DEXT<T1>(this GL.EXTExtension glInstance, TextureUnit texunit, TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, PixelFormat format, PixelType type, T1[] pixels)
            where T1 : unmanaged
        {
            fixed (void* pixels_ptr = pixels) // SpanOrArrayLayer
            {
                glInstance.MultiTexSubImage3DEXT(texunit, target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void MultiTexSubImage3DEXT<T1>(this GL.EXTExtension glInstance, TextureUnit texunit, TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, PixelFormat format, PixelType type, in T1 pixels)
            where T1 : unmanaged
        {
            fixed (void* pixels_ptr = &pixels) // RefInsteadOfPointerLayer
            {
                glInstance.MultiTexSubImage3DEXT(texunit, target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels_ptr);
            }
        }

        // GetFloatIndexedvEXT overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetFloatIndexedvEXT(this GL.EXTExtension glInstance, GetPName target, uint index, Span<float> data)
        {
            fixed (float* data_ptr = data) // SpanOrArrayLayer
            {
                glInstance.GetFloatIndexedvEXT(target, index, data_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetFloatIndexedvEXT(this GL.EXTExtension glInstance, GetPName target, uint index, float[] data)
        {
            fixed (float* data_ptr = data) // SpanOrArrayLayer
            {
                glInstance.GetFloatIndexedvEXT(target, index, data_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void GetFloatIndexedvEXT(this GL.EXTExtension glInstance, GetPName target, uint index, ref float data)
        {
            fixed (float* data_ptr = &data) // RefInsteadOfPointerLayer
            {
                glInstance.GetFloatIndexedvEXT(target, index, data_ptr);
            }
        }

        // GetDoubleIndexedvEXT overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetDoubleIndexedvEXT(this GL.EXTExtension glInstance, GetPName target, uint index, Span<double> data)
        {
            fixed (double* data_ptr = data) // SpanOrArrayLayer
            {
                glInstance.GetDoubleIndexedvEXT(target, index, data_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetDoubleIndexedvEXT(this GL.EXTExtension glInstance, GetPName target, uint index, double[] data)
        {
            fixed (double* data_ptr = data) // SpanOrArrayLayer
            {
                glInstance.GetDoubleIndexedvEXT(target, index, data_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void GetDoubleIndexedvEXT(this GL.EXTExtension glInstance, GetPName target, uint index, ref double data)
        {
            fixed (double* data_ptr = &data) // RefInsteadOfPointerLayer
            {
                glInstance.GetDoubleIndexedvEXT(target, index, data_ptr);
            }
        }

        // GetIntegerIndexedvEXT overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetIntegerIndexedvEXT(this GL.EXTExtension glInstance, GetPName target, uint index, Span<int> data)
        {
            fixed (int* data_ptr = data) // SpanOrArrayLayer
            {
                glInstance.GetIntegerIndexedvEXT(target, index, data_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetIntegerIndexedvEXT(this GL.EXTExtension glInstance, GetPName target, uint index, int[] data)
        {
            fixed (int* data_ptr = data) // SpanOrArrayLayer
            {
                glInstance.GetIntegerIndexedvEXT(target, index, data_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void GetIntegerIndexedvEXT(this GL.EXTExtension glInstance, GetPName target, uint index, ref int data)
        {
            fixed (int* data_ptr = &data) // RefInsteadOfPointerLayer
            {
                glInstance.GetIntegerIndexedvEXT(target, index, data_ptr);
            }
        }

        // GetBooleanIndexedvEXT overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetBooleanIndexedvEXT(this GL.EXTExtension glInstance, BufferTargetARB target, uint index, Span<byte> data)
        {
            fixed (byte* data_ptr = data) // SpanOrArrayLayer
            {
                glInstance.GetBooleanIndexedvEXT(target, index, data_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetBooleanIndexedvEXT(this GL.EXTExtension glInstance, BufferTargetARB target, uint index, byte[] data)
        {
            fixed (byte* data_ptr = data) // SpanOrArrayLayer
            {
                glInstance.GetBooleanIndexedvEXT(target, index, data_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void GetBooleanIndexedvEXT(this GL.EXTExtension glInstance, BufferTargetARB target, uint index, ref byte data)
        {
            fixed (byte* data_ptr = &data) // RefInsteadOfPointerLayer
            {
                glInstance.GetBooleanIndexedvEXT(target, index, data_ptr);
            }
        }

        // CompressedTextureImage3DEXT overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.VoidPtrToIntPtrOverloader
        public static unsafe void CompressedTextureImage3DEXT(this GL.EXTExtension glInstance, TextureHandle texture, TextureTarget target, int level, InternalFormat internalformat, int width, int height, int depth, int border, int imageSize, IntPtr bits)
        {
            var bits_vptr = (void*)bits;
            glInstance.CompressedTextureImage3DEXT(texture, target, level, internalformat, width, height, depth, border, imageSize, bits_vptr);
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void CompressedTextureImage3DEXT<T1>(this GL.EXTExtension glInstance, TextureHandle texture, TextureTarget target, int level, InternalFormat internalformat, int width, int height, int depth, int border, ReadOnlySpan<T1> bits)
            where T1 : unmanaged
        {
            var imageSize = (int)(bits.Length * sizeof(T1));
            fixed (void* bits_ptr = bits) // SpanOrArrayLayer
            {
                glInstance.CompressedTextureImage3DEXT(texture, target, level, internalformat, width, height, depth, border, imageSize, bits_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void CompressedTextureImage3DEXT<T1>(this GL.EXTExtension glInstance, TextureHandle texture, TextureTarget target, int level, InternalFormat internalformat, int width, int height, int depth, int border, T1[] bits)
            where T1 : unmanaged
        {
            var imageSize = (int)(bits.Length * sizeof(T1));
            fixed (void* bits_ptr = bits) // SpanOrArrayLayer
            {
                glInstance.CompressedTextureImage3DEXT(texture, target, level, internalformat, width, height, depth, border, imageSize, bits_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void CompressedTextureImage3DEXT<T1>(this GL.EXTExtension glInstance, TextureHandle texture, TextureTarget target, int level, InternalFormat internalformat, int width, int height, int depth, int border, int imageSize, in T1 bits)
            where T1 : unmanaged
        {
            fixed (void* bits_ptr = &bits) // RefInsteadOfPointerLayer
            {
                glInstance.CompressedTextureImage3DEXT(texture, target, level, internalformat, width, height, depth, border, imageSize, bits_ptr);
            }
        }

        // CompressedTextureImage2DEXT overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.VoidPtrToIntPtrOverloader
        public static unsafe void CompressedTextureImage2DEXT(this GL.EXTExtension glInstance, TextureHandle texture, TextureTarget target, int level, InternalFormat internalformat, int width, int height, int border, int imageSize, IntPtr bits)
        {
            var bits_vptr = (void*)bits;
            glInstance.CompressedTextureImage2DEXT(texture, target, level, internalformat, width, height, border, imageSize, bits_vptr);
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void CompressedTextureImage2DEXT<T1>(this GL.EXTExtension glInstance, TextureHandle texture, TextureTarget target, int level, InternalFormat internalformat, int width, int height, int border, ReadOnlySpan<T1> bits)
            where T1 : unmanaged
        {
            var imageSize = (int)(bits.Length * sizeof(T1));
            fixed (void* bits_ptr = bits) // SpanOrArrayLayer
            {
                glInstance.CompressedTextureImage2DEXT(texture, target, level, internalformat, width, height, border, imageSize, bits_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void CompressedTextureImage2DEXT<T1>(this GL.EXTExtension glInstance, TextureHandle texture, TextureTarget target, int level, InternalFormat internalformat, int width, int height, int border, T1[] bits)
            where T1 : unmanaged
        {
            var imageSize = (int)(bits.Length * sizeof(T1));
            fixed (void* bits_ptr = bits) // SpanOrArrayLayer
            {
                glInstance.CompressedTextureImage2DEXT(texture, target, level, internalformat, width, height, border, imageSize, bits_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void CompressedTextureImage2DEXT<T1>(this GL.EXTExtension glInstance, TextureHandle texture, TextureTarget target, int level, InternalFormat internalformat, int width, int height, int border, int imageSize, in T1 bits)
            where T1 : unmanaged
        {
            fixed (void* bits_ptr = &bits) // RefInsteadOfPointerLayer
            {
                glInstance.CompressedTextureImage2DEXT(texture, target, level, internalformat, width, height, border, imageSize, bits_ptr);
            }
        }

        // CompressedTextureImage1DEXT overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.VoidPtrToIntPtrOverloader
        public static unsafe void CompressedTextureImage1DEXT(this GL.EXTExtension glInstance, TextureHandle texture, TextureTarget target, int level, InternalFormat internalformat, int width, int border, int imageSize, IntPtr bits)
        {
            var bits_vptr = (void*)bits;
            glInstance.CompressedTextureImage1DEXT(texture, target, level, internalformat, width, border, imageSize, bits_vptr);
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void CompressedTextureImage1DEXT<T1>(this GL.EXTExtension glInstance, TextureHandle texture, TextureTarget target, int level, InternalFormat internalformat, int width, int border, ReadOnlySpan<T1> bits)
            where T1 : unmanaged
        {
            var imageSize = (int)(bits.Length * sizeof(T1));
            fixed (void* bits_ptr = bits) // SpanOrArrayLayer
            {
                glInstance.CompressedTextureImage1DEXT(texture, target, level, internalformat, width, border, imageSize, bits_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void CompressedTextureImage1DEXT<T1>(this GL.EXTExtension glInstance, TextureHandle texture, TextureTarget target, int level, InternalFormat internalformat, int width, int border, T1[] bits)
            where T1 : unmanaged
        {
            var imageSize = (int)(bits.Length * sizeof(T1));
            fixed (void* bits_ptr = bits) // SpanOrArrayLayer
            {
                glInstance.CompressedTextureImage1DEXT(texture, target, level, internalformat, width, border, imageSize, bits_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void CompressedTextureImage1DEXT<T1>(this GL.EXTExtension glInstance, TextureHandle texture, TextureTarget target, int level, InternalFormat internalformat, int width, int border, int imageSize, in T1 bits)
            where T1 : unmanaged
        {
            fixed (void* bits_ptr = &bits) // RefInsteadOfPointerLayer
            {
                glInstance.CompressedTextureImage1DEXT(texture, target, level, internalformat, width, border, imageSize, bits_ptr);
            }
        }

        // CompressedTextureSubImage3DEXT overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.VoidPtrToIntPtrOverloader
        public static unsafe void CompressedTextureSubImage3DEXT(this GL.EXTExtension glInstance, TextureHandle texture, TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, InternalFormat format, int imageSize, IntPtr bits)
        {
            var bits_vptr = (void*)bits;
            glInstance.CompressedTextureSubImage3DEXT(texture, target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, bits_vptr);
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void CompressedTextureSubImage3DEXT<T1>(this GL.EXTExtension glInstance, TextureHandle texture, TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, InternalFormat format, ReadOnlySpan<T1> bits)
            where T1 : unmanaged
        {
            var imageSize = (int)(bits.Length * sizeof(T1));
            fixed (void* bits_ptr = bits) // SpanOrArrayLayer
            {
                glInstance.CompressedTextureSubImage3DEXT(texture, target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, bits_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void CompressedTextureSubImage3DEXT<T1>(this GL.EXTExtension glInstance, TextureHandle texture, TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, InternalFormat format, T1[] bits)
            where T1 : unmanaged
        {
            var imageSize = (int)(bits.Length * sizeof(T1));
            fixed (void* bits_ptr = bits) // SpanOrArrayLayer
            {
                glInstance.CompressedTextureSubImage3DEXT(texture, target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, bits_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void CompressedTextureSubImage3DEXT<T1>(this GL.EXTExtension glInstance, TextureHandle texture, TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, InternalFormat format, int imageSize, in T1 bits)
            where T1 : unmanaged
        {
            fixed (void* bits_ptr = &bits) // RefInsteadOfPointerLayer
            {
                glInstance.CompressedTextureSubImage3DEXT(texture, target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, bits_ptr);
            }
        }

        // CompressedTextureSubImage2DEXT overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.VoidPtrToIntPtrOverloader
        public static unsafe void CompressedTextureSubImage2DEXT(this GL.EXTExtension glInstance, TextureHandle texture, TextureTarget target, int level, int xoffset, int yoffset, int width, int height, InternalFormat format, int imageSize, IntPtr bits)
        {
            var bits_vptr = (void*)bits;
            glInstance.CompressedTextureSubImage2DEXT(texture, target, level, xoffset, yoffset, width, height, format, imageSize, bits_vptr);
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void CompressedTextureSubImage2DEXT<T1>(this GL.EXTExtension glInstance, TextureHandle texture, TextureTarget target, int level, int xoffset, int yoffset, int width, int height, InternalFormat format, ReadOnlySpan<T1> bits)
            where T1 : unmanaged
        {
            var imageSize = (int)(bits.Length * sizeof(T1));
            fixed (void* bits_ptr = bits) // SpanOrArrayLayer
            {
                glInstance.CompressedTextureSubImage2DEXT(texture, target, level, xoffset, yoffset, width, height, format, imageSize, bits_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void CompressedTextureSubImage2DEXT<T1>(this GL.EXTExtension glInstance, TextureHandle texture, TextureTarget target, int level, int xoffset, int yoffset, int width, int height, InternalFormat format, T1[] bits)
            where T1 : unmanaged
        {
            var imageSize = (int)(bits.Length * sizeof(T1));
            fixed (void* bits_ptr = bits) // SpanOrArrayLayer
            {
                glInstance.CompressedTextureSubImage2DEXT(texture, target, level, xoffset, yoffset, width, height, format, imageSize, bits_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void CompressedTextureSubImage2DEXT<T1>(this GL.EXTExtension glInstance, TextureHandle texture, TextureTarget target, int level, int xoffset, int yoffset, int width, int height, InternalFormat format, int imageSize, in T1 bits)
            where T1 : unmanaged
        {
            fixed (void* bits_ptr = &bits) // RefInsteadOfPointerLayer
            {
                glInstance.CompressedTextureSubImage2DEXT(texture, target, level, xoffset, yoffset, width, height, format, imageSize, bits_ptr);
            }
        }

        // CompressedTextureSubImage1DEXT overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.VoidPtrToIntPtrOverloader
        public static unsafe void CompressedTextureSubImage1DEXT(this GL.EXTExtension glInstance, TextureHandle texture, TextureTarget target, int level, int xoffset, int width, InternalFormat format, int imageSize, IntPtr bits)
        {
            var bits_vptr = (void*)bits;
            glInstance.CompressedTextureSubImage1DEXT(texture, target, level, xoffset, width, format, imageSize, bits_vptr);
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void CompressedTextureSubImage1DEXT<T1>(this GL.EXTExtension glInstance, TextureHandle texture, TextureTarget target, int level, int xoffset, int width, InternalFormat format, ReadOnlySpan<T1> bits)
            where T1 : unmanaged
        {
            var imageSize = (int)(bits.Length * sizeof(T1));
            fixed (void* bits_ptr = bits) // SpanOrArrayLayer
            {
                glInstance.CompressedTextureSubImage1DEXT(texture, target, level, xoffset, width, format, imageSize, bits_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void CompressedTextureSubImage1DEXT<T1>(this GL.EXTExtension glInstance, TextureHandle texture, TextureTarget target, int level, int xoffset, int width, InternalFormat format, T1[] bits)
            where T1 : unmanaged
        {
            var imageSize = (int)(bits.Length * sizeof(T1));
            fixed (void* bits_ptr = bits) // SpanOrArrayLayer
            {
                glInstance.CompressedTextureSubImage1DEXT(texture, target, level, xoffset, width, format, imageSize, bits_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void CompressedTextureSubImage1DEXT<T1>(this GL.EXTExtension glInstance, TextureHandle texture, TextureTarget target, int level, int xoffset, int width, InternalFormat format, int imageSize, in T1 bits)
            where T1 : unmanaged
        {
            fixed (void* bits_ptr = &bits) // RefInsteadOfPointerLayer
            {
                glInstance.CompressedTextureSubImage1DEXT(texture, target, level, xoffset, width, format, imageSize, bits_ptr);
            }
        }

        // GetCompressedTextureImageEXT overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.VoidPtrToIntPtrOverloader
        public static unsafe void GetCompressedTextureImageEXT(this GL.EXTExtension glInstance, TextureHandle texture, TextureTarget target, int lod, IntPtr img)
        {
            var img_vptr = (void*)img;
            glInstance.GetCompressedTextureImageEXT(texture, target, lod, img_vptr);
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetCompressedTextureImageEXT<T1>(this GL.EXTExtension glInstance, TextureHandle texture, TextureTarget target, int lod, Span<T1> img)
            where T1 : unmanaged
        {
            fixed (void* img_ptr = img) // SpanOrArrayLayer
            {
                glInstance.GetCompressedTextureImageEXT(texture, target, lod, img_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetCompressedTextureImageEXT<T1>(this GL.EXTExtension glInstance, TextureHandle texture, TextureTarget target, int lod, T1[] img)
            where T1 : unmanaged
        {
            fixed (void* img_ptr = img) // SpanOrArrayLayer
            {
                glInstance.GetCompressedTextureImageEXT(texture, target, lod, img_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void GetCompressedTextureImageEXT<T1>(this GL.EXTExtension glInstance, TextureHandle texture, TextureTarget target, int lod, ref T1 img)
            where T1 : unmanaged
        {
            fixed (void* img_ptr = &img) // RefInsteadOfPointerLayer
            {
                glInstance.GetCompressedTextureImageEXT(texture, target, lod, img_ptr);
            }
        }

        // CompressedMultiTexImage3DEXT overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.VoidPtrToIntPtrOverloader
        public static unsafe void CompressedMultiTexImage3DEXT(this GL.EXTExtension glInstance, TextureUnit texunit, TextureTarget target, int level, InternalFormat internalformat, int width, int height, int depth, int border, int imageSize, IntPtr bits)
        {
            var bits_vptr = (void*)bits;
            glInstance.CompressedMultiTexImage3DEXT(texunit, target, level, internalformat, width, height, depth, border, imageSize, bits_vptr);
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void CompressedMultiTexImage3DEXT<T1>(this GL.EXTExtension glInstance, TextureUnit texunit, TextureTarget target, int level, InternalFormat internalformat, int width, int height, int depth, int border, ReadOnlySpan<T1> bits)
            where T1 : unmanaged
        {
            var imageSize = (int)(bits.Length * sizeof(T1));
            fixed (void* bits_ptr = bits) // SpanOrArrayLayer
            {
                glInstance.CompressedMultiTexImage3DEXT(texunit, target, level, internalformat, width, height, depth, border, imageSize, bits_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void CompressedMultiTexImage3DEXT<T1>(this GL.EXTExtension glInstance, TextureUnit texunit, TextureTarget target, int level, InternalFormat internalformat, int width, int height, int depth, int border, T1[] bits)
            where T1 : unmanaged
        {
            var imageSize = (int)(bits.Length * sizeof(T1));
            fixed (void* bits_ptr = bits) // SpanOrArrayLayer
            {
                glInstance.CompressedMultiTexImage3DEXT(texunit, target, level, internalformat, width, height, depth, border, imageSize, bits_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void CompressedMultiTexImage3DEXT<T1>(this GL.EXTExtension glInstance, TextureUnit texunit, TextureTarget target, int level, InternalFormat internalformat, int width, int height, int depth, int border, int imageSize, in T1 bits)
            where T1 : unmanaged
        {
            fixed (void* bits_ptr = &bits) // RefInsteadOfPointerLayer
            {
                glInstance.CompressedMultiTexImage3DEXT(texunit, target, level, internalformat, width, height, depth, border, imageSize, bits_ptr);
            }
        }

        // CompressedMultiTexImage2DEXT overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.VoidPtrToIntPtrOverloader
        public static unsafe void CompressedMultiTexImage2DEXT(this GL.EXTExtension glInstance, TextureUnit texunit, TextureTarget target, int level, InternalFormat internalformat, int width, int height, int border, int imageSize, IntPtr bits)
        {
            var bits_vptr = (void*)bits;
            glInstance.CompressedMultiTexImage2DEXT(texunit, target, level, internalformat, width, height, border, imageSize, bits_vptr);
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void CompressedMultiTexImage2DEXT<T1>(this GL.EXTExtension glInstance, TextureUnit texunit, TextureTarget target, int level, InternalFormat internalformat, int width, int height, int border, ReadOnlySpan<T1> bits)
            where T1 : unmanaged
        {
            var imageSize = (int)(bits.Length * sizeof(T1));
            fixed (void* bits_ptr = bits) // SpanOrArrayLayer
            {
                glInstance.CompressedMultiTexImage2DEXT(texunit, target, level, internalformat, width, height, border, imageSize, bits_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void CompressedMultiTexImage2DEXT<T1>(this GL.EXTExtension glInstance, TextureUnit texunit, TextureTarget target, int level, InternalFormat internalformat, int width, int height, int border, T1[] bits)
            where T1 : unmanaged
        {
            var imageSize = (int)(bits.Length * sizeof(T1));
            fixed (void* bits_ptr = bits) // SpanOrArrayLayer
            {
                glInstance.CompressedMultiTexImage2DEXT(texunit, target, level, internalformat, width, height, border, imageSize, bits_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void CompressedMultiTexImage2DEXT<T1>(this GL.EXTExtension glInstance, TextureUnit texunit, TextureTarget target, int level, InternalFormat internalformat, int width, int height, int border, int imageSize, in T1 bits)
            where T1 : unmanaged
        {
            fixed (void* bits_ptr = &bits) // RefInsteadOfPointerLayer
            {
                glInstance.CompressedMultiTexImage2DEXT(texunit, target, level, internalformat, width, height, border, imageSize, bits_ptr);
            }
        }

        // CompressedMultiTexImage1DEXT overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.VoidPtrToIntPtrOverloader
        public static unsafe void CompressedMultiTexImage1DEXT(this GL.EXTExtension glInstance, TextureUnit texunit, TextureTarget target, int level, InternalFormat internalformat, int width, int border, int imageSize, IntPtr bits)
        {
            var bits_vptr = (void*)bits;
            glInstance.CompressedMultiTexImage1DEXT(texunit, target, level, internalformat, width, border, imageSize, bits_vptr);
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void CompressedMultiTexImage1DEXT<T1>(this GL.EXTExtension glInstance, TextureUnit texunit, TextureTarget target, int level, InternalFormat internalformat, int width, int border, ReadOnlySpan<T1> bits)
            where T1 : unmanaged
        {
            var imageSize = (int)(bits.Length * sizeof(T1));
            fixed (void* bits_ptr = bits) // SpanOrArrayLayer
            {
                glInstance.CompressedMultiTexImage1DEXT(texunit, target, level, internalformat, width, border, imageSize, bits_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void CompressedMultiTexImage1DEXT<T1>(this GL.EXTExtension glInstance, TextureUnit texunit, TextureTarget target, int level, InternalFormat internalformat, int width, int border, T1[] bits)
            where T1 : unmanaged
        {
            var imageSize = (int)(bits.Length * sizeof(T1));
            fixed (void* bits_ptr = bits) // SpanOrArrayLayer
            {
                glInstance.CompressedMultiTexImage1DEXT(texunit, target, level, internalformat, width, border, imageSize, bits_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void CompressedMultiTexImage1DEXT<T1>(this GL.EXTExtension glInstance, TextureUnit texunit, TextureTarget target, int level, InternalFormat internalformat, int width, int border, int imageSize, in T1 bits)
            where T1 : unmanaged
        {
            fixed (void* bits_ptr = &bits) // RefInsteadOfPointerLayer
            {
                glInstance.CompressedMultiTexImage1DEXT(texunit, target, level, internalformat, width, border, imageSize, bits_ptr);
            }
        }

        // CompressedMultiTexSubImage3DEXT overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.VoidPtrToIntPtrOverloader
        public static unsafe void CompressedMultiTexSubImage3DEXT(this GL.EXTExtension glInstance, TextureUnit texunit, TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, InternalFormat format, int imageSize, IntPtr bits)
        {
            var bits_vptr = (void*)bits;
            glInstance.CompressedMultiTexSubImage3DEXT(texunit, target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, bits_vptr);
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void CompressedMultiTexSubImage3DEXT<T1>(this GL.EXTExtension glInstance, TextureUnit texunit, TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, InternalFormat format, ReadOnlySpan<T1> bits)
            where T1 : unmanaged
        {
            var imageSize = (int)(bits.Length * sizeof(T1));
            fixed (void* bits_ptr = bits) // SpanOrArrayLayer
            {
                glInstance.CompressedMultiTexSubImage3DEXT(texunit, target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, bits_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void CompressedMultiTexSubImage3DEXT<T1>(this GL.EXTExtension glInstance, TextureUnit texunit, TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, InternalFormat format, T1[] bits)
            where T1 : unmanaged
        {
            var imageSize = (int)(bits.Length * sizeof(T1));
            fixed (void* bits_ptr = bits) // SpanOrArrayLayer
            {
                glInstance.CompressedMultiTexSubImage3DEXT(texunit, target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, bits_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void CompressedMultiTexSubImage3DEXT<T1>(this GL.EXTExtension glInstance, TextureUnit texunit, TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, InternalFormat format, int imageSize, in T1 bits)
            where T1 : unmanaged
        {
            fixed (void* bits_ptr = &bits) // RefInsteadOfPointerLayer
            {
                glInstance.CompressedMultiTexSubImage3DEXT(texunit, target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, bits_ptr);
            }
        }

        // CompressedMultiTexSubImage2DEXT overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.VoidPtrToIntPtrOverloader
        public static unsafe void CompressedMultiTexSubImage2DEXT(this GL.EXTExtension glInstance, TextureUnit texunit, TextureTarget target, int level, int xoffset, int yoffset, int width, int height, InternalFormat format, int imageSize, IntPtr bits)
        {
            var bits_vptr = (void*)bits;
            glInstance.CompressedMultiTexSubImage2DEXT(texunit, target, level, xoffset, yoffset, width, height, format, imageSize, bits_vptr);
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void CompressedMultiTexSubImage2DEXT<T1>(this GL.EXTExtension glInstance, TextureUnit texunit, TextureTarget target, int level, int xoffset, int yoffset, int width, int height, InternalFormat format, ReadOnlySpan<T1> bits)
            where T1 : unmanaged
        {
            var imageSize = (int)(bits.Length * sizeof(T1));
            fixed (void* bits_ptr = bits) // SpanOrArrayLayer
            {
                glInstance.CompressedMultiTexSubImage2DEXT(texunit, target, level, xoffset, yoffset, width, height, format, imageSize, bits_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void CompressedMultiTexSubImage2DEXT<T1>(this GL.EXTExtension glInstance, TextureUnit texunit, TextureTarget target, int level, int xoffset, int yoffset, int width, int height, InternalFormat format, T1[] bits)
            where T1 : unmanaged
        {
            var imageSize = (int)(bits.Length * sizeof(T1));
            fixed (void* bits_ptr = bits) // SpanOrArrayLayer
            {
                glInstance.CompressedMultiTexSubImage2DEXT(texunit, target, level, xoffset, yoffset, width, height, format, imageSize, bits_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void CompressedMultiTexSubImage2DEXT<T1>(this GL.EXTExtension glInstance, TextureUnit texunit, TextureTarget target, int level, int xoffset, int yoffset, int width, int height, InternalFormat format, int imageSize, in T1 bits)
            where T1 : unmanaged
        {
            fixed (void* bits_ptr = &bits) // RefInsteadOfPointerLayer
            {
                glInstance.CompressedMultiTexSubImage2DEXT(texunit, target, level, xoffset, yoffset, width, height, format, imageSize, bits_ptr);
            }
        }

        // CompressedMultiTexSubImage1DEXT overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.VoidPtrToIntPtrOverloader
        public static unsafe void CompressedMultiTexSubImage1DEXT(this GL.EXTExtension glInstance, TextureUnit texunit, TextureTarget target, int level, int xoffset, int width, InternalFormat format, int imageSize, IntPtr bits)
        {
            var bits_vptr = (void*)bits;
            glInstance.CompressedMultiTexSubImage1DEXT(texunit, target, level, xoffset, width, format, imageSize, bits_vptr);
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void CompressedMultiTexSubImage1DEXT<T1>(this GL.EXTExtension glInstance, TextureUnit texunit, TextureTarget target, int level, int xoffset, int width, InternalFormat format, ReadOnlySpan<T1> bits)
            where T1 : unmanaged
        {
            var imageSize = (int)(bits.Length * sizeof(T1));
            fixed (void* bits_ptr = bits) // SpanOrArrayLayer
            {
                glInstance.CompressedMultiTexSubImage1DEXT(texunit, target, level, xoffset, width, format, imageSize, bits_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void CompressedMultiTexSubImage1DEXT<T1>(this GL.EXTExtension glInstance, TextureUnit texunit, TextureTarget target, int level, int xoffset, int width, InternalFormat format, T1[] bits)
            where T1 : unmanaged
        {
            var imageSize = (int)(bits.Length * sizeof(T1));
            fixed (void* bits_ptr = bits) // SpanOrArrayLayer
            {
                glInstance.CompressedMultiTexSubImage1DEXT(texunit, target, level, xoffset, width, format, imageSize, bits_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void CompressedMultiTexSubImage1DEXT<T1>(this GL.EXTExtension glInstance, TextureUnit texunit, TextureTarget target, int level, int xoffset, int width, InternalFormat format, int imageSize, in T1 bits)
            where T1 : unmanaged
        {
            fixed (void* bits_ptr = &bits) // RefInsteadOfPointerLayer
            {
                glInstance.CompressedMultiTexSubImage1DEXT(texunit, target, level, xoffset, width, format, imageSize, bits_ptr);
            }
        }

        // GetCompressedMultiTexImageEXT overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.VoidPtrToIntPtrOverloader
        public static unsafe void GetCompressedMultiTexImageEXT(this GL.EXTExtension glInstance, TextureUnit texunit, TextureTarget target, int lod, IntPtr img)
        {
            var img_vptr = (void*)img;
            glInstance.GetCompressedMultiTexImageEXT(texunit, target, lod, img_vptr);
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetCompressedMultiTexImageEXT<T1>(this GL.EXTExtension glInstance, TextureUnit texunit, TextureTarget target, int lod, Span<T1> img)
            where T1 : unmanaged
        {
            fixed (void* img_ptr = img) // SpanOrArrayLayer
            {
                glInstance.GetCompressedMultiTexImageEXT(texunit, target, lod, img_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetCompressedMultiTexImageEXT<T1>(this GL.EXTExtension glInstance, TextureUnit texunit, TextureTarget target, int lod, T1[] img)
            where T1 : unmanaged
        {
            fixed (void* img_ptr = img) // SpanOrArrayLayer
            {
                glInstance.GetCompressedMultiTexImageEXT(texunit, target, lod, img_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void GetCompressedMultiTexImageEXT<T1>(this GL.EXTExtension glInstance, TextureUnit texunit, TextureTarget target, int lod, ref T1 img)
            where T1 : unmanaged
        {
            fixed (void* img_ptr = &img) // RefInsteadOfPointerLayer
            {
                glInstance.GetCompressedMultiTexImageEXT(texunit, target, lod, img_ptr);
            }
        }

        // MatrixLoadTransposefEXT overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void MatrixLoadTransposefEXT(this GL.EXTExtension glInstance, MatrixMode mode, ReadOnlySpan<float> m)
        {
            fixed (float* m_ptr = m) // SpanOrArrayLayer
            {
                glInstance.MatrixLoadTransposefEXT(mode, m_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void MatrixLoadTransposefEXT(this GL.EXTExtension glInstance, MatrixMode mode, float[] m)
        {
            fixed (float* m_ptr = m) // SpanOrArrayLayer
            {
                glInstance.MatrixLoadTransposefEXT(mode, m_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void MatrixLoadTransposefEXT(this GL.EXTExtension glInstance, MatrixMode mode, in float m)
        {
            fixed (float* m_ptr = &m) // RefInsteadOfPointerLayer
            {
                glInstance.MatrixLoadTransposefEXT(mode, m_ptr);
            }
        }

        // MatrixLoadTransposedEXT overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void MatrixLoadTransposedEXT(this GL.EXTExtension glInstance, MatrixMode mode, ReadOnlySpan<double> m)
        {
            fixed (double* m_ptr = m) // SpanOrArrayLayer
            {
                glInstance.MatrixLoadTransposedEXT(mode, m_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void MatrixLoadTransposedEXT(this GL.EXTExtension glInstance, MatrixMode mode, double[] m)
        {
            fixed (double* m_ptr = m) // SpanOrArrayLayer
            {
                glInstance.MatrixLoadTransposedEXT(mode, m_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void MatrixLoadTransposedEXT(this GL.EXTExtension glInstance, MatrixMode mode, in double m)
        {
            fixed (double* m_ptr = &m) // RefInsteadOfPointerLayer
            {
                glInstance.MatrixLoadTransposedEXT(mode, m_ptr);
            }
        }

        // MatrixMultTransposefEXT overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void MatrixMultTransposefEXT(this GL.EXTExtension glInstance, MatrixMode mode, ReadOnlySpan<float> m)
        {
            fixed (float* m_ptr = m) // SpanOrArrayLayer
            {
                glInstance.MatrixMultTransposefEXT(mode, m_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void MatrixMultTransposefEXT(this GL.EXTExtension glInstance, MatrixMode mode, float[] m)
        {
            fixed (float* m_ptr = m) // SpanOrArrayLayer
            {
                glInstance.MatrixMultTransposefEXT(mode, m_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void MatrixMultTransposefEXT(this GL.EXTExtension glInstance, MatrixMode mode, in float m)
        {
            fixed (float* m_ptr = &m) // RefInsteadOfPointerLayer
            {
                glInstance.MatrixMultTransposefEXT(mode, m_ptr);
            }
        }

        // MatrixMultTransposedEXT overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void MatrixMultTransposedEXT(this GL.EXTExtension glInstance, MatrixMode mode, ReadOnlySpan<double> m)
        {
            fixed (double* m_ptr = m) // SpanOrArrayLayer
            {
                glInstance.MatrixMultTransposedEXT(mode, m_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void MatrixMultTransposedEXT(this GL.EXTExtension glInstance, MatrixMode mode, double[] m)
        {
            fixed (double* m_ptr = m) // SpanOrArrayLayer
            {
                glInstance.MatrixMultTransposedEXT(mode, m_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void MatrixMultTransposedEXT(this GL.EXTExtension glInstance, MatrixMode mode, in double m)
        {
            fixed (double* m_ptr = &m) // RefInsteadOfPointerLayer
            {
                glInstance.MatrixMultTransposedEXT(mode, m_ptr);
            }
        }

        // NamedBufferDataEXT overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.VoidPtrToIntPtrOverloader
        public static unsafe void NamedBufferDataEXT(this GL.EXTExtension glInstance, BufferHandle buffer, nint size, IntPtr data, VertexBufferObjectUsage usage)
        {
            var data_vptr = (void*)data;
            glInstance.NamedBufferDataEXT(buffer, size, data_vptr, usage);
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void NamedBufferDataEXT<T1>(this GL.EXTExtension glInstance, BufferHandle buffer, nint size, ReadOnlySpan<T1> data, VertexBufferObjectUsage usage)
            where T1 : unmanaged
        {
            fixed (void* data_ptr = data) // SpanOrArrayLayer
            {
                glInstance.NamedBufferDataEXT(buffer, size, data_ptr, usage);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void NamedBufferDataEXT<T1>(this GL.EXTExtension glInstance, BufferHandle buffer, nint size, T1[] data, VertexBufferObjectUsage usage)
            where T1 : unmanaged
        {
            fixed (void* data_ptr = data) // SpanOrArrayLayer
            {
                glInstance.NamedBufferDataEXT(buffer, size, data_ptr, usage);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void NamedBufferDataEXT<T1>(this GL.EXTExtension glInstance, BufferHandle buffer, nint size, in T1 data, VertexBufferObjectUsage usage)
            where T1 : unmanaged
        {
            fixed (void* data_ptr = &data) // RefInsteadOfPointerLayer
            {
                glInstance.NamedBufferDataEXT(buffer, size, data_ptr, usage);
            }
        }

        // NamedBufferSubDataEXT overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.VoidPtrToIntPtrOverloader
        public static unsafe void NamedBufferSubDataEXT(this GL.EXTExtension glInstance, BufferHandle buffer, IntPtr offset, nint size, IntPtr data)
        {
            var data_vptr = (void*)data;
            glInstance.NamedBufferSubDataEXT(buffer, offset, size, data_vptr);
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void NamedBufferSubDataEXT<T1>(this GL.EXTExtension glInstance, BufferHandle buffer, IntPtr offset, nint size, ReadOnlySpan<T1> data)
            where T1 : unmanaged
        {
            fixed (void* data_ptr = data) // SpanOrArrayLayer
            {
                glInstance.NamedBufferSubDataEXT(buffer, offset, size, data_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void NamedBufferSubDataEXT<T1>(this GL.EXTExtension glInstance, BufferHandle buffer, IntPtr offset, nint size, T1[] data)
            where T1 : unmanaged
        {
            fixed (void* data_ptr = data) // SpanOrArrayLayer
            {
                glInstance.NamedBufferSubDataEXT(buffer, offset, size, data_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void NamedBufferSubDataEXT<T1>(this GL.EXTExtension glInstance, BufferHandle buffer, IntPtr offset, nint size, in T1 data)
            where T1 : unmanaged
        {
            fixed (void* data_ptr = &data) // RefInsteadOfPointerLayer
            {
                glInstance.NamedBufferSubDataEXT(buffer, offset, size, data_ptr);
            }
        }

        // GetNamedBufferParameterivEXT overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetNamedBufferParameterivEXT(this GL.EXTExtension glInstance, BufferHandle buffer, BufferPNameARB pname, Span<int> parameters)
        {
            fixed (int* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.GetNamedBufferParameterivEXT(buffer, pname, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetNamedBufferParameterivEXT(this GL.EXTExtension glInstance, BufferHandle buffer, BufferPNameARB pname, int[] parameters)
        {
            fixed (int* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.GetNamedBufferParameterivEXT(buffer, pname, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void GetNamedBufferParameterivEXT(this GL.EXTExtension glInstance, BufferHandle buffer, BufferPNameARB pname, ref int parameters)
        {
            fixed (int* parameters_ptr = &parameters) // RefInsteadOfPointerLayer
            {
                glInstance.GetNamedBufferParameterivEXT(buffer, pname, parameters_ptr);
            }
        }

        // GetNamedBufferSubDataEXT overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.VoidPtrToIntPtrOverloader
        public static unsafe void GetNamedBufferSubDataEXT(this GL.EXTExtension glInstance, BufferHandle buffer, IntPtr offset, nint size, IntPtr data)
        {
            var data_vptr = (void*)data;
            glInstance.GetNamedBufferSubDataEXT(buffer, offset, size, data_vptr);
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetNamedBufferSubDataEXT<T1>(this GL.EXTExtension glInstance, BufferHandle buffer, IntPtr offset, nint size, Span<T1> data)
            where T1 : unmanaged
        {
            fixed (void* data_ptr = data) // SpanOrArrayLayer
            {
                glInstance.GetNamedBufferSubDataEXT(buffer, offset, size, data_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetNamedBufferSubDataEXT<T1>(this GL.EXTExtension glInstance, BufferHandle buffer, IntPtr offset, nint size, T1[] data)
            where T1 : unmanaged
        {
            fixed (void* data_ptr = data) // SpanOrArrayLayer
            {
                glInstance.GetNamedBufferSubDataEXT(buffer, offset, size, data_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void GetNamedBufferSubDataEXT<T1>(this GL.EXTExtension glInstance, BufferHandle buffer, IntPtr offset, nint size, ref T1 data)
            where T1 : unmanaged
        {
            fixed (void* data_ptr = &data) // RefInsteadOfPointerLayer
            {
                glInstance.GetNamedBufferSubDataEXT(buffer, offset, size, data_ptr);
            }
        }

        // ProgramUniform1fvEXT overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void ProgramUniform1fvEXT(this GL.EXTExtension glInstance, ProgramHandle program, int location, ReadOnlySpan<float> value)
        {
            var count = (int)(value.Length);
            fixed (float* value_ptr = value) // SpanOrArrayLayer
            {
                glInstance.ProgramUniform1fvEXT(program, location, count, value_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void ProgramUniform1fvEXT(this GL.EXTExtension glInstance, ProgramHandle program, int location, float[] value)
        {
            var count = (int)(value.Length);
            fixed (float* value_ptr = value) // SpanOrArrayLayer
            {
                glInstance.ProgramUniform1fvEXT(program, location, count, value_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void ProgramUniform1fvEXT(this GL.EXTExtension glInstance, ProgramHandle program, int location, int count, in float value)
        {
            fixed (float* value_ptr = &value) // RefInsteadOfPointerLayer
            {
                glInstance.ProgramUniform1fvEXT(program, location, count, value_ptr);
            }
        }

        // ProgramUniform2fvEXT overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void ProgramUniform2fvEXT(this GL.EXTExtension glInstance, ProgramHandle program, int location, ReadOnlySpan<float> value)
        {
            var count = (int)(value.Length / 2);
            fixed (float* value_ptr = value) // SpanOrArrayLayer
            {
                glInstance.ProgramUniform2fvEXT(program, location, count, value_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void ProgramUniform2fvEXT(this GL.EXTExtension glInstance, ProgramHandle program, int location, float[] value)
        {
            var count = (int)(value.Length / 2);
            fixed (float* value_ptr = value) // SpanOrArrayLayer
            {
                glInstance.ProgramUniform2fvEXT(program, location, count, value_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void ProgramUniform2fvEXT(this GL.EXTExtension glInstance, ProgramHandle program, int location, int count, in float value)
        {
            fixed (float* value_ptr = &value) // RefInsteadOfPointerLayer
            {
                glInstance.ProgramUniform2fvEXT(program, location, count, value_ptr);
            }
        }

        // ProgramUniform3fvEXT overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void ProgramUniform3fvEXT(this GL.EXTExtension glInstance, ProgramHandle program, int location, ReadOnlySpan<float> value)
        {
            var count = (int)(value.Length / 3);
            fixed (float* value_ptr = value) // SpanOrArrayLayer
            {
                glInstance.ProgramUniform3fvEXT(program, location, count, value_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void ProgramUniform3fvEXT(this GL.EXTExtension glInstance, ProgramHandle program, int location, float[] value)
        {
            var count = (int)(value.Length / 3);
            fixed (float* value_ptr = value) // SpanOrArrayLayer
            {
                glInstance.ProgramUniform3fvEXT(program, location, count, value_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void ProgramUniform3fvEXT(this GL.EXTExtension glInstance, ProgramHandle program, int location, int count, in float value)
        {
            fixed (float* value_ptr = &value) // RefInsteadOfPointerLayer
            {
                glInstance.ProgramUniform3fvEXT(program, location, count, value_ptr);
            }
        }

        // ProgramUniform4fvEXT overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void ProgramUniform4fvEXT(this GL.EXTExtension glInstance, ProgramHandle program, int location, ReadOnlySpan<float> value)
        {
            var count = (int)(value.Length / 4);
            fixed (float* value_ptr = value) // SpanOrArrayLayer
            {
                glInstance.ProgramUniform4fvEXT(program, location, count, value_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void ProgramUniform4fvEXT(this GL.EXTExtension glInstance, ProgramHandle program, int location, float[] value)
        {
            var count = (int)(value.Length / 4);
            fixed (float* value_ptr = value) // SpanOrArrayLayer
            {
                glInstance.ProgramUniform4fvEXT(program, location, count, value_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void ProgramUniform4fvEXT(this GL.EXTExtension glInstance, ProgramHandle program, int location, int count, in float value)
        {
            fixed (float* value_ptr = &value) // RefInsteadOfPointerLayer
            {
                glInstance.ProgramUniform4fvEXT(program, location, count, value_ptr);
            }
        }

        // ProgramUniform1ivEXT overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void ProgramUniform1ivEXT(this GL.EXTExtension glInstance, ProgramHandle program, int location, ReadOnlySpan<int> value)
        {
            var count = (int)(value.Length);
            fixed (int* value_ptr = value) // SpanOrArrayLayer
            {
                glInstance.ProgramUniform1ivEXT(program, location, count, value_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void ProgramUniform1ivEXT(this GL.EXTExtension glInstance, ProgramHandle program, int location, int[] value)
        {
            var count = (int)(value.Length);
            fixed (int* value_ptr = value) // SpanOrArrayLayer
            {
                glInstance.ProgramUniform1ivEXT(program, location, count, value_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void ProgramUniform1ivEXT(this GL.EXTExtension glInstance, ProgramHandle program, int location, int count, in int value)
        {
            fixed (int* value_ptr = &value) // RefInsteadOfPointerLayer
            {
                glInstance.ProgramUniform1ivEXT(program, location, count, value_ptr);
            }
        }

        // ProgramUniform2ivEXT overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void ProgramUniform2ivEXT(this GL.EXTExtension glInstance, ProgramHandle program, int location, ReadOnlySpan<int> value)
        {
            var count = (int)(value.Length / 2);
            fixed (int* value_ptr = value) // SpanOrArrayLayer
            {
                glInstance.ProgramUniform2ivEXT(program, location, count, value_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void ProgramUniform2ivEXT(this GL.EXTExtension glInstance, ProgramHandle program, int location, int[] value)
        {
            var count = (int)(value.Length / 2);
            fixed (int* value_ptr = value) // SpanOrArrayLayer
            {
                glInstance.ProgramUniform2ivEXT(program, location, count, value_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void ProgramUniform2ivEXT(this GL.EXTExtension glInstance, ProgramHandle program, int location, int count, in int value)
        {
            fixed (int* value_ptr = &value) // RefInsteadOfPointerLayer
            {
                glInstance.ProgramUniform2ivEXT(program, location, count, value_ptr);
            }
        }

        // ProgramUniform3ivEXT overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void ProgramUniform3ivEXT(this GL.EXTExtension glInstance, ProgramHandle program, int location, ReadOnlySpan<int> value)
        {
            var count = (int)(value.Length / 3);
            fixed (int* value_ptr = value) // SpanOrArrayLayer
            {
                glInstance.ProgramUniform3ivEXT(program, location, count, value_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void ProgramUniform3ivEXT(this GL.EXTExtension glInstance, ProgramHandle program, int location, int[] value)
        {
            var count = (int)(value.Length / 3);
            fixed (int* value_ptr = value) // SpanOrArrayLayer
            {
                glInstance.ProgramUniform3ivEXT(program, location, count, value_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void ProgramUniform3ivEXT(this GL.EXTExtension glInstance, ProgramHandle program, int location, int count, in int value)
        {
            fixed (int* value_ptr = &value) // RefInsteadOfPointerLayer
            {
                glInstance.ProgramUniform3ivEXT(program, location, count, value_ptr);
            }
        }

        // ProgramUniform4ivEXT overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void ProgramUniform4ivEXT(this GL.EXTExtension glInstance, ProgramHandle program, int location, ReadOnlySpan<int> value)
        {
            var count = (int)(value.Length / 4);
            fixed (int* value_ptr = value) // SpanOrArrayLayer
            {
                glInstance.ProgramUniform4ivEXT(program, location, count, value_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void ProgramUniform4ivEXT(this GL.EXTExtension glInstance, ProgramHandle program, int location, int[] value)
        {
            var count = (int)(value.Length / 4);
            fixed (int* value_ptr = value) // SpanOrArrayLayer
            {
                glInstance.ProgramUniform4ivEXT(program, location, count, value_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void ProgramUniform4ivEXT(this GL.EXTExtension glInstance, ProgramHandle program, int location, int count, in int value)
        {
            fixed (int* value_ptr = &value) // RefInsteadOfPointerLayer
            {
                glInstance.ProgramUniform4ivEXT(program, location, count, value_ptr);
            }
        }

        // ProgramUniformMatrix2fvEXT overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void ProgramUniformMatrix2fvEXT(this GL.EXTExtension glInstance, ProgramHandle program, int location, bool transpose, ReadOnlySpan<float> value)
        {
            var count = (int)(value.Length / 4);
            fixed (float* value_ptr = value) // SpanOrArrayLayer
            {
                var transpose_byte = (byte)(transpose ? 1 : 0);
                glInstance.ProgramUniformMatrix2fvEXT(program, location, count, transpose_byte, value_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void ProgramUniformMatrix2fvEXT(this GL.EXTExtension glInstance, ProgramHandle program, int location, bool transpose, float[] value)
        {
            var count = (int)(value.Length / 4);
            fixed (float* value_ptr = value) // SpanOrArrayLayer
            {
                var transpose_byte = (byte)(transpose ? 1 : 0);
                glInstance.ProgramUniformMatrix2fvEXT(program, location, count, transpose_byte, value_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void ProgramUniformMatrix2fvEXT(this GL.EXTExtension glInstance, ProgramHandle program, int location, int count, bool transpose, in float value)
        {
            fixed (float* value_ptr = &value) // RefInsteadOfPointerLayer
            {
                var transpose_byte = (byte)(transpose ? 1 : 0);
                glInstance.ProgramUniformMatrix2fvEXT(program, location, count, transpose_byte, value_ptr);
            }
        }

        // ProgramUniformMatrix3fvEXT overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void ProgramUniformMatrix3fvEXT(this GL.EXTExtension glInstance, ProgramHandle program, int location, bool transpose, ReadOnlySpan<float> value)
        {
            var count = (int)(value.Length / 9);
            fixed (float* value_ptr = value) // SpanOrArrayLayer
            {
                var transpose_byte = (byte)(transpose ? 1 : 0);
                glInstance.ProgramUniformMatrix3fvEXT(program, location, count, transpose_byte, value_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void ProgramUniformMatrix3fvEXT(this GL.EXTExtension glInstance, ProgramHandle program, int location, bool transpose, float[] value)
        {
            var count = (int)(value.Length / 9);
            fixed (float* value_ptr = value) // SpanOrArrayLayer
            {
                var transpose_byte = (byte)(transpose ? 1 : 0);
                glInstance.ProgramUniformMatrix3fvEXT(program, location, count, transpose_byte, value_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void ProgramUniformMatrix3fvEXT(this GL.EXTExtension glInstance, ProgramHandle program, int location, int count, bool transpose, in float value)
        {
            fixed (float* value_ptr = &value) // RefInsteadOfPointerLayer
            {
                var transpose_byte = (byte)(transpose ? 1 : 0);
                glInstance.ProgramUniformMatrix3fvEXT(program, location, count, transpose_byte, value_ptr);
            }
        }

        // ProgramUniformMatrix4fvEXT overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void ProgramUniformMatrix4fvEXT(this GL.EXTExtension glInstance, ProgramHandle program, int location, bool transpose, ReadOnlySpan<float> value)
        {
            var count = (int)(value.Length / 16);
            fixed (float* value_ptr = value) // SpanOrArrayLayer
            {
                var transpose_byte = (byte)(transpose ? 1 : 0);
                glInstance.ProgramUniformMatrix4fvEXT(program, location, count, transpose_byte, value_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void ProgramUniformMatrix4fvEXT(this GL.EXTExtension glInstance, ProgramHandle program, int location, bool transpose, float[] value)
        {
            var count = (int)(value.Length / 16);
            fixed (float* value_ptr = value) // SpanOrArrayLayer
            {
                var transpose_byte = (byte)(transpose ? 1 : 0);
                glInstance.ProgramUniformMatrix4fvEXT(program, location, count, transpose_byte, value_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void ProgramUniformMatrix4fvEXT(this GL.EXTExtension glInstance, ProgramHandle program, int location, int count, bool transpose, in float value)
        {
            fixed (float* value_ptr = &value) // RefInsteadOfPointerLayer
            {
                var transpose_byte = (byte)(transpose ? 1 : 0);
                glInstance.ProgramUniformMatrix4fvEXT(program, location, count, transpose_byte, value_ptr);
            }
        }

        // ProgramUniformMatrix2x3fvEXT overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void ProgramUniformMatrix2x3fvEXT(this GL.EXTExtension glInstance, ProgramHandle program, int location, bool transpose, ReadOnlySpan<float> value)
        {
            var count = (int)(value.Length / 6);
            fixed (float* value_ptr = value) // SpanOrArrayLayer
            {
                var transpose_byte = (byte)(transpose ? 1 : 0);
                glInstance.ProgramUniformMatrix2x3fvEXT(program, location, count, transpose_byte, value_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void ProgramUniformMatrix2x3fvEXT(this GL.EXTExtension glInstance, ProgramHandle program, int location, bool transpose, float[] value)
        {
            var count = (int)(value.Length / 6);
            fixed (float* value_ptr = value) // SpanOrArrayLayer
            {
                var transpose_byte = (byte)(transpose ? 1 : 0);
                glInstance.ProgramUniformMatrix2x3fvEXT(program, location, count, transpose_byte, value_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void ProgramUniformMatrix2x3fvEXT(this GL.EXTExtension glInstance, ProgramHandle program, int location, int count, bool transpose, in float value)
        {
            fixed (float* value_ptr = &value) // RefInsteadOfPointerLayer
            {
                var transpose_byte = (byte)(transpose ? 1 : 0);
                glInstance.ProgramUniformMatrix2x3fvEXT(program, location, count, transpose_byte, value_ptr);
            }
        }

        // ProgramUniformMatrix3x2fvEXT overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void ProgramUniformMatrix3x2fvEXT(this GL.EXTExtension glInstance, ProgramHandle program, int location, bool transpose, ReadOnlySpan<float> value)
        {
            var count = (int)(value.Length / 6);
            fixed (float* value_ptr = value) // SpanOrArrayLayer
            {
                var transpose_byte = (byte)(transpose ? 1 : 0);
                glInstance.ProgramUniformMatrix3x2fvEXT(program, location, count, transpose_byte, value_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void ProgramUniformMatrix3x2fvEXT(this GL.EXTExtension glInstance, ProgramHandle program, int location, bool transpose, float[] value)
        {
            var count = (int)(value.Length / 6);
            fixed (float* value_ptr = value) // SpanOrArrayLayer
            {
                var transpose_byte = (byte)(transpose ? 1 : 0);
                glInstance.ProgramUniformMatrix3x2fvEXT(program, location, count, transpose_byte, value_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void ProgramUniformMatrix3x2fvEXT(this GL.EXTExtension glInstance, ProgramHandle program, int location, int count, bool transpose, in float value)
        {
            fixed (float* value_ptr = &value) // RefInsteadOfPointerLayer
            {
                var transpose_byte = (byte)(transpose ? 1 : 0);
                glInstance.ProgramUniformMatrix3x2fvEXT(program, location, count, transpose_byte, value_ptr);
            }
        }

        // ProgramUniformMatrix2x4fvEXT overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void ProgramUniformMatrix2x4fvEXT(this GL.EXTExtension glInstance, ProgramHandle program, int location, bool transpose, ReadOnlySpan<float> value)
        {
            var count = (int)(value.Length / 8);
            fixed (float* value_ptr = value) // SpanOrArrayLayer
            {
                var transpose_byte = (byte)(transpose ? 1 : 0);
                glInstance.ProgramUniformMatrix2x4fvEXT(program, location, count, transpose_byte, value_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void ProgramUniformMatrix2x4fvEXT(this GL.EXTExtension glInstance, ProgramHandle program, int location, bool transpose, float[] value)
        {
            var count = (int)(value.Length / 8);
            fixed (float* value_ptr = value) // SpanOrArrayLayer
            {
                var transpose_byte = (byte)(transpose ? 1 : 0);
                glInstance.ProgramUniformMatrix2x4fvEXT(program, location, count, transpose_byte, value_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void ProgramUniformMatrix2x4fvEXT(this GL.EXTExtension glInstance, ProgramHandle program, int location, int count, bool transpose, in float value)
        {
            fixed (float* value_ptr = &value) // RefInsteadOfPointerLayer
            {
                var transpose_byte = (byte)(transpose ? 1 : 0);
                glInstance.ProgramUniformMatrix2x4fvEXT(program, location, count, transpose_byte, value_ptr);
            }
        }

        // ProgramUniformMatrix4x2fvEXT overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void ProgramUniformMatrix4x2fvEXT(this GL.EXTExtension glInstance, ProgramHandle program, int location, bool transpose, ReadOnlySpan<float> value)
        {
            var count = (int)(value.Length / 8);
            fixed (float* value_ptr = value) // SpanOrArrayLayer
            {
                var transpose_byte = (byte)(transpose ? 1 : 0);
                glInstance.ProgramUniformMatrix4x2fvEXT(program, location, count, transpose_byte, value_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void ProgramUniformMatrix4x2fvEXT(this GL.EXTExtension glInstance, ProgramHandle program, int location, bool transpose, float[] value)
        {
            var count = (int)(value.Length / 8);
            fixed (float* value_ptr = value) // SpanOrArrayLayer
            {
                var transpose_byte = (byte)(transpose ? 1 : 0);
                glInstance.ProgramUniformMatrix4x2fvEXT(program, location, count, transpose_byte, value_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void ProgramUniformMatrix4x2fvEXT(this GL.EXTExtension glInstance, ProgramHandle program, int location, int count, bool transpose, in float value)
        {
            fixed (float* value_ptr = &value) // RefInsteadOfPointerLayer
            {
                var transpose_byte = (byte)(transpose ? 1 : 0);
                glInstance.ProgramUniformMatrix4x2fvEXT(program, location, count, transpose_byte, value_ptr);
            }
        }

        // ProgramUniformMatrix3x4fvEXT overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void ProgramUniformMatrix3x4fvEXT(this GL.EXTExtension glInstance, ProgramHandle program, int location, bool transpose, ReadOnlySpan<float> value)
        {
            var count = (int)(value.Length / 12);
            fixed (float* value_ptr = value) // SpanOrArrayLayer
            {
                var transpose_byte = (byte)(transpose ? 1 : 0);
                glInstance.ProgramUniformMatrix3x4fvEXT(program, location, count, transpose_byte, value_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void ProgramUniformMatrix3x4fvEXT(this GL.EXTExtension glInstance, ProgramHandle program, int location, bool transpose, float[] value)
        {
            var count = (int)(value.Length / 12);
            fixed (float* value_ptr = value) // SpanOrArrayLayer
            {
                var transpose_byte = (byte)(transpose ? 1 : 0);
                glInstance.ProgramUniformMatrix3x4fvEXT(program, location, count, transpose_byte, value_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void ProgramUniformMatrix3x4fvEXT(this GL.EXTExtension glInstance, ProgramHandle program, int location, int count, bool transpose, in float value)
        {
            fixed (float* value_ptr = &value) // RefInsteadOfPointerLayer
            {
                var transpose_byte = (byte)(transpose ? 1 : 0);
                glInstance.ProgramUniformMatrix3x4fvEXT(program, location, count, transpose_byte, value_ptr);
            }
        }

        // ProgramUniformMatrix4x3fvEXT overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void ProgramUniformMatrix4x3fvEXT(this GL.EXTExtension glInstance, ProgramHandle program, int location, bool transpose, ReadOnlySpan<float> value)
        {
            var count = (int)(value.Length / 12);
            fixed (float* value_ptr = value) // SpanOrArrayLayer
            {
                var transpose_byte = (byte)(transpose ? 1 : 0);
                glInstance.ProgramUniformMatrix4x3fvEXT(program, location, count, transpose_byte, value_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void ProgramUniformMatrix4x3fvEXT(this GL.EXTExtension glInstance, ProgramHandle program, int location, bool transpose, float[] value)
        {
            var count = (int)(value.Length / 12);
            fixed (float* value_ptr = value) // SpanOrArrayLayer
            {
                var transpose_byte = (byte)(transpose ? 1 : 0);
                glInstance.ProgramUniformMatrix4x3fvEXT(program, location, count, transpose_byte, value_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void ProgramUniformMatrix4x3fvEXT(this GL.EXTExtension glInstance, ProgramHandle program, int location, int count, bool transpose, in float value)
        {
            fixed (float* value_ptr = &value) // RefInsteadOfPointerLayer
            {
                var transpose_byte = (byte)(transpose ? 1 : 0);
                glInstance.ProgramUniformMatrix4x3fvEXT(program, location, count, transpose_byte, value_ptr);
            }
        }

        // TextureParameterIivEXT overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void TextureParameterIivEXT(this GL.EXTExtension glInstance, TextureHandle texture, TextureTarget target, TextureParameterName pname, ReadOnlySpan<int> parameters)
        {
            fixed (int* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.TextureParameterIivEXT(texture, target, pname, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void TextureParameterIivEXT(this GL.EXTExtension glInstance, TextureHandle texture, TextureTarget target, TextureParameterName pname, int[] parameters)
        {
            fixed (int* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.TextureParameterIivEXT(texture, target, pname, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void TextureParameterIivEXT(this GL.EXTExtension glInstance, TextureHandle texture, TextureTarget target, TextureParameterName pname, in int parameters)
        {
            fixed (int* parameters_ptr = &parameters) // RefInsteadOfPointerLayer
            {
                glInstance.TextureParameterIivEXT(texture, target, pname, parameters_ptr);
            }
        }

        // TextureParameterIuivEXT overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void TextureParameterIuivEXT(this GL.EXTExtension glInstance, TextureHandle texture, TextureTarget target, TextureParameterName pname, ReadOnlySpan<uint> parameters)
        {
            fixed (uint* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.TextureParameterIuivEXT(texture, target, pname, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void TextureParameterIuivEXT(this GL.EXTExtension glInstance, TextureHandle texture, TextureTarget target, TextureParameterName pname, uint[] parameters)
        {
            fixed (uint* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.TextureParameterIuivEXT(texture, target, pname, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void TextureParameterIuivEXT(this GL.EXTExtension glInstance, TextureHandle texture, TextureTarget target, TextureParameterName pname, in uint parameters)
        {
            fixed (uint* parameters_ptr = &parameters) // RefInsteadOfPointerLayer
            {
                glInstance.TextureParameterIuivEXT(texture, target, pname, parameters_ptr);
            }
        }

        // GetTextureParameterIivEXT overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetTextureParameterIivEXT(this GL.EXTExtension glInstance, TextureHandle texture, TextureTarget target, GetTextureParameter pname, Span<int> parameters)
        {
            fixed (int* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.GetTextureParameterIivEXT(texture, target, pname, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetTextureParameterIivEXT(this GL.EXTExtension glInstance, TextureHandle texture, TextureTarget target, GetTextureParameter pname, int[] parameters)
        {
            fixed (int* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.GetTextureParameterIivEXT(texture, target, pname, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void GetTextureParameterIivEXT(this GL.EXTExtension glInstance, TextureHandle texture, TextureTarget target, GetTextureParameter pname, ref int parameters)
        {
            fixed (int* parameters_ptr = &parameters) // RefInsteadOfPointerLayer
            {
                glInstance.GetTextureParameterIivEXT(texture, target, pname, parameters_ptr);
            }
        }

        // GetTextureParameterIuivEXT overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetTextureParameterIuivEXT(this GL.EXTExtension glInstance, TextureHandle texture, TextureTarget target, GetTextureParameter pname, Span<uint> parameters)
        {
            fixed (uint* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.GetTextureParameterIuivEXT(texture, target, pname, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetTextureParameterIuivEXT(this GL.EXTExtension glInstance, TextureHandle texture, TextureTarget target, GetTextureParameter pname, uint[] parameters)
        {
            fixed (uint* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.GetTextureParameterIuivEXT(texture, target, pname, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void GetTextureParameterIuivEXT(this GL.EXTExtension glInstance, TextureHandle texture, TextureTarget target, GetTextureParameter pname, ref uint parameters)
        {
            fixed (uint* parameters_ptr = &parameters) // RefInsteadOfPointerLayer
            {
                glInstance.GetTextureParameterIuivEXT(texture, target, pname, parameters_ptr);
            }
        }

        // MultiTexParameterIivEXT overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void MultiTexParameterIivEXT(this GL.EXTExtension glInstance, TextureUnit texunit, TextureTarget target, TextureParameterName pname, ReadOnlySpan<int> parameters)
        {
            fixed (int* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.MultiTexParameterIivEXT(texunit, target, pname, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void MultiTexParameterIivEXT(this GL.EXTExtension glInstance, TextureUnit texunit, TextureTarget target, TextureParameterName pname, int[] parameters)
        {
            fixed (int* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.MultiTexParameterIivEXT(texunit, target, pname, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void MultiTexParameterIivEXT(this GL.EXTExtension glInstance, TextureUnit texunit, TextureTarget target, TextureParameterName pname, in int parameters)
        {
            fixed (int* parameters_ptr = &parameters) // RefInsteadOfPointerLayer
            {
                glInstance.MultiTexParameterIivEXT(texunit, target, pname, parameters_ptr);
            }
        }

        // MultiTexParameterIuivEXT overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void MultiTexParameterIuivEXT(this GL.EXTExtension glInstance, TextureUnit texunit, TextureTarget target, TextureParameterName pname, ReadOnlySpan<uint> parameters)
        {
            fixed (uint* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.MultiTexParameterIuivEXT(texunit, target, pname, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void MultiTexParameterIuivEXT(this GL.EXTExtension glInstance, TextureUnit texunit, TextureTarget target, TextureParameterName pname, uint[] parameters)
        {
            fixed (uint* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.MultiTexParameterIuivEXT(texunit, target, pname, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void MultiTexParameterIuivEXT(this GL.EXTExtension glInstance, TextureUnit texunit, TextureTarget target, TextureParameterName pname, in uint parameters)
        {
            fixed (uint* parameters_ptr = &parameters) // RefInsteadOfPointerLayer
            {
                glInstance.MultiTexParameterIuivEXT(texunit, target, pname, parameters_ptr);
            }
        }

        // GetMultiTexParameterIivEXT overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetMultiTexParameterIivEXT(this GL.EXTExtension glInstance, TextureUnit texunit, TextureTarget target, GetTextureParameter pname, Span<int> parameters)
        {
            fixed (int* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.GetMultiTexParameterIivEXT(texunit, target, pname, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetMultiTexParameterIivEXT(this GL.EXTExtension glInstance, TextureUnit texunit, TextureTarget target, GetTextureParameter pname, int[] parameters)
        {
            fixed (int* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.GetMultiTexParameterIivEXT(texunit, target, pname, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void GetMultiTexParameterIivEXT(this GL.EXTExtension glInstance, TextureUnit texunit, TextureTarget target, GetTextureParameter pname, ref int parameters)
        {
            fixed (int* parameters_ptr = &parameters) // RefInsteadOfPointerLayer
            {
                glInstance.GetMultiTexParameterIivEXT(texunit, target, pname, parameters_ptr);
            }
        }

        // GetMultiTexParameterIuivEXT overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetMultiTexParameterIuivEXT(this GL.EXTExtension glInstance, TextureUnit texunit, TextureTarget target, GetTextureParameter pname, Span<uint> parameters)
        {
            fixed (uint* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.GetMultiTexParameterIuivEXT(texunit, target, pname, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetMultiTexParameterIuivEXT(this GL.EXTExtension glInstance, TextureUnit texunit, TextureTarget target, GetTextureParameter pname, uint[] parameters)
        {
            fixed (uint* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.GetMultiTexParameterIuivEXT(texunit, target, pname, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void GetMultiTexParameterIuivEXT(this GL.EXTExtension glInstance, TextureUnit texunit, TextureTarget target, GetTextureParameter pname, ref uint parameters)
        {
            fixed (uint* parameters_ptr = &parameters) // RefInsteadOfPointerLayer
            {
                glInstance.GetMultiTexParameterIuivEXT(texunit, target, pname, parameters_ptr);
            }
        }

        // ProgramUniform1uivEXT overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void ProgramUniform1uivEXT(this GL.EXTExtension glInstance, ProgramHandle program, int location, ReadOnlySpan<uint> value)
        {
            var count = (int)(value.Length);
            fixed (uint* value_ptr = value) // SpanOrArrayLayer
            {
                glInstance.ProgramUniform1uivEXT(program, location, count, value_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void ProgramUniform1uivEXT(this GL.EXTExtension glInstance, ProgramHandle program, int location, uint[] value)
        {
            var count = (int)(value.Length);
            fixed (uint* value_ptr = value) // SpanOrArrayLayer
            {
                glInstance.ProgramUniform1uivEXT(program, location, count, value_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void ProgramUniform1uivEXT(this GL.EXTExtension glInstance, ProgramHandle program, int location, int count, in uint value)
        {
            fixed (uint* value_ptr = &value) // RefInsteadOfPointerLayer
            {
                glInstance.ProgramUniform1uivEXT(program, location, count, value_ptr);
            }
        }

        // ProgramUniform2uivEXT overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void ProgramUniform2uivEXT(this GL.EXTExtension glInstance, ProgramHandle program, int location, ReadOnlySpan<uint> value)
        {
            var count = (int)(value.Length / 2);
            fixed (uint* value_ptr = value) // SpanOrArrayLayer
            {
                glInstance.ProgramUniform2uivEXT(program, location, count, value_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void ProgramUniform2uivEXT(this GL.EXTExtension glInstance, ProgramHandle program, int location, uint[] value)
        {
            var count = (int)(value.Length / 2);
            fixed (uint* value_ptr = value) // SpanOrArrayLayer
            {
                glInstance.ProgramUniform2uivEXT(program, location, count, value_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void ProgramUniform2uivEXT(this GL.EXTExtension glInstance, ProgramHandle program, int location, int count, in uint value)
        {
            fixed (uint* value_ptr = &value) // RefInsteadOfPointerLayer
            {
                glInstance.ProgramUniform2uivEXT(program, location, count, value_ptr);
            }
        }

        // ProgramUniform3uivEXT overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void ProgramUniform3uivEXT(this GL.EXTExtension glInstance, ProgramHandle program, int location, ReadOnlySpan<uint> value)
        {
            var count = (int)(value.Length / 3);
            fixed (uint* value_ptr = value) // SpanOrArrayLayer
            {
                glInstance.ProgramUniform3uivEXT(program, location, count, value_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void ProgramUniform3uivEXT(this GL.EXTExtension glInstance, ProgramHandle program, int location, uint[] value)
        {
            var count = (int)(value.Length / 3);
            fixed (uint* value_ptr = value) // SpanOrArrayLayer
            {
                glInstance.ProgramUniform3uivEXT(program, location, count, value_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void ProgramUniform3uivEXT(this GL.EXTExtension glInstance, ProgramHandle program, int location, int count, in uint value)
        {
            fixed (uint* value_ptr = &value) // RefInsteadOfPointerLayer
            {
                glInstance.ProgramUniform3uivEXT(program, location, count, value_ptr);
            }
        }

        // ProgramUniform4uivEXT overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void ProgramUniform4uivEXT(this GL.EXTExtension glInstance, ProgramHandle program, int location, ReadOnlySpan<uint> value)
        {
            var count = (int)(value.Length / 4);
            fixed (uint* value_ptr = value) // SpanOrArrayLayer
            {
                glInstance.ProgramUniform4uivEXT(program, location, count, value_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void ProgramUniform4uivEXT(this GL.EXTExtension glInstance, ProgramHandle program, int location, uint[] value)
        {
            var count = (int)(value.Length / 4);
            fixed (uint* value_ptr = value) // SpanOrArrayLayer
            {
                glInstance.ProgramUniform4uivEXT(program, location, count, value_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void ProgramUniform4uivEXT(this GL.EXTExtension glInstance, ProgramHandle program, int location, int count, in uint value)
        {
            fixed (uint* value_ptr = &value) // RefInsteadOfPointerLayer
            {
                glInstance.ProgramUniform4uivEXT(program, location, count, value_ptr);
            }
        }

        // NamedProgramLocalParameters4fvEXT overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void NamedProgramLocalParameters4fvEXT(this GL.EXTExtension glInstance, ProgramHandle program, ProgramTarget target, uint index, ReadOnlySpan<float> parameters)
        {
            var count = (int)(parameters.Length / 4);
            fixed (float* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.NamedProgramLocalParameters4fvEXT(program, target, index, count, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void NamedProgramLocalParameters4fvEXT(this GL.EXTExtension glInstance, ProgramHandle program, ProgramTarget target, uint index, float[] parameters)
        {
            var count = (int)(parameters.Length / 4);
            fixed (float* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.NamedProgramLocalParameters4fvEXT(program, target, index, count, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void NamedProgramLocalParameters4fvEXT(this GL.EXTExtension glInstance, ProgramHandle program, ProgramTarget target, uint index, int count, in float parameters)
        {
            fixed (float* parameters_ptr = &parameters) // RefInsteadOfPointerLayer
            {
                glInstance.NamedProgramLocalParameters4fvEXT(program, target, index, count, parameters_ptr);
            }
        }

        // NamedProgramLocalParameterI4ivEXT overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void NamedProgramLocalParameterI4ivEXT(this GL.EXTExtension glInstance, ProgramHandle program, ProgramTarget target, uint index, ReadOnlySpan<int> parameters)
        {
            fixed (int* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.NamedProgramLocalParameterI4ivEXT(program, target, index, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void NamedProgramLocalParameterI4ivEXT(this GL.EXTExtension glInstance, ProgramHandle program, ProgramTarget target, uint index, int[] parameters)
        {
            fixed (int* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.NamedProgramLocalParameterI4ivEXT(program, target, index, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void NamedProgramLocalParameterI4ivEXT(this GL.EXTExtension glInstance, ProgramHandle program, ProgramTarget target, uint index, in int parameters)
        {
            fixed (int* parameters_ptr = &parameters) // RefInsteadOfPointerLayer
            {
                glInstance.NamedProgramLocalParameterI4ivEXT(program, target, index, parameters_ptr);
            }
        }

        // NamedProgramLocalParametersI4ivEXT overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void NamedProgramLocalParametersI4ivEXT(this GL.EXTExtension glInstance, ProgramHandle program, ProgramTarget target, uint index, ReadOnlySpan<int> parameters)
        {
            var count = (int)(parameters.Length / 4);
            fixed (int* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.NamedProgramLocalParametersI4ivEXT(program, target, index, count, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void NamedProgramLocalParametersI4ivEXT(this GL.EXTExtension glInstance, ProgramHandle program, ProgramTarget target, uint index, int[] parameters)
        {
            var count = (int)(parameters.Length / 4);
            fixed (int* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.NamedProgramLocalParametersI4ivEXT(program, target, index, count, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void NamedProgramLocalParametersI4ivEXT(this GL.EXTExtension glInstance, ProgramHandle program, ProgramTarget target, uint index, int count, in int parameters)
        {
            fixed (int* parameters_ptr = &parameters) // RefInsteadOfPointerLayer
            {
                glInstance.NamedProgramLocalParametersI4ivEXT(program, target, index, count, parameters_ptr);
            }
        }

        // NamedProgramLocalParameterI4uivEXT overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void NamedProgramLocalParameterI4uivEXT(this GL.EXTExtension glInstance, ProgramHandle program, ProgramTarget target, uint index, ReadOnlySpan<uint> parameters)
        {
            fixed (uint* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.NamedProgramLocalParameterI4uivEXT(program, target, index, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void NamedProgramLocalParameterI4uivEXT(this GL.EXTExtension glInstance, ProgramHandle program, ProgramTarget target, uint index, uint[] parameters)
        {
            fixed (uint* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.NamedProgramLocalParameterI4uivEXT(program, target, index, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void NamedProgramLocalParameterI4uivEXT(this GL.EXTExtension glInstance, ProgramHandle program, ProgramTarget target, uint index, in uint parameters)
        {
            fixed (uint* parameters_ptr = &parameters) // RefInsteadOfPointerLayer
            {
                glInstance.NamedProgramLocalParameterI4uivEXT(program, target, index, parameters_ptr);
            }
        }

        // NamedProgramLocalParametersI4uivEXT overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void NamedProgramLocalParametersI4uivEXT(this GL.EXTExtension glInstance, ProgramHandle program, ProgramTarget target, uint index, ReadOnlySpan<uint> parameters)
        {
            var count = (int)(parameters.Length / 4);
            fixed (uint* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.NamedProgramLocalParametersI4uivEXT(program, target, index, count, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void NamedProgramLocalParametersI4uivEXT(this GL.EXTExtension glInstance, ProgramHandle program, ProgramTarget target, uint index, uint[] parameters)
        {
            var count = (int)(parameters.Length / 4);
            fixed (uint* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.NamedProgramLocalParametersI4uivEXT(program, target, index, count, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void NamedProgramLocalParametersI4uivEXT(this GL.EXTExtension glInstance, ProgramHandle program, ProgramTarget target, uint index, int count, in uint parameters)
        {
            fixed (uint* parameters_ptr = &parameters) // RefInsteadOfPointerLayer
            {
                glInstance.NamedProgramLocalParametersI4uivEXT(program, target, index, count, parameters_ptr);
            }
        }

        // GetNamedProgramLocalParameterIivEXT overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetNamedProgramLocalParameterIivEXT(this GL.EXTExtension glInstance, ProgramHandle program, ProgramTarget target, uint index, Span<int> parameters)
        {
            fixed (int* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.GetNamedProgramLocalParameterIivEXT(program, target, index, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetNamedProgramLocalParameterIivEXT(this GL.EXTExtension glInstance, ProgramHandle program, ProgramTarget target, uint index, int[] parameters)
        {
            fixed (int* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.GetNamedProgramLocalParameterIivEXT(program, target, index, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void GetNamedProgramLocalParameterIivEXT(this GL.EXTExtension glInstance, ProgramHandle program, ProgramTarget target, uint index, ref int parameters)
        {
            fixed (int* parameters_ptr = &parameters) // RefInsteadOfPointerLayer
            {
                glInstance.GetNamedProgramLocalParameterIivEXT(program, target, index, parameters_ptr);
            }
        }

        // GetNamedProgramLocalParameterIuivEXT overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetNamedProgramLocalParameterIuivEXT(this GL.EXTExtension glInstance, ProgramHandle program, ProgramTarget target, uint index, Span<uint> parameters)
        {
            fixed (uint* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.GetNamedProgramLocalParameterIuivEXT(program, target, index, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetNamedProgramLocalParameterIuivEXT(this GL.EXTExtension glInstance, ProgramHandle program, ProgramTarget target, uint index, uint[] parameters)
        {
            fixed (uint* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.GetNamedProgramLocalParameterIuivEXT(program, target, index, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void GetNamedProgramLocalParameterIuivEXT(this GL.EXTExtension glInstance, ProgramHandle program, ProgramTarget target, uint index, ref uint parameters)
        {
            fixed (uint* parameters_ptr = &parameters) // RefInsteadOfPointerLayer
            {
                glInstance.GetNamedProgramLocalParameterIuivEXT(program, target, index, parameters_ptr);
            }
        }

        // GetFloati_vEXT overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetFloati_vEXT(this GL.EXTExtension glInstance, GetPName pname, uint index, Span<float> parameters)
        {
            fixed (float* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.GetFloati_vEXT(pname, index, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetFloati_vEXT(this GL.EXTExtension glInstance, GetPName pname, uint index, float[] parameters)
        {
            fixed (float* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.GetFloati_vEXT(pname, index, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void GetFloati_vEXT(this GL.EXTExtension glInstance, GetPName pname, uint index, ref float parameters)
        {
            fixed (float* parameters_ptr = &parameters) // RefInsteadOfPointerLayer
            {
                glInstance.GetFloati_vEXT(pname, index, parameters_ptr);
            }
        }

        // GetDoublei_vEXT overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetDoublei_vEXT(this GL.EXTExtension glInstance, GetPName pname, uint index, Span<double> parameters)
        {
            fixed (double* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.GetDoublei_vEXT(pname, index, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetDoublei_vEXT(this GL.EXTExtension glInstance, GetPName pname, uint index, double[] parameters)
        {
            fixed (double* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.GetDoublei_vEXT(pname, index, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void GetDoublei_vEXT(this GL.EXTExtension glInstance, GetPName pname, uint index, ref double parameters)
        {
            fixed (double* parameters_ptr = &parameters) // RefInsteadOfPointerLayer
            {
                glInstance.GetDoublei_vEXT(pname, index, parameters_ptr);
            }
        }

        // NamedProgramStringEXT overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.VoidPtrToIntPtrOverloader
        public static unsafe void NamedProgramStringEXT(this GL.EXTExtension glInstance, ProgramHandle program, ProgramTarget target, ProgramFormat format, int len, IntPtr str)
        {
            var str_vptr = (void*)str;
            glInstance.NamedProgramStringEXT(program, target, format, len, str_vptr);
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void NamedProgramStringEXT<T1>(this GL.EXTExtension glInstance, ProgramHandle program, ProgramTarget target, ProgramFormat format, ReadOnlySpan<T1> str)
            where T1 : unmanaged
        {
            var len = (int)(str.Length * sizeof(T1));
            fixed (void* str_ptr = str) // SpanOrArrayLayer
            {
                glInstance.NamedProgramStringEXT(program, target, format, len, str_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void NamedProgramStringEXT<T1>(this GL.EXTExtension glInstance, ProgramHandle program, ProgramTarget target, ProgramFormat format, T1[] str)
            where T1 : unmanaged
        {
            var len = (int)(str.Length * sizeof(T1));
            fixed (void* str_ptr = str) // SpanOrArrayLayer
            {
                glInstance.NamedProgramStringEXT(program, target, format, len, str_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void NamedProgramStringEXT<T1>(this GL.EXTExtension glInstance, ProgramHandle program, ProgramTarget target, ProgramFormat format, int len, in T1 str)
            where T1 : unmanaged
        {
            fixed (void* str_ptr = &str) // RefInsteadOfPointerLayer
            {
                glInstance.NamedProgramStringEXT(program, target, format, len, str_ptr);
            }
        }

        // NamedProgramLocalParameter4dvEXT overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void NamedProgramLocalParameter4dvEXT(this GL.EXTExtension glInstance, ProgramHandle program, ProgramTarget target, uint index, ReadOnlySpan<double> parameters)
        {
            fixed (double* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.NamedProgramLocalParameter4dvEXT(program, target, index, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void NamedProgramLocalParameter4dvEXT(this GL.EXTExtension glInstance, ProgramHandle program, ProgramTarget target, uint index, double[] parameters)
        {
            fixed (double* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.NamedProgramLocalParameter4dvEXT(program, target, index, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void NamedProgramLocalParameter4dvEXT(this GL.EXTExtension glInstance, ProgramHandle program, ProgramTarget target, uint index, in double parameters)
        {
            fixed (double* parameters_ptr = &parameters) // RefInsteadOfPointerLayer
            {
                glInstance.NamedProgramLocalParameter4dvEXT(program, target, index, parameters_ptr);
            }
        }

        // NamedProgramLocalParameter4fvEXT overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void NamedProgramLocalParameter4fvEXT(this GL.EXTExtension glInstance, ProgramHandle program, ProgramTarget target, uint index, ReadOnlySpan<float> parameters)
        {
            fixed (float* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.NamedProgramLocalParameter4fvEXT(program, target, index, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void NamedProgramLocalParameter4fvEXT(this GL.EXTExtension glInstance, ProgramHandle program, ProgramTarget target, uint index, float[] parameters)
        {
            fixed (float* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.NamedProgramLocalParameter4fvEXT(program, target, index, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void NamedProgramLocalParameter4fvEXT(this GL.EXTExtension glInstance, ProgramHandle program, ProgramTarget target, uint index, in float parameters)
        {
            fixed (float* parameters_ptr = &parameters) // RefInsteadOfPointerLayer
            {
                glInstance.NamedProgramLocalParameter4fvEXT(program, target, index, parameters_ptr);
            }
        }

        // GetNamedProgramLocalParameterdvEXT overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetNamedProgramLocalParameterdvEXT(this GL.EXTExtension glInstance, ProgramHandle program, ProgramTarget target, uint index, Span<double> parameters)
        {
            fixed (double* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.GetNamedProgramLocalParameterdvEXT(program, target, index, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetNamedProgramLocalParameterdvEXT(this GL.EXTExtension glInstance, ProgramHandle program, ProgramTarget target, uint index, double[] parameters)
        {
            fixed (double* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.GetNamedProgramLocalParameterdvEXT(program, target, index, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void GetNamedProgramLocalParameterdvEXT(this GL.EXTExtension glInstance, ProgramHandle program, ProgramTarget target, uint index, ref double parameters)
        {
            fixed (double* parameters_ptr = &parameters) // RefInsteadOfPointerLayer
            {
                glInstance.GetNamedProgramLocalParameterdvEXT(program, target, index, parameters_ptr);
            }
        }

        // GetNamedProgramLocalParameterfvEXT overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetNamedProgramLocalParameterfvEXT(this GL.EXTExtension glInstance, ProgramHandle program, ProgramTarget target, uint index, Span<float> parameters)
        {
            fixed (float* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.GetNamedProgramLocalParameterfvEXT(program, target, index, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetNamedProgramLocalParameterfvEXT(this GL.EXTExtension glInstance, ProgramHandle program, ProgramTarget target, uint index, float[] parameters)
        {
            fixed (float* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.GetNamedProgramLocalParameterfvEXT(program, target, index, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void GetNamedProgramLocalParameterfvEXT(this GL.EXTExtension glInstance, ProgramHandle program, ProgramTarget target, uint index, ref float parameters)
        {
            fixed (float* parameters_ptr = &parameters) // RefInsteadOfPointerLayer
            {
                glInstance.GetNamedProgramLocalParameterfvEXT(program, target, index, parameters_ptr);
            }
        }

        // GetNamedProgramivEXT overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetNamedProgramivEXT(this GL.EXTExtension glInstance, ProgramHandle program, ProgramTarget target, ProgramPropertyARB pname, Span<int> parameters)
        {
            fixed (int* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.GetNamedProgramivEXT(program, target, pname, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetNamedProgramivEXT(this GL.EXTExtension glInstance, ProgramHandle program, ProgramTarget target, ProgramPropertyARB pname, int[] parameters)
        {
            fixed (int* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.GetNamedProgramivEXT(program, target, pname, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void GetNamedProgramivEXT(this GL.EXTExtension glInstance, ProgramHandle program, ProgramTarget target, ProgramPropertyARB pname, ref int parameters)
        {
            fixed (int* parameters_ptr = &parameters) // RefInsteadOfPointerLayer
            {
                glInstance.GetNamedProgramivEXT(program, target, pname, parameters_ptr);
            }
        }

        // GetNamedProgramStringEXT overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.VoidPtrToIntPtrOverloader
        public static unsafe void GetNamedProgramStringEXT(this GL.EXTExtension glInstance, ProgramHandle program, ProgramTarget target, ProgramStringProperty pname, IntPtr str)
        {
            var str_vptr = (void*)str;
            glInstance.GetNamedProgramStringEXT(program, target, pname, str_vptr);
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetNamedProgramStringEXT<T1>(this GL.EXTExtension glInstance, ProgramHandle program, ProgramTarget target, ProgramStringProperty pname, Span<T1> str)
            where T1 : unmanaged
        {
            fixed (void* str_ptr = str) // SpanOrArrayLayer
            {
                glInstance.GetNamedProgramStringEXT(program, target, pname, str_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetNamedProgramStringEXT<T1>(this GL.EXTExtension glInstance, ProgramHandle program, ProgramTarget target, ProgramStringProperty pname, T1[] str)
            where T1 : unmanaged
        {
            fixed (void* str_ptr = str) // SpanOrArrayLayer
            {
                glInstance.GetNamedProgramStringEXT(program, target, pname, str_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void GetNamedProgramStringEXT<T1>(this GL.EXTExtension glInstance, ProgramHandle program, ProgramTarget target, ProgramStringProperty pname, ref T1 str)
            where T1 : unmanaged
        {
            fixed (void* str_ptr = &str) // RefInsteadOfPointerLayer
            {
                glInstance.GetNamedProgramStringEXT(program, target, pname, str_ptr);
            }
        }

        // GetNamedRenderbufferParameterivEXT overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetNamedRenderbufferParameterivEXT(this GL.EXTExtension glInstance, RenderbufferHandle renderbuffer, RenderbufferParameterName pname, Span<int> parameters)
        {
            fixed (int* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.GetNamedRenderbufferParameterivEXT(renderbuffer, pname, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetNamedRenderbufferParameterivEXT(this GL.EXTExtension glInstance, RenderbufferHandle renderbuffer, RenderbufferParameterName pname, int[] parameters)
        {
            fixed (int* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.GetNamedRenderbufferParameterivEXT(renderbuffer, pname, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void GetNamedRenderbufferParameterivEXT(this GL.EXTExtension glInstance, RenderbufferHandle renderbuffer, RenderbufferParameterName pname, ref int parameters)
        {
            fixed (int* parameters_ptr = &parameters) // RefInsteadOfPointerLayer
            {
                glInstance.GetNamedRenderbufferParameterivEXT(renderbuffer, pname, parameters_ptr);
            }
        }

        // GetNamedFramebufferAttachmentParameterivEXT overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetNamedFramebufferAttachmentParameterivEXT(this GL.EXTExtension glInstance, FramebufferHandle framebuffer, FramebufferAttachment attachment, FramebufferAttachmentParameterName pname, Span<int> parameters)
        {
            fixed (int* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.GetNamedFramebufferAttachmentParameterivEXT(framebuffer, attachment, pname, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetNamedFramebufferAttachmentParameterivEXT(this GL.EXTExtension glInstance, FramebufferHandle framebuffer, FramebufferAttachment attachment, FramebufferAttachmentParameterName pname, int[] parameters)
        {
            fixed (int* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.GetNamedFramebufferAttachmentParameterivEXT(framebuffer, attachment, pname, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void GetNamedFramebufferAttachmentParameterivEXT(this GL.EXTExtension glInstance, FramebufferHandle framebuffer, FramebufferAttachment attachment, FramebufferAttachmentParameterName pname, ref int parameters)
        {
            fixed (int* parameters_ptr = &parameters) // RefInsteadOfPointerLayer
            {
                glInstance.GetNamedFramebufferAttachmentParameterivEXT(framebuffer, attachment, pname, parameters_ptr);
            }
        }

        // FramebufferDrawBuffersEXT overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void FramebufferDrawBuffersEXT(this GL.EXTExtension glInstance, FramebufferHandle framebuffer, ReadOnlySpan<DrawBufferMode> bufs)
        {
            var n = (int)(bufs.Length);
            fixed (DrawBufferMode* bufs_ptr = bufs) // SpanOrArrayLayer
            {
                glInstance.FramebufferDrawBuffersEXT(framebuffer, n, bufs_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void FramebufferDrawBuffersEXT(this GL.EXTExtension glInstance, FramebufferHandle framebuffer, DrawBufferMode[] bufs)
        {
            var n = (int)(bufs.Length);
            fixed (DrawBufferMode* bufs_ptr = bufs) // SpanOrArrayLayer
            {
                glInstance.FramebufferDrawBuffersEXT(framebuffer, n, bufs_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void FramebufferDrawBuffersEXT(this GL.EXTExtension glInstance, FramebufferHandle framebuffer, int n, in DrawBufferMode bufs)
        {
            fixed (DrawBufferMode* bufs_ptr = &bufs) // RefInsteadOfPointerLayer
            {
                glInstance.FramebufferDrawBuffersEXT(framebuffer, n, bufs_ptr);
            }
        }

        // GetFramebufferParameterivEXT overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetFramebufferParameterivEXT(this GL.EXTExtension glInstance, FramebufferHandle framebuffer, GetFramebufferParameter pname, Span<int> parameters)
        {
            fixed (int* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.GetFramebufferParameterivEXT(framebuffer, pname, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetFramebufferParameterivEXT(this GL.EXTExtension glInstance, FramebufferHandle framebuffer, GetFramebufferParameter pname, int[] parameters)
        {
            fixed (int* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.GetFramebufferParameterivEXT(framebuffer, pname, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void GetFramebufferParameterivEXT(this GL.EXTExtension glInstance, FramebufferHandle framebuffer, GetFramebufferParameter pname, ref int parameters)
        {
            fixed (int* parameters_ptr = &parameters) // RefInsteadOfPointerLayer
            {
                glInstance.GetFramebufferParameterivEXT(framebuffer, pname, parameters_ptr);
            }
        }

        // VertexArrayVertexAttribOffsetEXT overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.BoolOverloader
        public static unsafe void VertexArrayVertexAttribOffsetEXT(this GL.EXTExtension glInstance, VertexArrayHandle vaobj, BufferHandle buffer, uint index, int size, VertexAttribPointerType type, bool normalized, int stride, IntPtr offset)
        {
            var normalized_byte = (byte)(normalized ? 1 : 0);
            glInstance.VertexArrayVertexAttribOffsetEXT(vaobj, buffer, index, size, type, normalized_byte, stride, offset);
        }

        // GetVertexArrayIntegervEXT overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void GetVertexArrayIntegervEXT(this GL.EXTExtension glInstance, VertexArrayHandle vaobj, VertexArrayPName pname, ref int param)
        {
            fixed (int* param_ptr = &param) // RefInsteadOfPointerLayer
            {
                glInstance.GetVertexArrayIntegervEXT(vaobj, pname, param_ptr);
            }
        }

        // GetVertexArrayIntegeri_vEXT overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void GetVertexArrayIntegeri_vEXT(this GL.EXTExtension glInstance, VertexArrayHandle vaobj, uint index, VertexArrayPName pname, ref int param)
        {
            fixed (int* param_ptr = &param) // RefInsteadOfPointerLayer
            {
                glInstance.GetVertexArrayIntegeri_vEXT(vaobj, index, pname, param_ptr);
            }
        }

        // NamedBufferStorageEXT overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.VoidPtrToIntPtrOverloader
        public static unsafe void NamedBufferStorageEXT(this GL.EXTExtension glInstance, BufferHandle buffer, nint size, IntPtr data, BufferStorageMask flags)
        {
            var data_vptr = (void*)data;
            glInstance.NamedBufferStorageEXT(buffer, size, data_vptr, flags);
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void NamedBufferStorageEXT<T1>(this GL.EXTExtension glInstance, BufferHandle buffer, ReadOnlySpan<T1> data, BufferStorageMask flags)
            where T1 : unmanaged
        {
            var size = (nint)(data.Length * sizeof(T1));
            fixed (void* data_ptr = data) // SpanOrArrayLayer
            {
                glInstance.NamedBufferStorageEXT(buffer, size, data_ptr, flags);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void NamedBufferStorageEXT<T1>(this GL.EXTExtension glInstance, BufferHandle buffer, T1[] data, BufferStorageMask flags)
            where T1 : unmanaged
        {
            var size = (nint)(data.Length * sizeof(T1));
            fixed (void* data_ptr = data) // SpanOrArrayLayer
            {
                glInstance.NamedBufferStorageEXT(buffer, size, data_ptr, flags);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void NamedBufferStorageEXT<T1>(this GL.EXTExtension glInstance, BufferHandle buffer, nint size, in T1 data, BufferStorageMask flags)
            where T1 : unmanaged
        {
            fixed (void* data_ptr = &data) // RefInsteadOfPointerLayer
            {
                glInstance.NamedBufferStorageEXT(buffer, size, data_ptr, flags);
            }
        }

        // ClearNamedBufferDataEXT overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.VoidPtrToIntPtrOverloader
        public static unsafe void ClearNamedBufferDataEXT(this GL.EXTExtension glInstance, BufferHandle buffer, SizedInternalFormat internalformat, PixelFormat format, PixelType type, IntPtr data)
        {
            var data_vptr = (void*)data;
            glInstance.ClearNamedBufferDataEXT(buffer, internalformat, format, type, data_vptr);
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void ClearNamedBufferDataEXT<T1>(this GL.EXTExtension glInstance, BufferHandle buffer, SizedInternalFormat internalformat, PixelFormat format, PixelType type, ReadOnlySpan<T1> data)
            where T1 : unmanaged
        {
            fixed (void* data_ptr = data) // SpanOrArrayLayer
            {
                glInstance.ClearNamedBufferDataEXT(buffer, internalformat, format, type, data_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void ClearNamedBufferDataEXT<T1>(this GL.EXTExtension glInstance, BufferHandle buffer, SizedInternalFormat internalformat, PixelFormat format, PixelType type, T1[] data)
            where T1 : unmanaged
        {
            fixed (void* data_ptr = data) // SpanOrArrayLayer
            {
                glInstance.ClearNamedBufferDataEXT(buffer, internalformat, format, type, data_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void ClearNamedBufferDataEXT<T1>(this GL.EXTExtension glInstance, BufferHandle buffer, SizedInternalFormat internalformat, PixelFormat format, PixelType type, in T1 data)
            where T1 : unmanaged
        {
            fixed (void* data_ptr = &data) // RefInsteadOfPointerLayer
            {
                glInstance.ClearNamedBufferDataEXT(buffer, internalformat, format, type, data_ptr);
            }
        }

        // ClearNamedBufferSubDataEXT overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.VoidPtrToIntPtrOverloader
        public static unsafe void ClearNamedBufferSubDataEXT(this GL.EXTExtension glInstance, BufferHandle buffer, SizedInternalFormat internalformat, nint offset, nint size, PixelFormat format, PixelType type, IntPtr data)
        {
            var data_vptr = (void*)data;
            glInstance.ClearNamedBufferSubDataEXT(buffer, internalformat, offset, size, format, type, data_vptr);
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void ClearNamedBufferSubDataEXT<T1>(this GL.EXTExtension glInstance, BufferHandle buffer, SizedInternalFormat internalformat, nint offset, nint size, PixelFormat format, PixelType type, ReadOnlySpan<T1> data)
            where T1 : unmanaged
        {
            fixed (void* data_ptr = data) // SpanOrArrayLayer
            {
                glInstance.ClearNamedBufferSubDataEXT(buffer, internalformat, offset, size, format, type, data_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void ClearNamedBufferSubDataEXT<T1>(this GL.EXTExtension glInstance, BufferHandle buffer, SizedInternalFormat internalformat, nint offset, nint size, PixelFormat format, PixelType type, T1[] data)
            where T1 : unmanaged
        {
            fixed (void* data_ptr = data) // SpanOrArrayLayer
            {
                glInstance.ClearNamedBufferSubDataEXT(buffer, internalformat, offset, size, format, type, data_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void ClearNamedBufferSubDataEXT<T1>(this GL.EXTExtension glInstance, BufferHandle buffer, SizedInternalFormat internalformat, nint offset, nint size, PixelFormat format, PixelType type, in T1 data)
            where T1 : unmanaged
        {
            fixed (void* data_ptr = &data) // RefInsteadOfPointerLayer
            {
                glInstance.ClearNamedBufferSubDataEXT(buffer, internalformat, offset, size, format, type, data_ptr);
            }
        }

        // GetNamedFramebufferParameterivEXT overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetNamedFramebufferParameterivEXT(this GL.EXTExtension glInstance, FramebufferHandle framebuffer, GetFramebufferParameter pname, Span<int> parameters)
        {
            fixed (int* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.GetNamedFramebufferParameterivEXT(framebuffer, pname, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetNamedFramebufferParameterivEXT(this GL.EXTExtension glInstance, FramebufferHandle framebuffer, GetFramebufferParameter pname, int[] parameters)
        {
            fixed (int* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.GetNamedFramebufferParameterivEXT(framebuffer, pname, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void GetNamedFramebufferParameterivEXT(this GL.EXTExtension glInstance, FramebufferHandle framebuffer, GetFramebufferParameter pname, ref int parameters)
        {
            fixed (int* parameters_ptr = &parameters) // RefInsteadOfPointerLayer
            {
                glInstance.GetNamedFramebufferParameterivEXT(framebuffer, pname, parameters_ptr);
            }
        }

        // ProgramUniform1dvEXT overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void ProgramUniform1dvEXT(this GL.EXTExtension glInstance, ProgramHandle program, int location, ReadOnlySpan<double> value)
        {
            var count = (int)(value.Length);
            fixed (double* value_ptr = value) // SpanOrArrayLayer
            {
                glInstance.ProgramUniform1dvEXT(program, location, count, value_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void ProgramUniform1dvEXT(this GL.EXTExtension glInstance, ProgramHandle program, int location, double[] value)
        {
            var count = (int)(value.Length);
            fixed (double* value_ptr = value) // SpanOrArrayLayer
            {
                glInstance.ProgramUniform1dvEXT(program, location, count, value_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void ProgramUniform1dvEXT(this GL.EXTExtension glInstance, ProgramHandle program, int location, int count, in double value)
        {
            fixed (double* value_ptr = &value) // RefInsteadOfPointerLayer
            {
                glInstance.ProgramUniform1dvEXT(program, location, count, value_ptr);
            }
        }

        // ProgramUniform2dvEXT overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void ProgramUniform2dvEXT(this GL.EXTExtension glInstance, ProgramHandle program, int location, ReadOnlySpan<double> value)
        {
            var count = (int)(value.Length / 2);
            fixed (double* value_ptr = value) // SpanOrArrayLayer
            {
                glInstance.ProgramUniform2dvEXT(program, location, count, value_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void ProgramUniform2dvEXT(this GL.EXTExtension glInstance, ProgramHandle program, int location, double[] value)
        {
            var count = (int)(value.Length / 2);
            fixed (double* value_ptr = value) // SpanOrArrayLayer
            {
                glInstance.ProgramUniform2dvEXT(program, location, count, value_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void ProgramUniform2dvEXT(this GL.EXTExtension glInstance, ProgramHandle program, int location, int count, in double value)
        {
            fixed (double* value_ptr = &value) // RefInsteadOfPointerLayer
            {
                glInstance.ProgramUniform2dvEXT(program, location, count, value_ptr);
            }
        }

        // ProgramUniform3dvEXT overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void ProgramUniform3dvEXT(this GL.EXTExtension glInstance, ProgramHandle program, int location, ReadOnlySpan<double> value)
        {
            var count = (int)(value.Length / 3);
            fixed (double* value_ptr = value) // SpanOrArrayLayer
            {
                glInstance.ProgramUniform3dvEXT(program, location, count, value_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void ProgramUniform3dvEXT(this GL.EXTExtension glInstance, ProgramHandle program, int location, double[] value)
        {
            var count = (int)(value.Length / 3);
            fixed (double* value_ptr = value) // SpanOrArrayLayer
            {
                glInstance.ProgramUniform3dvEXT(program, location, count, value_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void ProgramUniform3dvEXT(this GL.EXTExtension glInstance, ProgramHandle program, int location, int count, in double value)
        {
            fixed (double* value_ptr = &value) // RefInsteadOfPointerLayer
            {
                glInstance.ProgramUniform3dvEXT(program, location, count, value_ptr);
            }
        }

        // ProgramUniform4dvEXT overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void ProgramUniform4dvEXT(this GL.EXTExtension glInstance, ProgramHandle program, int location, ReadOnlySpan<double> value)
        {
            var count = (int)(value.Length / 4);
            fixed (double* value_ptr = value) // SpanOrArrayLayer
            {
                glInstance.ProgramUniform4dvEXT(program, location, count, value_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void ProgramUniform4dvEXT(this GL.EXTExtension glInstance, ProgramHandle program, int location, double[] value)
        {
            var count = (int)(value.Length / 4);
            fixed (double* value_ptr = value) // SpanOrArrayLayer
            {
                glInstance.ProgramUniform4dvEXT(program, location, count, value_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void ProgramUniform4dvEXT(this GL.EXTExtension glInstance, ProgramHandle program, int location, int count, in double value)
        {
            fixed (double* value_ptr = &value) // RefInsteadOfPointerLayer
            {
                glInstance.ProgramUniform4dvEXT(program, location, count, value_ptr);
            }
        }

        // ProgramUniformMatrix2dvEXT overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void ProgramUniformMatrix2dvEXT(this GL.EXTExtension glInstance, ProgramHandle program, int location, bool transpose, ReadOnlySpan<double> value)
        {
            var count = (int)(value.Length / 4);
            fixed (double* value_ptr = value) // SpanOrArrayLayer
            {
                var transpose_byte = (byte)(transpose ? 1 : 0);
                glInstance.ProgramUniformMatrix2dvEXT(program, location, count, transpose_byte, value_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void ProgramUniformMatrix2dvEXT(this GL.EXTExtension glInstance, ProgramHandle program, int location, bool transpose, double[] value)
        {
            var count = (int)(value.Length / 4);
            fixed (double* value_ptr = value) // SpanOrArrayLayer
            {
                var transpose_byte = (byte)(transpose ? 1 : 0);
                glInstance.ProgramUniformMatrix2dvEXT(program, location, count, transpose_byte, value_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void ProgramUniformMatrix2dvEXT(this GL.EXTExtension glInstance, ProgramHandle program, int location, int count, bool transpose, in double value)
        {
            fixed (double* value_ptr = &value) // RefInsteadOfPointerLayer
            {
                var transpose_byte = (byte)(transpose ? 1 : 0);
                glInstance.ProgramUniformMatrix2dvEXT(program, location, count, transpose_byte, value_ptr);
            }
        }

        // ProgramUniformMatrix3dvEXT overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void ProgramUniformMatrix3dvEXT(this GL.EXTExtension glInstance, ProgramHandle program, int location, bool transpose, ReadOnlySpan<double> value)
        {
            var count = (int)(value.Length / 9);
            fixed (double* value_ptr = value) // SpanOrArrayLayer
            {
                var transpose_byte = (byte)(transpose ? 1 : 0);
                glInstance.ProgramUniformMatrix3dvEXT(program, location, count, transpose_byte, value_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void ProgramUniformMatrix3dvEXT(this GL.EXTExtension glInstance, ProgramHandle program, int location, bool transpose, double[] value)
        {
            var count = (int)(value.Length / 9);
            fixed (double* value_ptr = value) // SpanOrArrayLayer
            {
                var transpose_byte = (byte)(transpose ? 1 : 0);
                glInstance.ProgramUniformMatrix3dvEXT(program, location, count, transpose_byte, value_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void ProgramUniformMatrix3dvEXT(this GL.EXTExtension glInstance, ProgramHandle program, int location, int count, bool transpose, in double value)
        {
            fixed (double* value_ptr = &value) // RefInsteadOfPointerLayer
            {
                var transpose_byte = (byte)(transpose ? 1 : 0);
                glInstance.ProgramUniformMatrix3dvEXT(program, location, count, transpose_byte, value_ptr);
            }
        }

        // ProgramUniformMatrix4dvEXT overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void ProgramUniformMatrix4dvEXT(this GL.EXTExtension glInstance, ProgramHandle program, int location, bool transpose, ReadOnlySpan<double> value)
        {
            var count = (int)(value.Length / 16);
            fixed (double* value_ptr = value) // SpanOrArrayLayer
            {
                var transpose_byte = (byte)(transpose ? 1 : 0);
                glInstance.ProgramUniformMatrix4dvEXT(program, location, count, transpose_byte, value_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void ProgramUniformMatrix4dvEXT(this GL.EXTExtension glInstance, ProgramHandle program, int location, bool transpose, double[] value)
        {
            var count = (int)(value.Length / 16);
            fixed (double* value_ptr = value) // SpanOrArrayLayer
            {
                var transpose_byte = (byte)(transpose ? 1 : 0);
                glInstance.ProgramUniformMatrix4dvEXT(program, location, count, transpose_byte, value_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void ProgramUniformMatrix4dvEXT(this GL.EXTExtension glInstance, ProgramHandle program, int location, int count, bool transpose, in double value)
        {
            fixed (double* value_ptr = &value) // RefInsteadOfPointerLayer
            {
                var transpose_byte = (byte)(transpose ? 1 : 0);
                glInstance.ProgramUniformMatrix4dvEXT(program, location, count, transpose_byte, value_ptr);
            }
        }

        // ProgramUniformMatrix2x3dvEXT overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void ProgramUniformMatrix2x3dvEXT(this GL.EXTExtension glInstance, ProgramHandle program, int location, bool transpose, ReadOnlySpan<double> value)
        {
            var count = (int)(value.Length / 6);
            fixed (double* value_ptr = value) // SpanOrArrayLayer
            {
                var transpose_byte = (byte)(transpose ? 1 : 0);
                glInstance.ProgramUniformMatrix2x3dvEXT(program, location, count, transpose_byte, value_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void ProgramUniformMatrix2x3dvEXT(this GL.EXTExtension glInstance, ProgramHandle program, int location, bool transpose, double[] value)
        {
            var count = (int)(value.Length / 6);
            fixed (double* value_ptr = value) // SpanOrArrayLayer
            {
                var transpose_byte = (byte)(transpose ? 1 : 0);
                glInstance.ProgramUniformMatrix2x3dvEXT(program, location, count, transpose_byte, value_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void ProgramUniformMatrix2x3dvEXT(this GL.EXTExtension glInstance, ProgramHandle program, int location, int count, bool transpose, in double value)
        {
            fixed (double* value_ptr = &value) // RefInsteadOfPointerLayer
            {
                var transpose_byte = (byte)(transpose ? 1 : 0);
                glInstance.ProgramUniformMatrix2x3dvEXT(program, location, count, transpose_byte, value_ptr);
            }
        }

        // ProgramUniformMatrix2x4dvEXT overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void ProgramUniformMatrix2x4dvEXT(this GL.EXTExtension glInstance, ProgramHandle program, int location, bool transpose, ReadOnlySpan<double> value)
        {
            var count = (int)(value.Length / 8);
            fixed (double* value_ptr = value) // SpanOrArrayLayer
            {
                var transpose_byte = (byte)(transpose ? 1 : 0);
                glInstance.ProgramUniformMatrix2x4dvEXT(program, location, count, transpose_byte, value_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void ProgramUniformMatrix2x4dvEXT(this GL.EXTExtension glInstance, ProgramHandle program, int location, bool transpose, double[] value)
        {
            var count = (int)(value.Length / 8);
            fixed (double* value_ptr = value) // SpanOrArrayLayer
            {
                var transpose_byte = (byte)(transpose ? 1 : 0);
                glInstance.ProgramUniformMatrix2x4dvEXT(program, location, count, transpose_byte, value_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void ProgramUniformMatrix2x4dvEXT(this GL.EXTExtension glInstance, ProgramHandle program, int location, int count, bool transpose, in double value)
        {
            fixed (double* value_ptr = &value) // RefInsteadOfPointerLayer
            {
                var transpose_byte = (byte)(transpose ? 1 : 0);
                glInstance.ProgramUniformMatrix2x4dvEXT(program, location, count, transpose_byte, value_ptr);
            }
        }

        // ProgramUniformMatrix3x2dvEXT overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void ProgramUniformMatrix3x2dvEXT(this GL.EXTExtension glInstance, ProgramHandle program, int location, bool transpose, ReadOnlySpan<double> value)
        {
            var count = (int)(value.Length / 6);
            fixed (double* value_ptr = value) // SpanOrArrayLayer
            {
                var transpose_byte = (byte)(transpose ? 1 : 0);
                glInstance.ProgramUniformMatrix3x2dvEXT(program, location, count, transpose_byte, value_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void ProgramUniformMatrix3x2dvEXT(this GL.EXTExtension glInstance, ProgramHandle program, int location, bool transpose, double[] value)
        {
            var count = (int)(value.Length / 6);
            fixed (double* value_ptr = value) // SpanOrArrayLayer
            {
                var transpose_byte = (byte)(transpose ? 1 : 0);
                glInstance.ProgramUniformMatrix3x2dvEXT(program, location, count, transpose_byte, value_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void ProgramUniformMatrix3x2dvEXT(this GL.EXTExtension glInstance, ProgramHandle program, int location, int count, bool transpose, in double value)
        {
            fixed (double* value_ptr = &value) // RefInsteadOfPointerLayer
            {
                var transpose_byte = (byte)(transpose ? 1 : 0);
                glInstance.ProgramUniformMatrix3x2dvEXT(program, location, count, transpose_byte, value_ptr);
            }
        }

        // ProgramUniformMatrix3x4dvEXT overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void ProgramUniformMatrix3x4dvEXT(this GL.EXTExtension glInstance, ProgramHandle program, int location, bool transpose, ReadOnlySpan<double> value)
        {
            var count = (int)(value.Length / 12);
            fixed (double* value_ptr = value) // SpanOrArrayLayer
            {
                var transpose_byte = (byte)(transpose ? 1 : 0);
                glInstance.ProgramUniformMatrix3x4dvEXT(program, location, count, transpose_byte, value_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void ProgramUniformMatrix3x4dvEXT(this GL.EXTExtension glInstance, ProgramHandle program, int location, bool transpose, double[] value)
        {
            var count = (int)(value.Length / 12);
            fixed (double* value_ptr = value) // SpanOrArrayLayer
            {
                var transpose_byte = (byte)(transpose ? 1 : 0);
                glInstance.ProgramUniformMatrix3x4dvEXT(program, location, count, transpose_byte, value_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void ProgramUniformMatrix3x4dvEXT(this GL.EXTExtension glInstance, ProgramHandle program, int location, int count, bool transpose, in double value)
        {
            fixed (double* value_ptr = &value) // RefInsteadOfPointerLayer
            {
                var transpose_byte = (byte)(transpose ? 1 : 0);
                glInstance.ProgramUniformMatrix3x4dvEXT(program, location, count, transpose_byte, value_ptr);
            }
        }

        // ProgramUniformMatrix4x2dvEXT overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void ProgramUniformMatrix4x2dvEXT(this GL.EXTExtension glInstance, ProgramHandle program, int location, bool transpose, ReadOnlySpan<double> value)
        {
            var count = (int)(value.Length / 8);
            fixed (double* value_ptr = value) // SpanOrArrayLayer
            {
                var transpose_byte = (byte)(transpose ? 1 : 0);
                glInstance.ProgramUniformMatrix4x2dvEXT(program, location, count, transpose_byte, value_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void ProgramUniformMatrix4x2dvEXT(this GL.EXTExtension glInstance, ProgramHandle program, int location, bool transpose, double[] value)
        {
            var count = (int)(value.Length / 8);
            fixed (double* value_ptr = value) // SpanOrArrayLayer
            {
                var transpose_byte = (byte)(transpose ? 1 : 0);
                glInstance.ProgramUniformMatrix4x2dvEXT(program, location, count, transpose_byte, value_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void ProgramUniformMatrix4x2dvEXT(this GL.EXTExtension glInstance, ProgramHandle program, int location, int count, bool transpose, in double value)
        {
            fixed (double* value_ptr = &value) // RefInsteadOfPointerLayer
            {
                var transpose_byte = (byte)(transpose ? 1 : 0);
                glInstance.ProgramUniformMatrix4x2dvEXT(program, location, count, transpose_byte, value_ptr);
            }
        }

        // ProgramUniformMatrix4x3dvEXT overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void ProgramUniformMatrix4x3dvEXT(this GL.EXTExtension glInstance, ProgramHandle program, int location, bool transpose, ReadOnlySpan<double> value)
        {
            var count = (int)(value.Length / 12);
            fixed (double* value_ptr = value) // SpanOrArrayLayer
            {
                var transpose_byte = (byte)(transpose ? 1 : 0);
                glInstance.ProgramUniformMatrix4x3dvEXT(program, location, count, transpose_byte, value_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void ProgramUniformMatrix4x3dvEXT(this GL.EXTExtension glInstance, ProgramHandle program, int location, bool transpose, double[] value)
        {
            var count = (int)(value.Length / 12);
            fixed (double* value_ptr = value) // SpanOrArrayLayer
            {
                var transpose_byte = (byte)(transpose ? 1 : 0);
                glInstance.ProgramUniformMatrix4x3dvEXT(program, location, count, transpose_byte, value_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void ProgramUniformMatrix4x3dvEXT(this GL.EXTExtension glInstance, ProgramHandle program, int location, int count, bool transpose, in double value)
        {
            fixed (double* value_ptr = &value) // RefInsteadOfPointerLayer
            {
                var transpose_byte = (byte)(transpose ? 1 : 0);
                glInstance.ProgramUniformMatrix4x3dvEXT(program, location, count, transpose_byte, value_ptr);
            }
        }

        // TextureStorage2DMultisampleEXT overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.BoolOverloader
        public static unsafe void TextureStorage2DMultisampleEXT(this GL.EXTExtension glInstance, TextureHandle texture, TextureTarget target, int samples, SizedInternalFormat internalformat, int width, int height, bool fixedsamplelocations)
        {
            var fixedsamplelocations_byte = (byte)(fixedsamplelocations ? 1 : 0);
            glInstance.TextureStorage2DMultisampleEXT(texture, target, samples, internalformat, width, height, fixedsamplelocations_byte);
        }

        // TextureStorage3DMultisampleEXT overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.BoolOverloader
        public static unsafe void TextureStorage3DMultisampleEXT(this GL.EXTExtension glInstance, TextureHandle texture, GLEnum target, int samples, SizedInternalFormat internalformat, int width, int height, int depth, bool fixedsamplelocations)
        {
            var fixedsamplelocations_byte = (byte)(fixedsamplelocations ? 1 : 0);
            glInstance.TextureStorage3DMultisampleEXT(texture, target, samples, internalformat, width, height, depth, fixedsamplelocations_byte);
        }

        // VertexArrayVertexAttribFormatEXT overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.BoolOverloader
        public static unsafe void VertexArrayVertexAttribFormatEXT(this GL.EXTExtension glInstance, VertexArrayHandle vaobj, uint attribindex, int size, VertexAttribType type, bool normalized, uint relativeoffset)
        {
            var normalized_byte = (byte)(normalized ? 1 : 0);
            glInstance.VertexArrayVertexAttribFormatEXT(vaobj, attribindex, size, type, normalized_byte, relativeoffset);
        }

        // TexturePageCommitmentEXT overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.BoolOverloader
        public static unsafe void TexturePageCommitmentEXT(this GL.EXTExtension glInstance, TextureHandle texture, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, bool commit)
        {
            var commit_byte = (byte)(commit ? 1 : 0);
            glInstance.TexturePageCommitmentEXT(texture, level, xoffset, yoffset, zoffset, width, height, depth, commit_byte);
        }

        // ColorMaskIndexedEXT overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.BoolOverloader
        public static unsafe void ColorMaskIndexedEXT(this GL.EXTExtension glInstance, uint index, bool r, bool g, bool b, bool a)
        {
            var r_byte = (byte)(r ? 1 : 0);
            var g_byte = (byte)(g ? 1 : 0);
            var b_byte = (byte)(b ? 1 : 0);
            var a_byte = (byte)(a ? 1 : 0);
            glInstance.ColorMaskIndexedEXT(index, r_byte, g_byte, b_byte, a_byte);
        }

        // DrawElementsInstancedEXT overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.PointerToOffsetOverloader
        public static unsafe void DrawElementsInstancedEXT(this GL.EXTExtension glInstance, PrimitiveType mode, int count, DrawElementsType type, nint offset, int primcount)
        {
            void* indices = (void*)offset;
            glInstance.DrawElementsInstancedEXT(mode, count, type, indices, primcount);
        }

        // DrawRangeElementsEXT overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.PointerToOffsetOverloader
        public static unsafe void DrawRangeElementsEXT(this GL.EXTExtension glInstance, PrimitiveType mode, uint start, uint end, int count, DrawElementsType type, nint offset)
        {
            void* indices = (void*)offset;
            glInstance.DrawRangeElementsEXT(mode, start, end, count, type, indices);
        }

        // BufferStorageExternalEXT overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.VoidPtrToIntPtrOverloader
        public static unsafe void BufferStorageExternalEXT(this GL.EXTExtension glInstance, GLEnum target, IntPtr offset, nint size, IntPtr clientBuffer, BufferStorageMask flags)
        {
            var clientBuffer_vptr = (void*)clientBuffer;
            glInstance.BufferStorageExternalEXT(target, offset, size, clientBuffer_vptr, flags);
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void BufferStorageExternalEXT<T1>(this GL.EXTExtension glInstance, GLEnum target, IntPtr offset, nint size, ref T1 clientBuffer, BufferStorageMask flags)
            where T1 : unmanaged
        {
            fixed (void* clientBuffer_ptr = &clientBuffer) // RefInsteadOfPointerLayer
            {
                glInstance.BufferStorageExternalEXT(target, offset, size, clientBuffer_ptr, flags);
            }
        }

        // NamedBufferStorageExternalEXT overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.VoidPtrToIntPtrOverloader
        public static unsafe void NamedBufferStorageExternalEXT(this GL.EXTExtension glInstance, BufferHandle buffer, IntPtr offset, nint size, IntPtr clientBuffer, BufferStorageMask flags)
        {
            var clientBuffer_vptr = (void*)clientBuffer;
            glInstance.NamedBufferStorageExternalEXT(buffer, offset, size, clientBuffer_vptr, flags);
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void NamedBufferStorageExternalEXT<T1>(this GL.EXTExtension glInstance, BufferHandle buffer, IntPtr offset, nint size, ref T1 clientBuffer, BufferStorageMask flags)
            where T1 : unmanaged
        {
            fixed (void* clientBuffer_ptr = &clientBuffer) // RefInsteadOfPointerLayer
            {
                glInstance.NamedBufferStorageExternalEXT(buffer, offset, size, clientBuffer_ptr, flags);
            }
        }

        // FogCoordfvEXT overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void FogCoordfvEXT(this GL.EXTExtension glInstance, ReadOnlySpan<float> coord)
        {
            fixed (float* coord_ptr = coord) // SpanOrArrayLayer
            {
                glInstance.FogCoordfvEXT(coord_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void FogCoordfvEXT(this GL.EXTExtension glInstance, float[] coord)
        {
            fixed (float* coord_ptr = coord) // SpanOrArrayLayer
            {
                glInstance.FogCoordfvEXT(coord_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void FogCoordfvEXT(this GL.EXTExtension glInstance, in float coord)
        {
            fixed (float* coord_ptr = &coord) // RefInsteadOfPointerLayer
            {
                glInstance.FogCoordfvEXT(coord_ptr);
            }
        }

        // FogCoorddvEXT overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void FogCoorddvEXT(this GL.EXTExtension glInstance, ReadOnlySpan<double> coord)
        {
            fixed (double* coord_ptr = coord) // SpanOrArrayLayer
            {
                glInstance.FogCoorddvEXT(coord_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void FogCoorddvEXT(this GL.EXTExtension glInstance, double[] coord)
        {
            fixed (double* coord_ptr = coord) // SpanOrArrayLayer
            {
                glInstance.FogCoorddvEXT(coord_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void FogCoorddvEXT(this GL.EXTExtension glInstance, in double coord)
        {
            fixed (double* coord_ptr = &coord) // RefInsteadOfPointerLayer
            {
                glInstance.FogCoorddvEXT(coord_ptr);
            }
        }

        // FogCoordPointerEXT overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.VoidPtrToIntPtrOverloader
        public static unsafe void FogCoordPointerEXT(this GL.EXTExtension glInstance, FogPointerTypeEXT type, int stride, IntPtr pointer)
        {
            var pointer_vptr = (void*)pointer;
            glInstance.FogCoordPointerEXT(type, stride, pointer_vptr);
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void FogCoordPointerEXT<T1>(this GL.EXTExtension glInstance, FogPointerTypeEXT type, int stride, ReadOnlySpan<T1> pointer)
            where T1 : unmanaged
        {
            fixed (void* pointer_ptr = pointer) // SpanOrArrayLayer
            {
                glInstance.FogCoordPointerEXT(type, stride, pointer_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void FogCoordPointerEXT<T1>(this GL.EXTExtension glInstance, FogPointerTypeEXT type, int stride, T1[] pointer)
            where T1 : unmanaged
        {
            fixed (void* pointer_ptr = pointer) // SpanOrArrayLayer
            {
                glInstance.FogCoordPointerEXT(type, stride, pointer_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void FogCoordPointerEXT<T1>(this GL.EXTExtension glInstance, FogPointerTypeEXT type, int stride, in T1 pointer)
            where T1 : unmanaged
        {
            fixed (void* pointer_ptr = &pointer) // RefInsteadOfPointerLayer
            {
                glInstance.FogCoordPointerEXT(type, stride, pointer_ptr);
            }
        }

        // DeleteRenderbuffersEXT overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void DeleteRenderbuffersEXT(this GL.EXTExtension glInstance, ReadOnlySpan<RenderbufferHandle> renderbuffers)
        {
            var n = (int)(renderbuffers.Length);
            fixed (RenderbufferHandle* renderbuffers_ptr = renderbuffers) // SpanOrArrayLayer
            {
                glInstance.DeleteRenderbuffersEXT(n, renderbuffers_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void DeleteRenderbuffersEXT(this GL.EXTExtension glInstance, RenderbufferHandle[] renderbuffers)
        {
            var n = (int)(renderbuffers.Length);
            fixed (RenderbufferHandle* renderbuffers_ptr = renderbuffers) // SpanOrArrayLayer
            {
                glInstance.DeleteRenderbuffersEXT(n, renderbuffers_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void DeleteRenderbuffersEXT(this GL.EXTExtension glInstance, int n, in RenderbufferHandle renderbuffers)
        {
            fixed (RenderbufferHandle* renderbuffers_ptr = &renderbuffers) // RefInsteadOfPointerLayer
            {
                glInstance.DeleteRenderbuffersEXT(n, renderbuffers_ptr);
            }
        }

        // GenRenderbuffersEXT overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GenRenderbuffersEXT(this GL.EXTExtension glInstance, Span<RenderbufferHandle> renderbuffers)
        {
            var n = (int)(renderbuffers.Length);
            fixed (RenderbufferHandle* renderbuffers_ptr = renderbuffers) // SpanOrArrayLayer
            {
                glInstance.GenRenderbuffersEXT(n, renderbuffers_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GenRenderbuffersEXT(this GL.EXTExtension glInstance, RenderbufferHandle[] renderbuffers)
        {
            var n = (int)(renderbuffers.Length);
            fixed (RenderbufferHandle* renderbuffers_ptr = renderbuffers) // SpanOrArrayLayer
            {
                glInstance.GenRenderbuffersEXT(n, renderbuffers_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void GenRenderbuffersEXT(this GL.EXTExtension glInstance, int n, ref RenderbufferHandle renderbuffers)
        {
            fixed (RenderbufferHandle* renderbuffers_ptr = &renderbuffers) // RefInsteadOfPointerLayer
            {
                glInstance.GenRenderbuffersEXT(n, renderbuffers_ptr);
            }
        }

        // GetRenderbufferParameterivEXT overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetRenderbufferParameterivEXT(this GL.EXTExtension glInstance, RenderbufferTarget target, RenderbufferParameterName pname, Span<int> parameters)
        {
            fixed (int* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.GetRenderbufferParameterivEXT(target, pname, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetRenderbufferParameterivEXT(this GL.EXTExtension glInstance, RenderbufferTarget target, RenderbufferParameterName pname, int[] parameters)
        {
            fixed (int* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.GetRenderbufferParameterivEXT(target, pname, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void GetRenderbufferParameterivEXT(this GL.EXTExtension glInstance, RenderbufferTarget target, RenderbufferParameterName pname, ref int parameters)
        {
            fixed (int* parameters_ptr = &parameters) // RefInsteadOfPointerLayer
            {
                glInstance.GetRenderbufferParameterivEXT(target, pname, parameters_ptr);
            }
        }

        // DeleteFramebuffersEXT overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void DeleteFramebuffersEXT(this GL.EXTExtension glInstance, ReadOnlySpan<FramebufferHandle> framebuffers)
        {
            var n = (int)(framebuffers.Length);
            fixed (FramebufferHandle* framebuffers_ptr = framebuffers) // SpanOrArrayLayer
            {
                glInstance.DeleteFramebuffersEXT(n, framebuffers_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void DeleteFramebuffersEXT(this GL.EXTExtension glInstance, FramebufferHandle[] framebuffers)
        {
            var n = (int)(framebuffers.Length);
            fixed (FramebufferHandle* framebuffers_ptr = framebuffers) // SpanOrArrayLayer
            {
                glInstance.DeleteFramebuffersEXT(n, framebuffers_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void DeleteFramebuffersEXT(this GL.EXTExtension glInstance, int n, in FramebufferHandle framebuffers)
        {
            fixed (FramebufferHandle* framebuffers_ptr = &framebuffers) // RefInsteadOfPointerLayer
            {
                glInstance.DeleteFramebuffersEXT(n, framebuffers_ptr);
            }
        }

        // GenFramebuffersEXT overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GenFramebuffersEXT(this GL.EXTExtension glInstance, Span<FramebufferHandle> framebuffers)
        {
            var n = (int)(framebuffers.Length);
            fixed (FramebufferHandle* framebuffers_ptr = framebuffers) // SpanOrArrayLayer
            {
                glInstance.GenFramebuffersEXT(n, framebuffers_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GenFramebuffersEXT(this GL.EXTExtension glInstance, FramebufferHandle[] framebuffers)
        {
            var n = (int)(framebuffers.Length);
            fixed (FramebufferHandle* framebuffers_ptr = framebuffers) // SpanOrArrayLayer
            {
                glInstance.GenFramebuffersEXT(n, framebuffers_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void GenFramebuffersEXT(this GL.EXTExtension glInstance, int n, ref FramebufferHandle framebuffers)
        {
            fixed (FramebufferHandle* framebuffers_ptr = &framebuffers) // RefInsteadOfPointerLayer
            {
                glInstance.GenFramebuffersEXT(n, framebuffers_ptr);
            }
        }

        // GetFramebufferAttachmentParameterivEXT overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetFramebufferAttachmentParameterivEXT(this GL.EXTExtension glInstance, FramebufferTarget target, FramebufferAttachment attachment, FramebufferAttachmentParameterName pname, Span<int> parameters)
        {
            fixed (int* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.GetFramebufferAttachmentParameterivEXT(target, attachment, pname, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetFramebufferAttachmentParameterivEXT(this GL.EXTExtension glInstance, FramebufferTarget target, FramebufferAttachment attachment, FramebufferAttachmentParameterName pname, int[] parameters)
        {
            fixed (int* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.GetFramebufferAttachmentParameterivEXT(target, attachment, pname, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void GetFramebufferAttachmentParameterivEXT(this GL.EXTExtension glInstance, FramebufferTarget target, FramebufferAttachment attachment, FramebufferAttachmentParameterName pname, ref int parameters)
        {
            fixed (int* parameters_ptr = &parameters) // RefInsteadOfPointerLayer
            {
                glInstance.GetFramebufferAttachmentParameterivEXT(target, attachment, pname, parameters_ptr);
            }
        }

        // ProgramEnvParameters4fvEXT overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void ProgramEnvParameters4fvEXT(this GL.EXTExtension glInstance, ProgramTarget target, uint index, ReadOnlySpan<float> parameters)
        {
            var count = (int)(parameters.Length / 4);
            fixed (float* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.ProgramEnvParameters4fvEXT(target, index, count, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void ProgramEnvParameters4fvEXT(this GL.EXTExtension glInstance, ProgramTarget target, uint index, float[] parameters)
        {
            var count = (int)(parameters.Length / 4);
            fixed (float* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.ProgramEnvParameters4fvEXT(target, index, count, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void ProgramEnvParameters4fvEXT(this GL.EXTExtension glInstance, ProgramTarget target, uint index, int count, in float parameters)
        {
            fixed (float* parameters_ptr = &parameters) // RefInsteadOfPointerLayer
            {
                glInstance.ProgramEnvParameters4fvEXT(target, index, count, parameters_ptr);
            }
        }

        // ProgramLocalParameters4fvEXT overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void ProgramLocalParameters4fvEXT(this GL.EXTExtension glInstance, ProgramTarget target, uint index, ReadOnlySpan<float> parameters)
        {
            var count = (int)(parameters.Length / 4);
            fixed (float* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.ProgramLocalParameters4fvEXT(target, index, count, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void ProgramLocalParameters4fvEXT(this GL.EXTExtension glInstance, ProgramTarget target, uint index, float[] parameters)
        {
            var count = (int)(parameters.Length / 4);
            fixed (float* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.ProgramLocalParameters4fvEXT(target, index, count, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void ProgramLocalParameters4fvEXT(this GL.EXTExtension glInstance, ProgramTarget target, uint index, int count, in float parameters)
        {
            fixed (float* parameters_ptr = &parameters) // RefInsteadOfPointerLayer
            {
                glInstance.ProgramLocalParameters4fvEXT(target, index, count, parameters_ptr);
            }
        }

        // GetUniformuivEXT overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetUniformuivEXT(this GL.EXTExtension glInstance, ProgramHandle program, int location, Span<uint> parameters)
        {
            fixed (uint* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.GetUniformuivEXT(program, location, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetUniformuivEXT(this GL.EXTExtension glInstance, ProgramHandle program, int location, uint[] parameters)
        {
            fixed (uint* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.GetUniformuivEXT(program, location, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void GetUniformuivEXT(this GL.EXTExtension glInstance, ProgramHandle program, int location, ref uint parameters)
        {
            fixed (uint* parameters_ptr = &parameters) // RefInsteadOfPointerLayer
            {
                glInstance.GetUniformuivEXT(program, location, parameters_ptr);
            }
        }

        // BindFragDataLocationEXT overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.Transformer
        public static unsafe void BindFragDataLocationEXT(this GL.EXTExtension glInstance, ProgramHandle program, uint color, string name)
        {
            byte* name_ptr = (byte*)Marshal.StringToCoTaskMemUTF8(name);
            glInstance.BindFragDataLocationEXT(program, color, name_ptr);
            Marshal.FreeCoTaskMem((IntPtr)name_ptr);
        }

        // GetFragDataLocationEXT overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.Transformer
        public static unsafe int GetFragDataLocationEXT(this GL.EXTExtension glInstance, ProgramHandle program, string name)
        {
            int returnValue;
            byte* name_ptr = (byte*)Marshal.StringToCoTaskMemUTF8(name);
            returnValue = glInstance.GetFragDataLocationEXT(program, name_ptr);
            Marshal.FreeCoTaskMem((IntPtr)name_ptr);
            return returnValue;
        }

        // Uniform1uivEXT overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void Uniform1uivEXT(this GL.EXTExtension glInstance, int location, ReadOnlySpan<uint> value)
        {
            var count = (int)(value.Length / 1);
            fixed (uint* value_ptr = value) // SpanOrArrayLayer
            {
                glInstance.Uniform1uivEXT(location, count, value_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void Uniform1uivEXT(this GL.EXTExtension glInstance, int location, uint[] value)
        {
            var count = (int)(value.Length / 1);
            fixed (uint* value_ptr = value) // SpanOrArrayLayer
            {
                glInstance.Uniform1uivEXT(location, count, value_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void Uniform1uivEXT(this GL.EXTExtension glInstance, int location, int count, in uint value)
        {
            fixed (uint* value_ptr = &value) // RefInsteadOfPointerLayer
            {
                glInstance.Uniform1uivEXT(location, count, value_ptr);
            }
        }

        // Uniform2uivEXT overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void Uniform2uivEXT(this GL.EXTExtension glInstance, int location, ReadOnlySpan<uint> value)
        {
            var count = (int)(value.Length / 2);
            fixed (uint* value_ptr = value) // SpanOrArrayLayer
            {
                glInstance.Uniform2uivEXT(location, count, value_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void Uniform2uivEXT(this GL.EXTExtension glInstance, int location, uint[] value)
        {
            var count = (int)(value.Length / 2);
            fixed (uint* value_ptr = value) // SpanOrArrayLayer
            {
                glInstance.Uniform2uivEXT(location, count, value_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void Uniform2uivEXT(this GL.EXTExtension glInstance, int location, int count, in uint value)
        {
            fixed (uint* value_ptr = &value) // RefInsteadOfPointerLayer
            {
                glInstance.Uniform2uivEXT(location, count, value_ptr);
            }
        }

        // Uniform3uivEXT overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void Uniform3uivEXT(this GL.EXTExtension glInstance, int location, ReadOnlySpan<uint> value)
        {
            var count = (int)(value.Length / 3);
            fixed (uint* value_ptr = value) // SpanOrArrayLayer
            {
                glInstance.Uniform3uivEXT(location, count, value_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void Uniform3uivEXT(this GL.EXTExtension glInstance, int location, uint[] value)
        {
            var count = (int)(value.Length / 3);
            fixed (uint* value_ptr = value) // SpanOrArrayLayer
            {
                glInstance.Uniform3uivEXT(location, count, value_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void Uniform3uivEXT(this GL.EXTExtension glInstance, int location, int count, in uint value)
        {
            fixed (uint* value_ptr = &value) // RefInsteadOfPointerLayer
            {
                glInstance.Uniform3uivEXT(location, count, value_ptr);
            }
        }

        // Uniform4uivEXT overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void Uniform4uivEXT(this GL.EXTExtension glInstance, int location, ReadOnlySpan<uint> value)
        {
            var count = (int)(value.Length / 4);
            fixed (uint* value_ptr = value) // SpanOrArrayLayer
            {
                glInstance.Uniform4uivEXT(location, count, value_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void Uniform4uivEXT(this GL.EXTExtension glInstance, int location, uint[] value)
        {
            var count = (int)(value.Length / 4);
            fixed (uint* value_ptr = value) // SpanOrArrayLayer
            {
                glInstance.Uniform4uivEXT(location, count, value_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void Uniform4uivEXT(this GL.EXTExtension glInstance, int location, int count, in uint value)
        {
            fixed (uint* value_ptr = &value) // RefInsteadOfPointerLayer
            {
                glInstance.Uniform4uivEXT(location, count, value_ptr);
            }
        }

        // VertexAttribI1ivEXT overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void VertexAttribI1ivEXT(this GL.EXTExtension glInstance, uint index, ReadOnlySpan<int> v)
        {
            fixed (int* v_ptr = v) // SpanOrArrayLayer
            {
                glInstance.VertexAttribI1ivEXT(index, v_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void VertexAttribI1ivEXT(this GL.EXTExtension glInstance, uint index, int[] v)
        {
            fixed (int* v_ptr = v) // SpanOrArrayLayer
            {
                glInstance.VertexAttribI1ivEXT(index, v_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void VertexAttribI1ivEXT(this GL.EXTExtension glInstance, uint index, in int v)
        {
            fixed (int* v_ptr = &v) // RefInsteadOfPointerLayer
            {
                glInstance.VertexAttribI1ivEXT(index, v_ptr);
            }
        }

        // VertexAttribI2ivEXT overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void VertexAttribI2ivEXT(this GL.EXTExtension glInstance, uint index, ReadOnlySpan<int> v)
        {
            fixed (int* v_ptr = v) // SpanOrArrayLayer
            {
                glInstance.VertexAttribI2ivEXT(index, v_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void VertexAttribI2ivEXT(this GL.EXTExtension glInstance, uint index, int[] v)
        {
            fixed (int* v_ptr = v) // SpanOrArrayLayer
            {
                glInstance.VertexAttribI2ivEXT(index, v_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void VertexAttribI2ivEXT(this GL.EXTExtension glInstance, uint index, in int v)
        {
            fixed (int* v_ptr = &v) // RefInsteadOfPointerLayer
            {
                glInstance.VertexAttribI2ivEXT(index, v_ptr);
            }
        }

        // VertexAttribI3ivEXT overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void VertexAttribI3ivEXT(this GL.EXTExtension glInstance, uint index, ReadOnlySpan<int> v)
        {
            fixed (int* v_ptr = v) // SpanOrArrayLayer
            {
                glInstance.VertexAttribI3ivEXT(index, v_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void VertexAttribI3ivEXT(this GL.EXTExtension glInstance, uint index, int[] v)
        {
            fixed (int* v_ptr = v) // SpanOrArrayLayer
            {
                glInstance.VertexAttribI3ivEXT(index, v_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void VertexAttribI3ivEXT(this GL.EXTExtension glInstance, uint index, in int v)
        {
            fixed (int* v_ptr = &v) // RefInsteadOfPointerLayer
            {
                glInstance.VertexAttribI3ivEXT(index, v_ptr);
            }
        }

        // VertexAttribI4ivEXT overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void VertexAttribI4ivEXT(this GL.EXTExtension glInstance, uint index, ReadOnlySpan<int> v)
        {
            fixed (int* v_ptr = v) // SpanOrArrayLayer
            {
                glInstance.VertexAttribI4ivEXT(index, v_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void VertexAttribI4ivEXT(this GL.EXTExtension glInstance, uint index, int[] v)
        {
            fixed (int* v_ptr = v) // SpanOrArrayLayer
            {
                glInstance.VertexAttribI4ivEXT(index, v_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void VertexAttribI4ivEXT(this GL.EXTExtension glInstance, uint index, in int v)
        {
            fixed (int* v_ptr = &v) // RefInsteadOfPointerLayer
            {
                glInstance.VertexAttribI4ivEXT(index, v_ptr);
            }
        }

        // VertexAttribI1uivEXT overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void VertexAttribI1uivEXT(this GL.EXTExtension glInstance, uint index, ReadOnlySpan<uint> v)
        {
            fixed (uint* v_ptr = v) // SpanOrArrayLayer
            {
                glInstance.VertexAttribI1uivEXT(index, v_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void VertexAttribI1uivEXT(this GL.EXTExtension glInstance, uint index, uint[] v)
        {
            fixed (uint* v_ptr = v) // SpanOrArrayLayer
            {
                glInstance.VertexAttribI1uivEXT(index, v_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void VertexAttribI1uivEXT(this GL.EXTExtension glInstance, uint index, in uint v)
        {
            fixed (uint* v_ptr = &v) // RefInsteadOfPointerLayer
            {
                glInstance.VertexAttribI1uivEXT(index, v_ptr);
            }
        }

        // VertexAttribI2uivEXT overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void VertexAttribI2uivEXT(this GL.EXTExtension glInstance, uint index, ReadOnlySpan<uint> v)
        {
            fixed (uint* v_ptr = v) // SpanOrArrayLayer
            {
                glInstance.VertexAttribI2uivEXT(index, v_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void VertexAttribI2uivEXT(this GL.EXTExtension glInstance, uint index, uint[] v)
        {
            fixed (uint* v_ptr = v) // SpanOrArrayLayer
            {
                glInstance.VertexAttribI2uivEXT(index, v_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void VertexAttribI2uivEXT(this GL.EXTExtension glInstance, uint index, in uint v)
        {
            fixed (uint* v_ptr = &v) // RefInsteadOfPointerLayer
            {
                glInstance.VertexAttribI2uivEXT(index, v_ptr);
            }
        }

        // VertexAttribI3uivEXT overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void VertexAttribI3uivEXT(this GL.EXTExtension glInstance, uint index, ReadOnlySpan<uint> v)
        {
            fixed (uint* v_ptr = v) // SpanOrArrayLayer
            {
                glInstance.VertexAttribI3uivEXT(index, v_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void VertexAttribI3uivEXT(this GL.EXTExtension glInstance, uint index, uint[] v)
        {
            fixed (uint* v_ptr = v) // SpanOrArrayLayer
            {
                glInstance.VertexAttribI3uivEXT(index, v_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void VertexAttribI3uivEXT(this GL.EXTExtension glInstance, uint index, in uint v)
        {
            fixed (uint* v_ptr = &v) // RefInsteadOfPointerLayer
            {
                glInstance.VertexAttribI3uivEXT(index, v_ptr);
            }
        }

        // VertexAttribI4uivEXT overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void VertexAttribI4uivEXT(this GL.EXTExtension glInstance, uint index, ReadOnlySpan<uint> v)
        {
            fixed (uint* v_ptr = v) // SpanOrArrayLayer
            {
                glInstance.VertexAttribI4uivEXT(index, v_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void VertexAttribI4uivEXT(this GL.EXTExtension glInstance, uint index, uint[] v)
        {
            fixed (uint* v_ptr = v) // SpanOrArrayLayer
            {
                glInstance.VertexAttribI4uivEXT(index, v_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void VertexAttribI4uivEXT(this GL.EXTExtension glInstance, uint index, in uint v)
        {
            fixed (uint* v_ptr = &v) // RefInsteadOfPointerLayer
            {
                glInstance.VertexAttribI4uivEXT(index, v_ptr);
            }
        }

        // VertexAttribI4bvEXT overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void VertexAttribI4bvEXT(this GL.EXTExtension glInstance, uint index, ReadOnlySpan<sbyte> v)
        {
            fixed (sbyte* v_ptr = v) // SpanOrArrayLayer
            {
                glInstance.VertexAttribI4bvEXT(index, v_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void VertexAttribI4bvEXT(this GL.EXTExtension glInstance, uint index, sbyte[] v)
        {
            fixed (sbyte* v_ptr = v) // SpanOrArrayLayer
            {
                glInstance.VertexAttribI4bvEXT(index, v_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void VertexAttribI4bvEXT(this GL.EXTExtension glInstance, uint index, in sbyte v)
        {
            fixed (sbyte* v_ptr = &v) // RefInsteadOfPointerLayer
            {
                glInstance.VertexAttribI4bvEXT(index, v_ptr);
            }
        }

        // VertexAttribI4svEXT overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void VertexAttribI4svEXT(this GL.EXTExtension glInstance, uint index, ReadOnlySpan<short> v)
        {
            fixed (short* v_ptr = v) // SpanOrArrayLayer
            {
                glInstance.VertexAttribI4svEXT(index, v_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void VertexAttribI4svEXT(this GL.EXTExtension glInstance, uint index, short[] v)
        {
            fixed (short* v_ptr = v) // SpanOrArrayLayer
            {
                glInstance.VertexAttribI4svEXT(index, v_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void VertexAttribI4svEXT(this GL.EXTExtension glInstance, uint index, in short v)
        {
            fixed (short* v_ptr = &v) // RefInsteadOfPointerLayer
            {
                glInstance.VertexAttribI4svEXT(index, v_ptr);
            }
        }

        // VertexAttribI4ubvEXT overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void VertexAttribI4ubvEXT(this GL.EXTExtension glInstance, uint index, ReadOnlySpan<byte> v)
        {
            fixed (byte* v_ptr = v) // SpanOrArrayLayer
            {
                glInstance.VertexAttribI4ubvEXT(index, v_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void VertexAttribI4ubvEXT(this GL.EXTExtension glInstance, uint index, byte[] v)
        {
            fixed (byte* v_ptr = v) // SpanOrArrayLayer
            {
                glInstance.VertexAttribI4ubvEXT(index, v_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void VertexAttribI4ubvEXT(this GL.EXTExtension glInstance, uint index, in byte v)
        {
            fixed (byte* v_ptr = &v) // RefInsteadOfPointerLayer
            {
                glInstance.VertexAttribI4ubvEXT(index, v_ptr);
            }
        }

        // VertexAttribI4usvEXT overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void VertexAttribI4usvEXT(this GL.EXTExtension glInstance, uint index, ReadOnlySpan<ushort> v)
        {
            fixed (ushort* v_ptr = v) // SpanOrArrayLayer
            {
                glInstance.VertexAttribI4usvEXT(index, v_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void VertexAttribI4usvEXT(this GL.EXTExtension glInstance, uint index, ushort[] v)
        {
            fixed (ushort* v_ptr = v) // SpanOrArrayLayer
            {
                glInstance.VertexAttribI4usvEXT(index, v_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void VertexAttribI4usvEXT(this GL.EXTExtension glInstance, uint index, in ushort v)
        {
            fixed (ushort* v_ptr = &v) // RefInsteadOfPointerLayer
            {
                glInstance.VertexAttribI4usvEXT(index, v_ptr);
            }
        }

        // VertexAttribIPointerEXT overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.VoidPtrToIntPtrOverloader
        public static unsafe void VertexAttribIPointerEXT(this GL.EXTExtension glInstance, uint index, int size, VertexAttribIType type, int stride, IntPtr pointer)
        {
            var pointer_vptr = (void*)pointer;
            glInstance.VertexAttribIPointerEXT(index, size, type, stride, pointer_vptr);
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void VertexAttribIPointerEXT<T1>(this GL.EXTExtension glInstance, uint index, int size, VertexAttribIType type, int stride, ReadOnlySpan<T1> pointer)
            where T1 : unmanaged
        {
            fixed (void* pointer_ptr = pointer) // SpanOrArrayLayer
            {
                glInstance.VertexAttribIPointerEXT(index, size, type, stride, pointer_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void VertexAttribIPointerEXT<T1>(this GL.EXTExtension glInstance, uint index, int size, VertexAttribIType type, int stride, T1[] pointer)
            where T1 : unmanaged
        {
            fixed (void* pointer_ptr = pointer) // SpanOrArrayLayer
            {
                glInstance.VertexAttribIPointerEXT(index, size, type, stride, pointer_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void VertexAttribIPointerEXT<T1>(this GL.EXTExtension glInstance, uint index, int size, VertexAttribIType type, int stride, in T1 pointer)
            where T1 : unmanaged
        {
            fixed (void* pointer_ptr = &pointer) // RefInsteadOfPointerLayer
            {
                glInstance.VertexAttribIPointerEXT(index, size, type, stride, pointer_ptr);
            }
        }

        // GetVertexAttribIivEXT overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetVertexAttribIivEXT(this GL.EXTExtension glInstance, uint index, VertexAttribEnum pname, Span<int> parameters)
        {
            fixed (int* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.GetVertexAttribIivEXT(index, pname, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetVertexAttribIivEXT(this GL.EXTExtension glInstance, uint index, VertexAttribEnum pname, int[] parameters)
        {
            fixed (int* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.GetVertexAttribIivEXT(index, pname, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void GetVertexAttribIivEXT(this GL.EXTExtension glInstance, uint index, VertexAttribEnum pname, ref int parameters)
        {
            fixed (int* parameters_ptr = &parameters) // RefInsteadOfPointerLayer
            {
                glInstance.GetVertexAttribIivEXT(index, pname, parameters_ptr);
            }
        }

        // GetVertexAttribIuivEXT overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetVertexAttribIuivEXT(this GL.EXTExtension glInstance, uint index, VertexAttribEnum pname, Span<uint> parameters)
        {
            fixed (uint* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.GetVertexAttribIuivEXT(index, pname, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetVertexAttribIuivEXT(this GL.EXTExtension glInstance, uint index, VertexAttribEnum pname, uint[] parameters)
        {
            fixed (uint* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.GetVertexAttribIuivEXT(index, pname, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void GetVertexAttribIuivEXT(this GL.EXTExtension glInstance, uint index, VertexAttribEnum pname, ref uint parameters)
        {
            fixed (uint* parameters_ptr = &parameters) // RefInsteadOfPointerLayer
            {
                glInstance.GetVertexAttribIuivEXT(index, pname, parameters_ptr);
            }
        }

        // GetHistogramEXT overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.VoidPtrToIntPtrOverloader
        public static unsafe void GetHistogramEXT(this GL.EXTExtension glInstance, HistogramTargetEXT target, bool reset, PixelFormat format, PixelType type, IntPtr values)
        {
            var values_vptr = (void*)values;
            var reset_byte = (byte)(reset ? 1 : 0);
            glInstance.GetHistogramEXT(target, reset_byte, format, type, values_vptr);
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetHistogramEXT<T1>(this GL.EXTExtension glInstance, HistogramTargetEXT target, bool reset, PixelFormat format, PixelType type, Span<T1> values)
            where T1 : unmanaged
        {
            fixed (void* values_ptr = values) // SpanOrArrayLayer
            {
                var reset_byte = (byte)(reset ? 1 : 0);
                glInstance.GetHistogramEXT(target, reset_byte, format, type, values_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetHistogramEXT<T1>(this GL.EXTExtension glInstance, HistogramTargetEXT target, bool reset, PixelFormat format, PixelType type, T1[] values)
            where T1 : unmanaged
        {
            fixed (void* values_ptr = values) // SpanOrArrayLayer
            {
                var reset_byte = (byte)(reset ? 1 : 0);
                glInstance.GetHistogramEXT(target, reset_byte, format, type, values_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void GetHistogramEXT<T1>(this GL.EXTExtension glInstance, HistogramTargetEXT target, bool reset, PixelFormat format, PixelType type, ref T1 values)
            where T1 : unmanaged
        {
            fixed (void* values_ptr = &values) // RefInsteadOfPointerLayer
            {
                var reset_byte = (byte)(reset ? 1 : 0);
                glInstance.GetHistogramEXT(target, reset_byte, format, type, values_ptr);
            }
        }

        // GetHistogramParameterfvEXT overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetHistogramParameterfvEXT(this GL.EXTExtension glInstance, HistogramTargetEXT target, GetHistogramParameterPNameEXT pname, Span<float> parameters)
        {
            fixed (float* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.GetHistogramParameterfvEXT(target, pname, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetHistogramParameterfvEXT(this GL.EXTExtension glInstance, HistogramTargetEXT target, GetHistogramParameterPNameEXT pname, float[] parameters)
        {
            fixed (float* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.GetHistogramParameterfvEXT(target, pname, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void GetHistogramParameterfvEXT(this GL.EXTExtension glInstance, HistogramTargetEXT target, GetHistogramParameterPNameEXT pname, ref float parameters)
        {
            fixed (float* parameters_ptr = &parameters) // RefInsteadOfPointerLayer
            {
                glInstance.GetHistogramParameterfvEXT(target, pname, parameters_ptr);
            }
        }

        // GetHistogramParameterivEXT overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetHistogramParameterivEXT(this GL.EXTExtension glInstance, HistogramTargetEXT target, GetHistogramParameterPNameEXT pname, Span<int> parameters)
        {
            fixed (int* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.GetHistogramParameterivEXT(target, pname, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetHistogramParameterivEXT(this GL.EXTExtension glInstance, HistogramTargetEXT target, GetHistogramParameterPNameEXT pname, int[] parameters)
        {
            fixed (int* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.GetHistogramParameterivEXT(target, pname, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void GetHistogramParameterivEXT(this GL.EXTExtension glInstance, HistogramTargetEXT target, GetHistogramParameterPNameEXT pname, ref int parameters)
        {
            fixed (int* parameters_ptr = &parameters) // RefInsteadOfPointerLayer
            {
                glInstance.GetHistogramParameterivEXT(target, pname, parameters_ptr);
            }
        }

        // GetMinmaxEXT overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.VoidPtrToIntPtrOverloader
        public static unsafe void GetMinmaxEXT(this GL.EXTExtension glInstance, MinmaxTargetEXT target, bool reset, PixelFormat format, PixelType type, IntPtr values)
        {
            var values_vptr = (void*)values;
            var reset_byte = (byte)(reset ? 1 : 0);
            glInstance.GetMinmaxEXT(target, reset_byte, format, type, values_vptr);
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetMinmaxEXT<T1>(this GL.EXTExtension glInstance, MinmaxTargetEXT target, bool reset, PixelFormat format, PixelType type, Span<T1> values)
            where T1 : unmanaged
        {
            fixed (void* values_ptr = values) // SpanOrArrayLayer
            {
                var reset_byte = (byte)(reset ? 1 : 0);
                glInstance.GetMinmaxEXT(target, reset_byte, format, type, values_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetMinmaxEXT<T1>(this GL.EXTExtension glInstance, MinmaxTargetEXT target, bool reset, PixelFormat format, PixelType type, T1[] values)
            where T1 : unmanaged
        {
            fixed (void* values_ptr = values) // SpanOrArrayLayer
            {
                var reset_byte = (byte)(reset ? 1 : 0);
                glInstance.GetMinmaxEXT(target, reset_byte, format, type, values_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void GetMinmaxEXT<T1>(this GL.EXTExtension glInstance, MinmaxTargetEXT target, bool reset, PixelFormat format, PixelType type, ref T1 values)
            where T1 : unmanaged
        {
            fixed (void* values_ptr = &values) // RefInsteadOfPointerLayer
            {
                var reset_byte = (byte)(reset ? 1 : 0);
                glInstance.GetMinmaxEXT(target, reset_byte, format, type, values_ptr);
            }
        }

        // GetMinmaxParameterfvEXT overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetMinmaxParameterfvEXT(this GL.EXTExtension glInstance, MinmaxTargetEXT target, GetMinmaxParameterPNameEXT pname, Span<float> parameters)
        {
            fixed (float* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.GetMinmaxParameterfvEXT(target, pname, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetMinmaxParameterfvEXT(this GL.EXTExtension glInstance, MinmaxTargetEXT target, GetMinmaxParameterPNameEXT pname, float[] parameters)
        {
            fixed (float* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.GetMinmaxParameterfvEXT(target, pname, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void GetMinmaxParameterfvEXT(this GL.EXTExtension glInstance, MinmaxTargetEXT target, GetMinmaxParameterPNameEXT pname, ref float parameters)
        {
            fixed (float* parameters_ptr = &parameters) // RefInsteadOfPointerLayer
            {
                glInstance.GetMinmaxParameterfvEXT(target, pname, parameters_ptr);
            }
        }

        // GetMinmaxParameterivEXT overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetMinmaxParameterivEXT(this GL.EXTExtension glInstance, MinmaxTargetEXT target, GetMinmaxParameterPNameEXT pname, Span<int> parameters)
        {
            fixed (int* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.GetMinmaxParameterivEXT(target, pname, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetMinmaxParameterivEXT(this GL.EXTExtension glInstance, MinmaxTargetEXT target, GetMinmaxParameterPNameEXT pname, int[] parameters)
        {
            fixed (int* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.GetMinmaxParameterivEXT(target, pname, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void GetMinmaxParameterivEXT(this GL.EXTExtension glInstance, MinmaxTargetEXT target, GetMinmaxParameterPNameEXT pname, ref int parameters)
        {
            fixed (int* parameters_ptr = &parameters) // RefInsteadOfPointerLayer
            {
                glInstance.GetMinmaxParameterivEXT(target, pname, parameters_ptr);
            }
        }

        // HistogramEXT overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.BoolOverloader
        public static unsafe void HistogramEXT(this GL.EXTExtension glInstance, HistogramTargetEXT target, int width, InternalFormat internalformat, bool sink)
        {
            var sink_byte = (byte)(sink ? 1 : 0);
            glInstance.HistogramEXT(target, width, internalformat, sink_byte);
        }

        // MinmaxEXT overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.BoolOverloader
        public static unsafe void MinmaxEXT(this GL.EXTExtension glInstance, MinmaxTargetEXT target, InternalFormat internalformat, bool sink)
        {
            var sink_byte = (byte)(sink ? 1 : 0);
            glInstance.MinmaxEXT(target, internalformat, sink_byte);
        }

        // GetUnsignedBytevEXT overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetUnsignedBytevEXT(this GL.EXTExtension glInstance, GetPName pname, Span<byte> data)
        {
            fixed (byte* data_ptr = data) // SpanOrArrayLayer
            {
                glInstance.GetUnsignedBytevEXT(pname, data_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetUnsignedBytevEXT(this GL.EXTExtension glInstance, GetPName pname, byte[] data)
        {
            fixed (byte* data_ptr = data) // SpanOrArrayLayer
            {
                glInstance.GetUnsignedBytevEXT(pname, data_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void GetUnsignedBytevEXT(this GL.EXTExtension glInstance, GetPName pname, ref byte data)
        {
            fixed (byte* data_ptr = &data) // RefInsteadOfPointerLayer
            {
                glInstance.GetUnsignedBytevEXT(pname, data_ptr);
            }
        }

        // GetUnsignedBytei_vEXT overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetUnsignedBytei_vEXT(this GL.EXTExtension glInstance, GLEnum target, uint index, Span<byte> data)
        {
            fixed (byte* data_ptr = data) // SpanOrArrayLayer
            {
                glInstance.GetUnsignedBytei_vEXT(target, index, data_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetUnsignedBytei_vEXT(this GL.EXTExtension glInstance, GLEnum target, uint index, byte[] data)
        {
            fixed (byte* data_ptr = data) // SpanOrArrayLayer
            {
                glInstance.GetUnsignedBytei_vEXT(target, index, data_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void GetUnsignedBytei_vEXT(this GL.EXTExtension glInstance, GLEnum target, uint index, ref byte data)
        {
            fixed (byte* data_ptr = &data) // RefInsteadOfPointerLayer
            {
                glInstance.GetUnsignedBytei_vEXT(target, index, data_ptr);
            }
        }

        // DeleteMemoryObjectsEXT overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void DeleteMemoryObjectsEXT(this GL.EXTExtension glInstance, ReadOnlySpan<uint> memoryObjects)
        {
            var n = (int)(memoryObjects.Length);
            fixed (uint* memoryObjects_ptr = memoryObjects) // SpanOrArrayLayer
            {
                glInstance.DeleteMemoryObjectsEXT(n, memoryObjects_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void DeleteMemoryObjectsEXT(this GL.EXTExtension glInstance, uint[] memoryObjects)
        {
            var n = (int)(memoryObjects.Length);
            fixed (uint* memoryObjects_ptr = memoryObjects) // SpanOrArrayLayer
            {
                glInstance.DeleteMemoryObjectsEXT(n, memoryObjects_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void DeleteMemoryObjectsEXT(this GL.EXTExtension glInstance, int n, in uint memoryObjects)
        {
            fixed (uint* memoryObjects_ptr = &memoryObjects) // RefInsteadOfPointerLayer
            {
                glInstance.DeleteMemoryObjectsEXT(n, memoryObjects_ptr);
            }
        }

        // CreateMemoryObjectsEXT overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void CreateMemoryObjectsEXT(this GL.EXTExtension glInstance, int n, ref uint memoryObjects)
        {
            fixed (uint* memoryObjects_ptr = &memoryObjects) // RefInsteadOfPointerLayer
            {
                glInstance.CreateMemoryObjectsEXT(n, memoryObjects_ptr);
            }
        }

        // MemoryObjectParameterivEXT overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void MemoryObjectParameterivEXT(this GL.EXTExtension glInstance, uint memoryObject, MemoryObjectParameterName pname, in int parameters)
        {
            fixed (int* parameters_ptr = &parameters) // RefInsteadOfPointerLayer
            {
                glInstance.MemoryObjectParameterivEXT(memoryObject, pname, parameters_ptr);
            }
        }

        // GetMemoryObjectParameterivEXT overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void GetMemoryObjectParameterivEXT(this GL.EXTExtension glInstance, uint memoryObject, MemoryObjectParameterName pname, ref int parameters)
        {
            fixed (int* parameters_ptr = &parameters) // RefInsteadOfPointerLayer
            {
                glInstance.GetMemoryObjectParameterivEXT(memoryObject, pname, parameters_ptr);
            }
        }

        // TexStorageMem2DMultisampleEXT overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.BoolOverloader
        public static unsafe void TexStorageMem2DMultisampleEXT(this GL.EXTExtension glInstance, TextureTarget target, int samples, SizedInternalFormat internalFormat, int width, int height, bool fixedSampleLocations, uint memory, ulong offset)
        {
            var fixedSampleLocations_byte = (byte)(fixedSampleLocations ? 1 : 0);
            glInstance.TexStorageMem2DMultisampleEXT(target, samples, internalFormat, width, height, fixedSampleLocations_byte, memory, offset);
        }

        // TexStorageMem3DMultisampleEXT overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.BoolOverloader
        public static unsafe void TexStorageMem3DMultisampleEXT(this GL.EXTExtension glInstance, TextureTarget target, int samples, SizedInternalFormat internalFormat, int width, int height, int depth, bool fixedSampleLocations, uint memory, ulong offset)
        {
            var fixedSampleLocations_byte = (byte)(fixedSampleLocations ? 1 : 0);
            glInstance.TexStorageMem3DMultisampleEXT(target, samples, internalFormat, width, height, depth, fixedSampleLocations_byte, memory, offset);
        }

        // TextureStorageMem2DMultisampleEXT overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.BoolOverloader
        public static unsafe void TextureStorageMem2DMultisampleEXT(this GL.EXTExtension glInstance, TextureHandle texture, int samples, SizedInternalFormat internalFormat, int width, int height, bool fixedSampleLocations, uint memory, ulong offset)
        {
            var fixedSampleLocations_byte = (byte)(fixedSampleLocations ? 1 : 0);
            glInstance.TextureStorageMem2DMultisampleEXT(texture, samples, internalFormat, width, height, fixedSampleLocations_byte, memory, offset);
        }

        // TextureStorageMem3DMultisampleEXT overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.BoolOverloader
        public static unsafe void TextureStorageMem3DMultisampleEXT(this GL.EXTExtension glInstance, TextureHandle texture, int samples, SizedInternalFormat internalFormat, int width, int height, int depth, bool fixedSampleLocations, uint memory, ulong offset)
        {
            var fixedSampleLocations_byte = (byte)(fixedSampleLocations ? 1 : 0);
            glInstance.TextureStorageMem3DMultisampleEXT(texture, samples, internalFormat, width, height, depth, fixedSampleLocations_byte, memory, offset);
        }

        // ImportMemoryWin32HandleEXT overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.VoidPtrToIntPtrOverloader
        public static unsafe void ImportMemoryWin32HandleEXT(this GL.EXTExtension glInstance, uint memory, ulong size, ExternalHandleType handleType, IntPtr handle)
        {
            var handle_vptr = (void*)handle;
            glInstance.ImportMemoryWin32HandleEXT(memory, size, handleType, handle_vptr);
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void ImportMemoryWin32HandleEXT<T1>(this GL.EXTExtension glInstance, uint memory, ulong size, ExternalHandleType handleType, ref T1 handle)
            where T1 : unmanaged
        {
            fixed (void* handle_ptr = &handle) // RefInsteadOfPointerLayer
            {
                glInstance.ImportMemoryWin32HandleEXT(memory, size, handleType, handle_ptr);
            }
        }

        // ImportMemoryWin32NameEXT overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.VoidPtrToIntPtrOverloader
        public static unsafe void ImportMemoryWin32NameEXT(this GL.EXTExtension glInstance, uint memory, ulong size, ExternalHandleType handleType, IntPtr name)
        {
            var name_vptr = (void*)name;
            glInstance.ImportMemoryWin32NameEXT(memory, size, handleType, name_vptr);
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void ImportMemoryWin32NameEXT<T1>(this GL.EXTExtension glInstance, uint memory, ulong size, ExternalHandleType handleType, in T1 name)
            where T1 : unmanaged
        {
            fixed (void* name_ptr = &name) // RefInsteadOfPointerLayer
            {
                glInstance.ImportMemoryWin32NameEXT(memory, size, handleType, name_ptr);
            }
        }

        // MultiDrawArraysEXT overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void MultiDrawArraysEXT(this GL.EXTExtension glInstance, PrimitiveType mode, ReadOnlySpan<int> first, ReadOnlySpan<int> count, int primcount)
        {
            fixed (int* first_ptr = first) // SpanOrArrayLayer
            {
                fixed (int* count_ptr = count) // SpanOrArrayLayer
                {
                    glInstance.MultiDrawArraysEXT(mode, first_ptr, count_ptr, primcount);
                }
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void MultiDrawArraysEXT(this GL.EXTExtension glInstance, PrimitiveType mode, int[] first, int[] count, int primcount)
        {
            fixed (int* first_ptr = first) // SpanOrArrayLayer
            {
                fixed (int* count_ptr = count) // SpanOrArrayLayer
                {
                    glInstance.MultiDrawArraysEXT(mode, first_ptr, count_ptr, primcount);
                }
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void MultiDrawArraysEXT(this GL.EXTExtension glInstance, PrimitiveType mode, in int first, in int count, int primcount)
        {
            fixed (int* first_ptr = &first) // RefInsteadOfPointerLayer
            fixed (int* count_ptr = &count) // RefInsteadOfPointerLayer
            {
                glInstance.MultiDrawArraysEXT(mode, first_ptr, count_ptr, primcount);
            }
        }

        // MultiDrawElementsEXT overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void MultiDrawElementsEXT(this GL.EXTExtension glInstance, PrimitiveType mode, ReadOnlySpan<int> count, DrawElementsType type, void** indices, int primcount)
        {
            fixed (int* count_ptr = count) // SpanOrArrayLayer
            {
                glInstance.MultiDrawElementsEXT(mode, count_ptr, type, indices, primcount);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void MultiDrawElementsEXT(this GL.EXTExtension glInstance, PrimitiveType mode, int[] count, DrawElementsType type, void** indices, int primcount)
        {
            fixed (int* count_ptr = count) // SpanOrArrayLayer
            {
                glInstance.MultiDrawElementsEXT(mode, count_ptr, type, indices, primcount);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void MultiDrawElementsEXT(this GL.EXTExtension glInstance, PrimitiveType mode, in int count, DrawElementsType type, void** indices, int primcount)
        {
            fixed (int* count_ptr = &count) // RefInsteadOfPointerLayer
            {
                glInstance.MultiDrawElementsEXT(mode, count_ptr, type, indices, primcount);
            }
        }

        // SampleMaskEXT overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.BoolOverloader
        public static unsafe void SampleMaskEXT(this GL.EXTExtension glInstance, float value, bool invert)
        {
            var invert_byte = (byte)(invert ? 1 : 0);
            glInstance.SampleMaskEXT(value, invert_byte);
        }

        // ColorTableEXT overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.VoidPtrToIntPtrOverloader
        public static unsafe void ColorTableEXT(this GL.EXTExtension glInstance, ColorTableTarget target, InternalFormat internalFormat, int width, PixelFormat format, PixelType type, IntPtr table)
        {
            var table_vptr = (void*)table;
            glInstance.ColorTableEXT(target, internalFormat, width, format, type, table_vptr);
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void ColorTableEXT<T1>(this GL.EXTExtension glInstance, ColorTableTarget target, InternalFormat internalFormat, int width, PixelFormat format, PixelType type, ReadOnlySpan<T1> table)
            where T1 : unmanaged
        {
            fixed (void* table_ptr = table) // SpanOrArrayLayer
            {
                glInstance.ColorTableEXT(target, internalFormat, width, format, type, table_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void ColorTableEXT<T1>(this GL.EXTExtension glInstance, ColorTableTarget target, InternalFormat internalFormat, int width, PixelFormat format, PixelType type, T1[] table)
            where T1 : unmanaged
        {
            fixed (void* table_ptr = table) // SpanOrArrayLayer
            {
                glInstance.ColorTableEXT(target, internalFormat, width, format, type, table_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void ColorTableEXT<T1>(this GL.EXTExtension glInstance, ColorTableTarget target, InternalFormat internalFormat, int width, PixelFormat format, PixelType type, in T1 table)
            where T1 : unmanaged
        {
            fixed (void* table_ptr = &table) // RefInsteadOfPointerLayer
            {
                glInstance.ColorTableEXT(target, internalFormat, width, format, type, table_ptr);
            }
        }

        // GetColorTableEXT overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.VoidPtrToIntPtrOverloader
        public static unsafe void GetColorTableEXT(this GL.EXTExtension glInstance, ColorTableTarget target, PixelFormat format, PixelType type, IntPtr data)
        {
            var data_vptr = (void*)data;
            glInstance.GetColorTableEXT(target, format, type, data_vptr);
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetColorTableEXT<T1>(this GL.EXTExtension glInstance, ColorTableTarget target, PixelFormat format, PixelType type, Span<T1> data)
            where T1 : unmanaged
        {
            fixed (void* data_ptr = data) // SpanOrArrayLayer
            {
                glInstance.GetColorTableEXT(target, format, type, data_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetColorTableEXT<T1>(this GL.EXTExtension glInstance, ColorTableTarget target, PixelFormat format, PixelType type, T1[] data)
            where T1 : unmanaged
        {
            fixed (void* data_ptr = data) // SpanOrArrayLayer
            {
                glInstance.GetColorTableEXT(target, format, type, data_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void GetColorTableEXT<T1>(this GL.EXTExtension glInstance, ColorTableTarget target, PixelFormat format, PixelType type, ref T1 data)
            where T1 : unmanaged
        {
            fixed (void* data_ptr = &data) // RefInsteadOfPointerLayer
            {
                glInstance.GetColorTableEXT(target, format, type, data_ptr);
            }
        }

        // GetColorTableParameterivEXT overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetColorTableParameterivEXT(this GL.EXTExtension glInstance, ColorTableTarget target, GetColorTableParameterPNameSGI pname, Span<int> parameters)
        {
            fixed (int* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.GetColorTableParameterivEXT(target, pname, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetColorTableParameterivEXT(this GL.EXTExtension glInstance, ColorTableTarget target, GetColorTableParameterPNameSGI pname, int[] parameters)
        {
            fixed (int* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.GetColorTableParameterivEXT(target, pname, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void GetColorTableParameterivEXT(this GL.EXTExtension glInstance, ColorTableTarget target, GetColorTableParameterPNameSGI pname, ref int parameters)
        {
            fixed (int* parameters_ptr = &parameters) // RefInsteadOfPointerLayer
            {
                glInstance.GetColorTableParameterivEXT(target, pname, parameters_ptr);
            }
        }

        // GetColorTableParameterfvEXT overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetColorTableParameterfvEXT(this GL.EXTExtension glInstance, ColorTableTarget target, GetColorTableParameterPNameSGI pname, Span<float> parameters)
        {
            fixed (float* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.GetColorTableParameterfvEXT(target, pname, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetColorTableParameterfvEXT(this GL.EXTExtension glInstance, ColorTableTarget target, GetColorTableParameterPNameSGI pname, float[] parameters)
        {
            fixed (float* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.GetColorTableParameterfvEXT(target, pname, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void GetColorTableParameterfvEXT(this GL.EXTExtension glInstance, ColorTableTarget target, GetColorTableParameterPNameSGI pname, ref float parameters)
        {
            fixed (float* parameters_ptr = &parameters) // RefInsteadOfPointerLayer
            {
                glInstance.GetColorTableParameterfvEXT(target, pname, parameters_ptr);
            }
        }

        // PixelTransformParameterivEXT overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void PixelTransformParameterivEXT(this GL.EXTExtension glInstance, PixelTransformTargetEXT target, PixelTransformPNameEXT pname, ReadOnlySpan<int> parameters)
        {
            fixed (int* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.PixelTransformParameterivEXT(target, pname, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void PixelTransformParameterivEXT(this GL.EXTExtension glInstance, PixelTransformTargetEXT target, PixelTransformPNameEXT pname, int[] parameters)
        {
            fixed (int* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.PixelTransformParameterivEXT(target, pname, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void PixelTransformParameterivEXT(this GL.EXTExtension glInstance, PixelTransformTargetEXT target, PixelTransformPNameEXT pname, in int parameters)
        {
            fixed (int* parameters_ptr = &parameters) // RefInsteadOfPointerLayer
            {
                glInstance.PixelTransformParameterivEXT(target, pname, parameters_ptr);
            }
        }

        // PixelTransformParameterfvEXT overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void PixelTransformParameterfvEXT(this GL.EXTExtension glInstance, PixelTransformTargetEXT target, PixelTransformPNameEXT pname, ReadOnlySpan<float> parameters)
        {
            fixed (float* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.PixelTransformParameterfvEXT(target, pname, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void PixelTransformParameterfvEXT(this GL.EXTExtension glInstance, PixelTransformTargetEXT target, PixelTransformPNameEXT pname, float[] parameters)
        {
            fixed (float* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.PixelTransformParameterfvEXT(target, pname, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void PixelTransformParameterfvEXT(this GL.EXTExtension glInstance, PixelTransformTargetEXT target, PixelTransformPNameEXT pname, in float parameters)
        {
            fixed (float* parameters_ptr = &parameters) // RefInsteadOfPointerLayer
            {
                glInstance.PixelTransformParameterfvEXT(target, pname, parameters_ptr);
            }
        }

        // GetPixelTransformParameterivEXT overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetPixelTransformParameterivEXT(this GL.EXTExtension glInstance, GLEnum target, GLEnum pname, Span<int> parameters)
        {
            fixed (int* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.GetPixelTransformParameterivEXT(target, pname, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetPixelTransformParameterivEXT(this GL.EXTExtension glInstance, GLEnum target, GLEnum pname, int[] parameters)
        {
            fixed (int* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.GetPixelTransformParameterivEXT(target, pname, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void GetPixelTransformParameterivEXT(this GL.EXTExtension glInstance, GLEnum target, GLEnum pname, ref int parameters)
        {
            fixed (int* parameters_ptr = &parameters) // RefInsteadOfPointerLayer
            {
                glInstance.GetPixelTransformParameterivEXT(target, pname, parameters_ptr);
            }
        }

        // GetPixelTransformParameterfvEXT overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetPixelTransformParameterfvEXT(this GL.EXTExtension glInstance, GLEnum target, GLEnum pname, Span<float> parameters)
        {
            fixed (float* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.GetPixelTransformParameterfvEXT(target, pname, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetPixelTransformParameterfvEXT(this GL.EXTExtension glInstance, GLEnum target, GLEnum pname, float[] parameters)
        {
            fixed (float* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.GetPixelTransformParameterfvEXT(target, pname, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void GetPixelTransformParameterfvEXT(this GL.EXTExtension glInstance, GLEnum target, GLEnum pname, ref float parameters)
        {
            fixed (float* parameters_ptr = &parameters) // RefInsteadOfPointerLayer
            {
                glInstance.GetPixelTransformParameterfvEXT(target, pname, parameters_ptr);
            }
        }

        // PointParameterfvEXT overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void PointParameterfvEXT(this GL.EXTExtension glInstance, PointParameterNameARB pname, ReadOnlySpan<float> parameters)
        {
            fixed (float* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.PointParameterfvEXT(pname, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void PointParameterfvEXT(this GL.EXTExtension glInstance, PointParameterNameARB pname, float[] parameters)
        {
            fixed (float* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.PointParameterfvEXT(pname, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void PointParameterfvEXT(this GL.EXTExtension glInstance, PointParameterNameARB pname, in float parameters)
        {
            fixed (float* parameters_ptr = &parameters) // RefInsteadOfPointerLayer
            {
                glInstance.PointParameterfvEXT(pname, parameters_ptr);
            }
        }

        // RasterSamplesEXT overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.BoolOverloader
        public static unsafe void RasterSamplesEXT(this GL.EXTExtension glInstance, uint samples, bool fixedsamplelocations)
        {
            var fixedsamplelocations_byte = (byte)(fixedsamplelocations ? 1 : 0);
            glInstance.RasterSamplesEXT(samples, fixedsamplelocations_byte);
        }

        // GenSemaphoresEXT overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GenSemaphoresEXT(this GL.EXTExtension glInstance, Span<uint> semaphores)
        {
            var n = (int)(semaphores.Length);
            fixed (uint* semaphores_ptr = semaphores) // SpanOrArrayLayer
            {
                glInstance.GenSemaphoresEXT(n, semaphores_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GenSemaphoresEXT(this GL.EXTExtension glInstance, uint[] semaphores)
        {
            var n = (int)(semaphores.Length);
            fixed (uint* semaphores_ptr = semaphores) // SpanOrArrayLayer
            {
                glInstance.GenSemaphoresEXT(n, semaphores_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void GenSemaphoresEXT(this GL.EXTExtension glInstance, int n, ref uint semaphores)
        {
            fixed (uint* semaphores_ptr = &semaphores) // RefInsteadOfPointerLayer
            {
                glInstance.GenSemaphoresEXT(n, semaphores_ptr);
            }
        }

        // DeleteSemaphoresEXT overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void DeleteSemaphoresEXT(this GL.EXTExtension glInstance, ReadOnlySpan<uint> semaphores)
        {
            var n = (int)(semaphores.Length);
            fixed (uint* semaphores_ptr = semaphores) // SpanOrArrayLayer
            {
                glInstance.DeleteSemaphoresEXT(n, semaphores_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void DeleteSemaphoresEXT(this GL.EXTExtension glInstance, uint[] semaphores)
        {
            var n = (int)(semaphores.Length);
            fixed (uint* semaphores_ptr = semaphores) // SpanOrArrayLayer
            {
                glInstance.DeleteSemaphoresEXT(n, semaphores_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void DeleteSemaphoresEXT(this GL.EXTExtension glInstance, int n, in uint semaphores)
        {
            fixed (uint* semaphores_ptr = &semaphores) // RefInsteadOfPointerLayer
            {
                glInstance.DeleteSemaphoresEXT(n, semaphores_ptr);
            }
        }

        // SemaphoreParameterui64vEXT overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void SemaphoreParameterui64vEXT(this GL.EXTExtension glInstance, uint semaphore, SemaphoreParameterName pname, in ulong parameters)
        {
            fixed (ulong* parameters_ptr = &parameters) // RefInsteadOfPointerLayer
            {
                glInstance.SemaphoreParameterui64vEXT(semaphore, pname, parameters_ptr);
            }
        }

        // GetSemaphoreParameterui64vEXT overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void GetSemaphoreParameterui64vEXT(this GL.EXTExtension glInstance, uint semaphore, SemaphoreParameterName pname, ref ulong parameters)
        {
            fixed (ulong* parameters_ptr = &parameters) // RefInsteadOfPointerLayer
            {
                glInstance.GetSemaphoreParameterui64vEXT(semaphore, pname, parameters_ptr);
            }
        }

        // WaitSemaphoreEXT overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void WaitSemaphoreEXT(this GL.EXTExtension glInstance, uint semaphore, uint numBufferBarriers, ReadOnlySpan<BufferHandle> buffers, uint numTextureBarriers, ReadOnlySpan<TextureHandle> textures, ReadOnlySpan<TextureLayout> srcLayouts)
        {
            fixed (BufferHandle* buffers_ptr = buffers) // SpanOrArrayLayer
            {
                fixed (TextureHandle* textures_ptr = textures) // SpanOrArrayLayer
                {
                    fixed (TextureLayout* srcLayouts_ptr = srcLayouts) // SpanOrArrayLayer
                    {
                        glInstance.WaitSemaphoreEXT(semaphore, numBufferBarriers, buffers_ptr, numTextureBarriers, textures_ptr, srcLayouts_ptr);
                    }
                }
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void WaitSemaphoreEXT(this GL.EXTExtension glInstance, uint semaphore, uint numBufferBarriers, BufferHandle[] buffers, uint numTextureBarriers, TextureHandle[] textures, TextureLayout[] srcLayouts)
        {
            fixed (BufferHandle* buffers_ptr = buffers) // SpanOrArrayLayer
            {
                fixed (TextureHandle* textures_ptr = textures) // SpanOrArrayLayer
                {
                    fixed (TextureLayout* srcLayouts_ptr = srcLayouts) // SpanOrArrayLayer
                    {
                        glInstance.WaitSemaphoreEXT(semaphore, numBufferBarriers, buffers_ptr, numTextureBarriers, textures_ptr, srcLayouts_ptr);
                    }
                }
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void WaitSemaphoreEXT(this GL.EXTExtension glInstance, uint semaphore, uint numBufferBarriers, in BufferHandle buffers, uint numTextureBarriers, in TextureHandle textures, in TextureLayout srcLayouts)
        {
            fixed (BufferHandle* buffers_ptr = &buffers) // RefInsteadOfPointerLayer
            fixed (TextureHandle* textures_ptr = &textures) // RefInsteadOfPointerLayer
            fixed (TextureLayout* srcLayouts_ptr = &srcLayouts) // RefInsteadOfPointerLayer
            {
                glInstance.WaitSemaphoreEXT(semaphore, numBufferBarriers, buffers_ptr, numTextureBarriers, textures_ptr, srcLayouts_ptr);
            }
        }

        // SignalSemaphoreEXT overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void SignalSemaphoreEXT(this GL.EXTExtension glInstance, uint semaphore, uint numBufferBarriers, ReadOnlySpan<BufferHandle> buffers, uint numTextureBarriers, ReadOnlySpan<TextureHandle> textures, ReadOnlySpan<TextureLayout> dstLayouts)
        {
            fixed (BufferHandle* buffers_ptr = buffers) // SpanOrArrayLayer
            {
                fixed (TextureHandle* textures_ptr = textures) // SpanOrArrayLayer
                {
                    fixed (TextureLayout* dstLayouts_ptr = dstLayouts) // SpanOrArrayLayer
                    {
                        glInstance.SignalSemaphoreEXT(semaphore, numBufferBarriers, buffers_ptr, numTextureBarriers, textures_ptr, dstLayouts_ptr);
                    }
                }
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void SignalSemaphoreEXT(this GL.EXTExtension glInstance, uint semaphore, uint numBufferBarriers, BufferHandle[] buffers, uint numTextureBarriers, TextureHandle[] textures, TextureLayout[] dstLayouts)
        {
            fixed (BufferHandle* buffers_ptr = buffers) // SpanOrArrayLayer
            {
                fixed (TextureHandle* textures_ptr = textures) // SpanOrArrayLayer
                {
                    fixed (TextureLayout* dstLayouts_ptr = dstLayouts) // SpanOrArrayLayer
                    {
                        glInstance.SignalSemaphoreEXT(semaphore, numBufferBarriers, buffers_ptr, numTextureBarriers, textures_ptr, dstLayouts_ptr);
                    }
                }
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void SignalSemaphoreEXT(this GL.EXTExtension glInstance, uint semaphore, uint numBufferBarriers, in BufferHandle buffers, uint numTextureBarriers, in TextureHandle textures, in TextureLayout dstLayouts)
        {
            fixed (BufferHandle* buffers_ptr = &buffers) // RefInsteadOfPointerLayer
            fixed (TextureHandle* textures_ptr = &textures) // RefInsteadOfPointerLayer
            fixed (TextureLayout* dstLayouts_ptr = &dstLayouts) // RefInsteadOfPointerLayer
            {
                glInstance.SignalSemaphoreEXT(semaphore, numBufferBarriers, buffers_ptr, numTextureBarriers, textures_ptr, dstLayouts_ptr);
            }
        }

        // ImportSemaphoreWin32HandleEXT overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.VoidPtrToIntPtrOverloader
        public static unsafe void ImportSemaphoreWin32HandleEXT(this GL.EXTExtension glInstance, uint semaphore, ExternalHandleType handleType, IntPtr handle)
        {
            var handle_vptr = (void*)handle;
            glInstance.ImportSemaphoreWin32HandleEXT(semaphore, handleType, handle_vptr);
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void ImportSemaphoreWin32HandleEXT<T1>(this GL.EXTExtension glInstance, uint semaphore, ExternalHandleType handleType, ref T1 handle)
            where T1 : unmanaged
        {
            fixed (void* handle_ptr = &handle) // RefInsteadOfPointerLayer
            {
                glInstance.ImportSemaphoreWin32HandleEXT(semaphore, handleType, handle_ptr);
            }
        }

        // ImportSemaphoreWin32NameEXT overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.VoidPtrToIntPtrOverloader
        public static unsafe void ImportSemaphoreWin32NameEXT(this GL.EXTExtension glInstance, uint semaphore, ExternalHandleType handleType, IntPtr name)
        {
            var name_vptr = (void*)name;
            glInstance.ImportSemaphoreWin32NameEXT(semaphore, handleType, name_vptr);
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void ImportSemaphoreWin32NameEXT<T1>(this GL.EXTExtension glInstance, uint semaphore, ExternalHandleType handleType, in T1 name)
            where T1 : unmanaged
        {
            fixed (void* name_ptr = &name) // RefInsteadOfPointerLayer
            {
                glInstance.ImportSemaphoreWin32NameEXT(semaphore, handleType, name_ptr);
            }
        }

        // SecondaryColor3bvEXT overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void SecondaryColor3bvEXT(this GL.EXTExtension glInstance, ReadOnlySpan<sbyte> v)
        {
            fixed (sbyte* v_ptr = v) // SpanOrArrayLayer
            {
                glInstance.SecondaryColor3bvEXT(v_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void SecondaryColor3bvEXT(this GL.EXTExtension glInstance, sbyte[] v)
        {
            fixed (sbyte* v_ptr = v) // SpanOrArrayLayer
            {
                glInstance.SecondaryColor3bvEXT(v_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void SecondaryColor3bvEXT(this GL.EXTExtension glInstance, in sbyte v)
        {
            fixed (sbyte* v_ptr = &v) // RefInsteadOfPointerLayer
            {
                glInstance.SecondaryColor3bvEXT(v_ptr);
            }
        }

        // SecondaryColor3dvEXT overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void SecondaryColor3dvEXT(this GL.EXTExtension glInstance, ReadOnlySpan<double> v)
        {
            fixed (double* v_ptr = v) // SpanOrArrayLayer
            {
                glInstance.SecondaryColor3dvEXT(v_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void SecondaryColor3dvEXT(this GL.EXTExtension glInstance, double[] v)
        {
            fixed (double* v_ptr = v) // SpanOrArrayLayer
            {
                glInstance.SecondaryColor3dvEXT(v_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void SecondaryColor3dvEXT(this GL.EXTExtension glInstance, in double v)
        {
            fixed (double* v_ptr = &v) // RefInsteadOfPointerLayer
            {
                glInstance.SecondaryColor3dvEXT(v_ptr);
            }
        }

        // SecondaryColor3fvEXT overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void SecondaryColor3fvEXT(this GL.EXTExtension glInstance, ReadOnlySpan<float> v)
        {
            fixed (float* v_ptr = v) // SpanOrArrayLayer
            {
                glInstance.SecondaryColor3fvEXT(v_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void SecondaryColor3fvEXT(this GL.EXTExtension glInstance, float[] v)
        {
            fixed (float* v_ptr = v) // SpanOrArrayLayer
            {
                glInstance.SecondaryColor3fvEXT(v_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void SecondaryColor3fvEXT(this GL.EXTExtension glInstance, in float v)
        {
            fixed (float* v_ptr = &v) // RefInsteadOfPointerLayer
            {
                glInstance.SecondaryColor3fvEXT(v_ptr);
            }
        }

        // SecondaryColor3ivEXT overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void SecondaryColor3ivEXT(this GL.EXTExtension glInstance, ReadOnlySpan<int> v)
        {
            fixed (int* v_ptr = v) // SpanOrArrayLayer
            {
                glInstance.SecondaryColor3ivEXT(v_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void SecondaryColor3ivEXT(this GL.EXTExtension glInstance, int[] v)
        {
            fixed (int* v_ptr = v) // SpanOrArrayLayer
            {
                glInstance.SecondaryColor3ivEXT(v_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void SecondaryColor3ivEXT(this GL.EXTExtension glInstance, in int v)
        {
            fixed (int* v_ptr = &v) // RefInsteadOfPointerLayer
            {
                glInstance.SecondaryColor3ivEXT(v_ptr);
            }
        }

        // SecondaryColor3svEXT overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void SecondaryColor3svEXT(this GL.EXTExtension glInstance, ReadOnlySpan<short> v)
        {
            fixed (short* v_ptr = v) // SpanOrArrayLayer
            {
                glInstance.SecondaryColor3svEXT(v_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void SecondaryColor3svEXT(this GL.EXTExtension glInstance, short[] v)
        {
            fixed (short* v_ptr = v) // SpanOrArrayLayer
            {
                glInstance.SecondaryColor3svEXT(v_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void SecondaryColor3svEXT(this GL.EXTExtension glInstance, in short v)
        {
            fixed (short* v_ptr = &v) // RefInsteadOfPointerLayer
            {
                glInstance.SecondaryColor3svEXT(v_ptr);
            }
        }

        // SecondaryColor3ubvEXT overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void SecondaryColor3ubvEXT(this GL.EXTExtension glInstance, ReadOnlySpan<byte> v)
        {
            fixed (byte* v_ptr = v) // SpanOrArrayLayer
            {
                glInstance.SecondaryColor3ubvEXT(v_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void SecondaryColor3ubvEXT(this GL.EXTExtension glInstance, byte[] v)
        {
            fixed (byte* v_ptr = v) // SpanOrArrayLayer
            {
                glInstance.SecondaryColor3ubvEXT(v_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void SecondaryColor3ubvEXT(this GL.EXTExtension glInstance, in byte v)
        {
            fixed (byte* v_ptr = &v) // RefInsteadOfPointerLayer
            {
                glInstance.SecondaryColor3ubvEXT(v_ptr);
            }
        }

        // SecondaryColor3uivEXT overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void SecondaryColor3uivEXT(this GL.EXTExtension glInstance, ReadOnlySpan<uint> v)
        {
            fixed (uint* v_ptr = v) // SpanOrArrayLayer
            {
                glInstance.SecondaryColor3uivEXT(v_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void SecondaryColor3uivEXT(this GL.EXTExtension glInstance, uint[] v)
        {
            fixed (uint* v_ptr = v) // SpanOrArrayLayer
            {
                glInstance.SecondaryColor3uivEXT(v_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void SecondaryColor3uivEXT(this GL.EXTExtension glInstance, in uint v)
        {
            fixed (uint* v_ptr = &v) // RefInsteadOfPointerLayer
            {
                glInstance.SecondaryColor3uivEXT(v_ptr);
            }
        }

        // SecondaryColor3usvEXT overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void SecondaryColor3usvEXT(this GL.EXTExtension glInstance, ReadOnlySpan<ushort> v)
        {
            fixed (ushort* v_ptr = v) // SpanOrArrayLayer
            {
                glInstance.SecondaryColor3usvEXT(v_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void SecondaryColor3usvEXT(this GL.EXTExtension glInstance, ushort[] v)
        {
            fixed (ushort* v_ptr = v) // SpanOrArrayLayer
            {
                glInstance.SecondaryColor3usvEXT(v_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void SecondaryColor3usvEXT(this GL.EXTExtension glInstance, in ushort v)
        {
            fixed (ushort* v_ptr = &v) // RefInsteadOfPointerLayer
            {
                glInstance.SecondaryColor3usvEXT(v_ptr);
            }
        }

        // SecondaryColorPointerEXT overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.VoidPtrToIntPtrOverloader
        public static unsafe void SecondaryColorPointerEXT(this GL.EXTExtension glInstance, int size, ColorPointerType type, int stride, IntPtr pointer)
        {
            var pointer_vptr = (void*)pointer;
            glInstance.SecondaryColorPointerEXT(size, type, stride, pointer_vptr);
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void SecondaryColorPointerEXT<T1>(this GL.EXTExtension glInstance, int size, ColorPointerType type, int stride, ReadOnlySpan<T1> pointer)
            where T1 : unmanaged
        {
            fixed (void* pointer_ptr = pointer) // SpanOrArrayLayer
            {
                glInstance.SecondaryColorPointerEXT(size, type, stride, pointer_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void SecondaryColorPointerEXT<T1>(this GL.EXTExtension glInstance, int size, ColorPointerType type, int stride, T1[] pointer)
            where T1 : unmanaged
        {
            fixed (void* pointer_ptr = pointer) // SpanOrArrayLayer
            {
                glInstance.SecondaryColorPointerEXT(size, type, stride, pointer_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void SecondaryColorPointerEXT<T1>(this GL.EXTExtension glInstance, int size, ColorPointerType type, int stride, in T1 pointer)
            where T1 : unmanaged
        {
            fixed (void* pointer_ptr = &pointer) // RefInsteadOfPointerLayer
            {
                glInstance.SecondaryColorPointerEXT(size, type, stride, pointer_ptr);
            }
        }

        // CreateShaderProgramEXT overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.Transformer
        public static unsafe ProgramHandle CreateShaderProgramEXT(this GL.EXTExtension glInstance, ShaderType type, string str)
        {
            ProgramHandle returnValue;
            byte* str_ptr = (byte*)Marshal.StringToCoTaskMemUTF8(str);
            returnValue = glInstance.CreateShaderProgramEXT(type, str_ptr);
            Marshal.FreeCoTaskMem((IntPtr)str_ptr);
            return returnValue;
        }

        // DeleteProgramPipelinesEXT overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void DeleteProgramPipelinesEXT(this GL.EXTExtension glInstance, ReadOnlySpan<ProgramPipelineHandle> pipelines)
        {
            var n = (int)(pipelines.Length);
            fixed (ProgramPipelineHandle* pipelines_ptr = pipelines) // SpanOrArrayLayer
            {
                glInstance.DeleteProgramPipelinesEXT(n, pipelines_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void DeleteProgramPipelinesEXT(this GL.EXTExtension glInstance, ProgramPipelineHandle[] pipelines)
        {
            var n = (int)(pipelines.Length);
            fixed (ProgramPipelineHandle* pipelines_ptr = pipelines) // SpanOrArrayLayer
            {
                glInstance.DeleteProgramPipelinesEXT(n, pipelines_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void DeleteProgramPipelinesEXT(this GL.EXTExtension glInstance, int n, in ProgramPipelineHandle pipelines)
        {
            fixed (ProgramPipelineHandle* pipelines_ptr = &pipelines) // RefInsteadOfPointerLayer
            {
                glInstance.DeleteProgramPipelinesEXT(n, pipelines_ptr);
            }
        }

        // GenProgramPipelinesEXT overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GenProgramPipelinesEXT(this GL.EXTExtension glInstance, Span<ProgramPipelineHandle> pipelines)
        {
            var n = (int)(pipelines.Length);
            fixed (ProgramPipelineHandle* pipelines_ptr = pipelines) // SpanOrArrayLayer
            {
                glInstance.GenProgramPipelinesEXT(n, pipelines_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GenProgramPipelinesEXT(this GL.EXTExtension glInstance, ProgramPipelineHandle[] pipelines)
        {
            var n = (int)(pipelines.Length);
            fixed (ProgramPipelineHandle* pipelines_ptr = pipelines) // SpanOrArrayLayer
            {
                glInstance.GenProgramPipelinesEXT(n, pipelines_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void GenProgramPipelinesEXT(this GL.EXTExtension glInstance, int n, ref ProgramPipelineHandle pipelines)
        {
            fixed (ProgramPipelineHandle* pipelines_ptr = &pipelines) // RefInsteadOfPointerLayer
            {
                glInstance.GenProgramPipelinesEXT(n, pipelines_ptr);
            }
        }

        // GetProgramPipelineInfoLogEXT overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.OutToReturnOverloader
        public static unsafe string GetProgramPipelineInfoLogEXT(this GL.EXTExtension glInstance, ProgramPipelineHandle pipeline, int bufSize, Span<int> length)
        {
            string infoLog;
            fixed (int* length_ptr = length) // SpanOrArrayLayer
            {
                var infoLog_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                glInstance.GetProgramPipelineInfoLogEXT(pipeline, bufSize, length_ptr, infoLog_ptr);
                infoLog = Marshal.PtrToStringUTF8((IntPtr)infoLog_ptr)!;
                Marshal.FreeCoTaskMem((IntPtr)infoLog_ptr);
            }
            return infoLog;
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetProgramPipelineInfoLogEXT(this GL.EXTExtension glInstance, ProgramPipelineHandle pipeline, int bufSize, Span<int> length, out string infoLog)
        {
            fixed (int* length_ptr = length) // SpanOrArrayLayer
            {
                var infoLog_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                glInstance.GetProgramPipelineInfoLogEXT(pipeline, bufSize, length_ptr, infoLog_ptr);
                infoLog = Marshal.PtrToStringUTF8((IntPtr)infoLog_ptr)!;
                Marshal.FreeCoTaskMem((IntPtr)infoLog_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.OutToReturnOverloader
        public static unsafe string GetProgramPipelineInfoLogEXT(this GL.EXTExtension glInstance, ProgramPipelineHandle pipeline, int bufSize, int[] length)
        {
            string infoLog;
            fixed (int* length_ptr = length) // SpanOrArrayLayer
            {
                var infoLog_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                glInstance.GetProgramPipelineInfoLogEXT(pipeline, bufSize, length_ptr, infoLog_ptr);
                infoLog = Marshal.PtrToStringUTF8((IntPtr)infoLog_ptr)!;
                Marshal.FreeCoTaskMem((IntPtr)infoLog_ptr);
            }
            return infoLog;
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetProgramPipelineInfoLogEXT(this GL.EXTExtension glInstance, ProgramPipelineHandle pipeline, int bufSize, int[] length, out string infoLog)
        {
            fixed (int* length_ptr = length) // SpanOrArrayLayer
            {
                var infoLog_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                glInstance.GetProgramPipelineInfoLogEXT(pipeline, bufSize, length_ptr, infoLog_ptr);
                infoLog = Marshal.PtrToStringUTF8((IntPtr)infoLog_ptr)!;
                Marshal.FreeCoTaskMem((IntPtr)infoLog_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.OutToReturnOverloader
        public static unsafe string GetProgramPipelineInfoLogEXT(this GL.EXTExtension glInstance, ProgramPipelineHandle pipeline, int bufSize, ref int length)
        {
            string infoLog;
            fixed (int* length_ptr = &length) // RefInsteadOfPointerLayer
            {
                var infoLog_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                glInstance.GetProgramPipelineInfoLogEXT(pipeline, bufSize, length_ptr, infoLog_ptr);
                infoLog = Marshal.PtrToStringUTF8((IntPtr)infoLog_ptr)!;
                Marshal.FreeCoTaskMem((IntPtr)infoLog_ptr);
            }
            return infoLog;
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void GetProgramPipelineInfoLogEXT(this GL.EXTExtension glInstance, ProgramPipelineHandle pipeline, int bufSize, ref int length, out string infoLog)
        {
            fixed (int* length_ptr = &length) // RefInsteadOfPointerLayer
            {
                var infoLog_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                glInstance.GetProgramPipelineInfoLogEXT(pipeline, bufSize, length_ptr, infoLog_ptr);
                infoLog = Marshal.PtrToStringUTF8((IntPtr)infoLog_ptr)!;
                Marshal.FreeCoTaskMem((IntPtr)infoLog_ptr);
            }
        }

        // GetProgramPipelineivEXT overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void GetProgramPipelineivEXT(this GL.EXTExtension glInstance, ProgramPipelineHandle pipeline, PipelineParameterName pname, ref int parameters)
        {
            fixed (int* parameters_ptr = &parameters) // RefInsteadOfPointerLayer
            {
                glInstance.GetProgramPipelineivEXT(pipeline, pname, parameters_ptr);
            }
        }

        // BindImageTextureEXT overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.BoolOverloader
        public static unsafe void BindImageTextureEXT(this GL.EXTExtension glInstance, uint index, TextureHandle texture, int level, bool layered, int layer, BufferAccessARB access, int format)
        {
            var layered_byte = (byte)(layered ? 1 : 0);
            glInstance.BindImageTextureEXT(index, texture, level, layered_byte, layer, access, format);
        }

        // TexSubImage1DEXT overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.VoidPtrToIntPtrOverloader
        public static unsafe void TexSubImage1DEXT(this GL.EXTExtension glInstance, TextureTarget target, int level, int xoffset, int width, PixelFormat format, PixelType type, IntPtr pixels)
        {
            var pixels_vptr = (void*)pixels;
            glInstance.TexSubImage1DEXT(target, level, xoffset, width, format, type, pixels_vptr);
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void TexSubImage1DEXT<T1>(this GL.EXTExtension glInstance, TextureTarget target, int level, int xoffset, int width, PixelFormat format, PixelType type, ReadOnlySpan<T1> pixels)
            where T1 : unmanaged
        {
            fixed (void* pixels_ptr = pixels) // SpanOrArrayLayer
            {
                glInstance.TexSubImage1DEXT(target, level, xoffset, width, format, type, pixels_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void TexSubImage1DEXT<T1>(this GL.EXTExtension glInstance, TextureTarget target, int level, int xoffset, int width, PixelFormat format, PixelType type, T1[] pixels)
            where T1 : unmanaged
        {
            fixed (void* pixels_ptr = pixels) // SpanOrArrayLayer
            {
                glInstance.TexSubImage1DEXT(target, level, xoffset, width, format, type, pixels_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void TexSubImage1DEXT<T1>(this GL.EXTExtension glInstance, TextureTarget target, int level, int xoffset, int width, PixelFormat format, PixelType type, in T1 pixels)
            where T1 : unmanaged
        {
            fixed (void* pixels_ptr = &pixels) // RefInsteadOfPointerLayer
            {
                glInstance.TexSubImage1DEXT(target, level, xoffset, width, format, type, pixels_ptr);
            }
        }

        // TexSubImage2DEXT overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.VoidPtrToIntPtrOverloader
        public static unsafe void TexSubImage2DEXT(this GL.EXTExtension glInstance, TextureTarget target, int level, int xoffset, int yoffset, int width, int height, PixelFormat format, PixelType type, IntPtr pixels)
        {
            var pixels_vptr = (void*)pixels;
            glInstance.TexSubImage2DEXT(target, level, xoffset, yoffset, width, height, format, type, pixels_vptr);
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void TexSubImage2DEXT<T1>(this GL.EXTExtension glInstance, TextureTarget target, int level, int xoffset, int yoffset, int width, int height, PixelFormat format, PixelType type, ReadOnlySpan<T1> pixels)
            where T1 : unmanaged
        {
            fixed (void* pixels_ptr = pixels) // SpanOrArrayLayer
            {
                glInstance.TexSubImage2DEXT(target, level, xoffset, yoffset, width, height, format, type, pixels_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void TexSubImage2DEXT<T1>(this GL.EXTExtension glInstance, TextureTarget target, int level, int xoffset, int yoffset, int width, int height, PixelFormat format, PixelType type, T1[] pixels)
            where T1 : unmanaged
        {
            fixed (void* pixels_ptr = pixels) // SpanOrArrayLayer
            {
                glInstance.TexSubImage2DEXT(target, level, xoffset, yoffset, width, height, format, type, pixels_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void TexSubImage2DEXT<T1>(this GL.EXTExtension glInstance, TextureTarget target, int level, int xoffset, int yoffset, int width, int height, PixelFormat format, PixelType type, in T1 pixels)
            where T1 : unmanaged
        {
            fixed (void* pixels_ptr = &pixels) // RefInsteadOfPointerLayer
            {
                glInstance.TexSubImage2DEXT(target, level, xoffset, yoffset, width, height, format, type, pixels_ptr);
            }
        }

        // TexImage3DEXT overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.VoidPtrToIntPtrOverloader
        public static unsafe void TexImage3DEXT(this GL.EXTExtension glInstance, TextureTarget target, int level, InternalFormat internalformat, int width, int height, int depth, int border, PixelFormat format, PixelType type, IntPtr pixels)
        {
            var pixels_vptr = (void*)pixels;
            glInstance.TexImage3DEXT(target, level, internalformat, width, height, depth, border, format, type, pixels_vptr);
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void TexImage3DEXT<T1>(this GL.EXTExtension glInstance, TextureTarget target, int level, InternalFormat internalformat, int width, int height, int depth, int border, PixelFormat format, PixelType type, ReadOnlySpan<T1> pixels)
            where T1 : unmanaged
        {
            fixed (void* pixels_ptr = pixels) // SpanOrArrayLayer
            {
                glInstance.TexImage3DEXT(target, level, internalformat, width, height, depth, border, format, type, pixels_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void TexImage3DEXT<T1>(this GL.EXTExtension glInstance, TextureTarget target, int level, InternalFormat internalformat, int width, int height, int depth, int border, PixelFormat format, PixelType type, T1[] pixels)
            where T1 : unmanaged
        {
            fixed (void* pixels_ptr = pixels) // SpanOrArrayLayer
            {
                glInstance.TexImage3DEXT(target, level, internalformat, width, height, depth, border, format, type, pixels_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void TexImage3DEXT<T1>(this GL.EXTExtension glInstance, TextureTarget target, int level, InternalFormat internalformat, int width, int height, int depth, int border, PixelFormat format, PixelType type, in T1 pixels)
            where T1 : unmanaged
        {
            fixed (void* pixels_ptr = &pixels) // RefInsteadOfPointerLayer
            {
                glInstance.TexImage3DEXT(target, level, internalformat, width, height, depth, border, format, type, pixels_ptr);
            }
        }

        // TexSubImage3DEXT overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.VoidPtrToIntPtrOverloader
        public static unsafe void TexSubImage3DEXT(this GL.EXTExtension glInstance, TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, PixelFormat format, PixelType type, IntPtr pixels)
        {
            var pixels_vptr = (void*)pixels;
            glInstance.TexSubImage3DEXT(target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels_vptr);
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void TexSubImage3DEXT<T1>(this GL.EXTExtension glInstance, TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, PixelFormat format, PixelType type, ReadOnlySpan<T1> pixels)
            where T1 : unmanaged
        {
            fixed (void* pixels_ptr = pixels) // SpanOrArrayLayer
            {
                glInstance.TexSubImage3DEXT(target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void TexSubImage3DEXT<T1>(this GL.EXTExtension glInstance, TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, PixelFormat format, PixelType type, T1[] pixels)
            where T1 : unmanaged
        {
            fixed (void* pixels_ptr = pixels) // SpanOrArrayLayer
            {
                glInstance.TexSubImage3DEXT(target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void TexSubImage3DEXT<T1>(this GL.EXTExtension glInstance, TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, PixelFormat format, PixelType type, in T1 pixels)
            where T1 : unmanaged
        {
            fixed (void* pixels_ptr = &pixels) // RefInsteadOfPointerLayer
            {
                glInstance.TexSubImage3DEXT(target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels_ptr);
            }
        }

        // TexParameterIivEXT overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void TexParameterIivEXT(this GL.EXTExtension glInstance, TextureTarget target, TextureParameterName pname, ReadOnlySpan<int> parameters)
        {
            fixed (int* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.TexParameterIivEXT(target, pname, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void TexParameterIivEXT(this GL.EXTExtension glInstance, TextureTarget target, TextureParameterName pname, int[] parameters)
        {
            fixed (int* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.TexParameterIivEXT(target, pname, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void TexParameterIivEXT(this GL.EXTExtension glInstance, TextureTarget target, TextureParameterName pname, in int parameters)
        {
            fixed (int* parameters_ptr = &parameters) // RefInsteadOfPointerLayer
            {
                glInstance.TexParameterIivEXT(target, pname, parameters_ptr);
            }
        }

        // TexParameterIuivEXT overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void TexParameterIuivEXT(this GL.EXTExtension glInstance, TextureTarget target, TextureParameterName pname, ReadOnlySpan<uint> parameters)
        {
            fixed (uint* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.TexParameterIuivEXT(target, pname, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void TexParameterIuivEXT(this GL.EXTExtension glInstance, TextureTarget target, TextureParameterName pname, uint[] parameters)
        {
            fixed (uint* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.TexParameterIuivEXT(target, pname, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void TexParameterIuivEXT(this GL.EXTExtension glInstance, TextureTarget target, TextureParameterName pname, in uint parameters)
        {
            fixed (uint* parameters_ptr = &parameters) // RefInsteadOfPointerLayer
            {
                glInstance.TexParameterIuivEXT(target, pname, parameters_ptr);
            }
        }

        // GetTexParameterIivEXT overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetTexParameterIivEXT(this GL.EXTExtension glInstance, TextureTarget target, GetTextureParameter pname, Span<int> parameters)
        {
            fixed (int* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.GetTexParameterIivEXT(target, pname, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetTexParameterIivEXT(this GL.EXTExtension glInstance, TextureTarget target, GetTextureParameter pname, int[] parameters)
        {
            fixed (int* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.GetTexParameterIivEXT(target, pname, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void GetTexParameterIivEXT(this GL.EXTExtension glInstance, TextureTarget target, GetTextureParameter pname, ref int parameters)
        {
            fixed (int* parameters_ptr = &parameters) // RefInsteadOfPointerLayer
            {
                glInstance.GetTexParameterIivEXT(target, pname, parameters_ptr);
            }
        }

        // GetTexParameterIuivEXT overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetTexParameterIuivEXT(this GL.EXTExtension glInstance, TextureTarget target, GetTextureParameter pname, Span<uint> parameters)
        {
            fixed (uint* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.GetTexParameterIuivEXT(target, pname, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetTexParameterIuivEXT(this GL.EXTExtension glInstance, TextureTarget target, GetTextureParameter pname, uint[] parameters)
        {
            fixed (uint* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.GetTexParameterIuivEXT(target, pname, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void GetTexParameterIuivEXT(this GL.EXTExtension glInstance, TextureTarget target, GetTextureParameter pname, ref uint parameters)
        {
            fixed (uint* parameters_ptr = &parameters) // RefInsteadOfPointerLayer
            {
                glInstance.GetTexParameterIuivEXT(target, pname, parameters_ptr);
            }
        }

        // AreTexturesResidentEXT overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe byte AreTexturesResidentEXT(this GL.EXTExtension glInstance, int n, ReadOnlySpan<TextureHandle> textures, Span<byte> residences)
        {
            byte returnValue;
            fixed (TextureHandle* textures_ptr = textures) // SpanOrArrayLayer
            {
                fixed (byte* residences_ptr = residences) // SpanOrArrayLayer
                {
                    returnValue = glInstance.AreTexturesResidentEXT(n, textures_ptr, residences_ptr);
                }
            }
            return returnValue;
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe byte AreTexturesResidentEXT(this GL.EXTExtension glInstance, int n, TextureHandle[] textures, byte[] residences)
        {
            byte returnValue;
            fixed (TextureHandle* textures_ptr = textures) // SpanOrArrayLayer
            {
                fixed (byte* residences_ptr = residences) // SpanOrArrayLayer
                {
                    returnValue = glInstance.AreTexturesResidentEXT(n, textures_ptr, residences_ptr);
                }
            }
            return returnValue;
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe byte AreTexturesResidentEXT(this GL.EXTExtension glInstance, int n, in TextureHandle textures, ref byte residences)
        {
            byte returnValue;
            fixed (TextureHandle* textures_ptr = &textures) // RefInsteadOfPointerLayer
            fixed (byte* residences_ptr = &residences) // RefInsteadOfPointerLayer
            {
                returnValue = glInstance.AreTexturesResidentEXT(n, textures_ptr, residences_ptr);
            }
            return returnValue;
        }

        // DeleteTexturesEXT overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void DeleteTexturesEXT(this GL.EXTExtension glInstance, ReadOnlySpan<TextureHandle> textures)
        {
            var n = (int)(textures.Length);
            fixed (TextureHandle* textures_ptr = textures) // SpanOrArrayLayer
            {
                glInstance.DeleteTexturesEXT(n, textures_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void DeleteTexturesEXT(this GL.EXTExtension glInstance, TextureHandle[] textures)
        {
            var n = (int)(textures.Length);
            fixed (TextureHandle* textures_ptr = textures) // SpanOrArrayLayer
            {
                glInstance.DeleteTexturesEXT(n, textures_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void DeleteTexturesEXT(this GL.EXTExtension glInstance, int n, in TextureHandle textures)
        {
            fixed (TextureHandle* textures_ptr = &textures) // RefInsteadOfPointerLayer
            {
                glInstance.DeleteTexturesEXT(n, textures_ptr);
            }
        }

        // GenTexturesEXT overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GenTexturesEXT(this GL.EXTExtension glInstance, Span<TextureHandle> textures)
        {
            var n = (int)(textures.Length);
            fixed (TextureHandle* textures_ptr = textures) // SpanOrArrayLayer
            {
                glInstance.GenTexturesEXT(n, textures_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GenTexturesEXT(this GL.EXTExtension glInstance, TextureHandle[] textures)
        {
            var n = (int)(textures.Length);
            fixed (TextureHandle* textures_ptr = textures) // SpanOrArrayLayer
            {
                glInstance.GenTexturesEXT(n, textures_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void GenTexturesEXT(this GL.EXTExtension glInstance, int n, ref TextureHandle textures)
        {
            fixed (TextureHandle* textures_ptr = &textures) // RefInsteadOfPointerLayer
            {
                glInstance.GenTexturesEXT(n, textures_ptr);
            }
        }

        // PrioritizeTexturesEXT overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void PrioritizeTexturesEXT(this GL.EXTExtension glInstance, int n, ReadOnlySpan<TextureHandle> textures, ReadOnlySpan<float> priorities)
        {
            fixed (TextureHandle* textures_ptr = textures) // SpanOrArrayLayer
            {
                fixed (float* priorities_ptr = priorities) // SpanOrArrayLayer
                {
                    glInstance.PrioritizeTexturesEXT(n, textures_ptr, priorities_ptr);
                }
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void PrioritizeTexturesEXT(this GL.EXTExtension glInstance, int n, TextureHandle[] textures, float[] priorities)
        {
            fixed (TextureHandle* textures_ptr = textures) // SpanOrArrayLayer
            {
                fixed (float* priorities_ptr = priorities) // SpanOrArrayLayer
                {
                    glInstance.PrioritizeTexturesEXT(n, textures_ptr, priorities_ptr);
                }
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void PrioritizeTexturesEXT(this GL.EXTExtension glInstance, int n, in TextureHandle textures, in float priorities)
        {
            fixed (TextureHandle* textures_ptr = &textures) // RefInsteadOfPointerLayer
            fixed (float* priorities_ptr = &priorities) // RefInsteadOfPointerLayer
            {
                glInstance.PrioritizeTexturesEXT(n, textures_ptr, priorities_ptr);
            }
        }

        // GetQueryObjecti64vEXT overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetQueryObjecti64vEXT(this GL.EXTExtension glInstance, QueryHandle id, QueryObjectParameterName pname, Span<long> parameters)
        {
            fixed (long* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.GetQueryObjecti64vEXT(id, pname, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetQueryObjecti64vEXT(this GL.EXTExtension glInstance, QueryHandle id, QueryObjectParameterName pname, long[] parameters)
        {
            fixed (long* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.GetQueryObjecti64vEXT(id, pname, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void GetQueryObjecti64vEXT(this GL.EXTExtension glInstance, QueryHandle id, QueryObjectParameterName pname, ref long parameters)
        {
            fixed (long* parameters_ptr = &parameters) // RefInsteadOfPointerLayer
            {
                glInstance.GetQueryObjecti64vEXT(id, pname, parameters_ptr);
            }
        }

        // GetQueryObjectui64vEXT overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetQueryObjectui64vEXT(this GL.EXTExtension glInstance, QueryHandle id, QueryObjectParameterName pname, Span<ulong> parameters)
        {
            fixed (ulong* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.GetQueryObjectui64vEXT(id, pname, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetQueryObjectui64vEXT(this GL.EXTExtension glInstance, QueryHandle id, QueryObjectParameterName pname, ulong[] parameters)
        {
            fixed (ulong* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.GetQueryObjectui64vEXT(id, pname, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void GetQueryObjectui64vEXT(this GL.EXTExtension glInstance, QueryHandle id, QueryObjectParameterName pname, ref ulong parameters)
        {
            fixed (ulong* parameters_ptr = &parameters) // RefInsteadOfPointerLayer
            {
                glInstance.GetQueryObjectui64vEXT(id, pname, parameters_ptr);
            }
        }

        // GetTransformFeedbackVaryingEXT overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.OutToReturnOverloader
        public static unsafe string GetTransformFeedbackVaryingEXT(this GL.EXTExtension glInstance, ProgramHandle program, uint index, int bufSize, Span<int> length, Span<int> size, Span<AttributeType> type)
        {
            string name;
            fixed (int* length_ptr = length) // SpanOrArrayLayer
            {
                fixed (int* size_ptr = size) // SpanOrArrayLayer
                {
                    fixed (AttributeType* type_ptr = type) // SpanOrArrayLayer
                    {
                        var name_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                        glInstance.GetTransformFeedbackVaryingEXT(program, index, bufSize, length_ptr, size_ptr, type_ptr, name_ptr);
                        name = Marshal.PtrToStringUTF8((IntPtr)name_ptr)!;
                        Marshal.FreeCoTaskMem((IntPtr)name_ptr);
                    }
                }
            }
            return name;
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetTransformFeedbackVaryingEXT(this GL.EXTExtension glInstance, ProgramHandle program, uint index, int bufSize, Span<int> length, Span<int> size, Span<AttributeType> type, out string name)
        {
            fixed (int* length_ptr = length) // SpanOrArrayLayer
            {
                fixed (int* size_ptr = size) // SpanOrArrayLayer
                {
                    fixed (AttributeType* type_ptr = type) // SpanOrArrayLayer
                    {
                        var name_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                        glInstance.GetTransformFeedbackVaryingEXT(program, index, bufSize, length_ptr, size_ptr, type_ptr, name_ptr);
                        name = Marshal.PtrToStringUTF8((IntPtr)name_ptr)!;
                        Marshal.FreeCoTaskMem((IntPtr)name_ptr);
                    }
                }
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.OutToReturnOverloader
        public static unsafe string GetTransformFeedbackVaryingEXT(this GL.EXTExtension glInstance, ProgramHandle program, uint index, int bufSize, int[] length, int[] size, AttributeType[] type)
        {
            string name;
            fixed (int* length_ptr = length) // SpanOrArrayLayer
            {
                fixed (int* size_ptr = size) // SpanOrArrayLayer
                {
                    fixed (AttributeType* type_ptr = type) // SpanOrArrayLayer
                    {
                        var name_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                        glInstance.GetTransformFeedbackVaryingEXT(program, index, bufSize, length_ptr, size_ptr, type_ptr, name_ptr);
                        name = Marshal.PtrToStringUTF8((IntPtr)name_ptr)!;
                        Marshal.FreeCoTaskMem((IntPtr)name_ptr);
                    }
                }
            }
            return name;
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetTransformFeedbackVaryingEXT(this GL.EXTExtension glInstance, ProgramHandle program, uint index, int bufSize, int[] length, int[] size, AttributeType[] type, out string name)
        {
            fixed (int* length_ptr = length) // SpanOrArrayLayer
            {
                fixed (int* size_ptr = size) // SpanOrArrayLayer
                {
                    fixed (AttributeType* type_ptr = type) // SpanOrArrayLayer
                    {
                        var name_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                        glInstance.GetTransformFeedbackVaryingEXT(program, index, bufSize, length_ptr, size_ptr, type_ptr, name_ptr);
                        name = Marshal.PtrToStringUTF8((IntPtr)name_ptr)!;
                        Marshal.FreeCoTaskMem((IntPtr)name_ptr);
                    }
                }
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.OutToReturnOverloader
        public static unsafe string GetTransformFeedbackVaryingEXT(this GL.EXTExtension glInstance, ProgramHandle program, uint index, int bufSize, ref int length, ref int size, ref AttributeType type)
        {
            string name;
            fixed (int* length_ptr = &length) // RefInsteadOfPointerLayer
            fixed (int* size_ptr = &size) // RefInsteadOfPointerLayer
            fixed (AttributeType* type_ptr = &type) // RefInsteadOfPointerLayer
            {
                var name_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                glInstance.GetTransformFeedbackVaryingEXT(program, index, bufSize, length_ptr, size_ptr, type_ptr, name_ptr);
                name = Marshal.PtrToStringUTF8((IntPtr)name_ptr)!;
                Marshal.FreeCoTaskMem((IntPtr)name_ptr);
            }
            return name;
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void GetTransformFeedbackVaryingEXT(this GL.EXTExtension glInstance, ProgramHandle program, uint index, int bufSize, ref int length, ref int size, ref AttributeType type, out string name)
        {
            fixed (int* length_ptr = &length) // RefInsteadOfPointerLayer
            fixed (int* size_ptr = &size) // RefInsteadOfPointerLayer
            fixed (AttributeType* type_ptr = &type) // RefInsteadOfPointerLayer
            {
                var name_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                glInstance.GetTransformFeedbackVaryingEXT(program, index, bufSize, length_ptr, size_ptr, type_ptr, name_ptr);
                name = Marshal.PtrToStringUTF8((IntPtr)name_ptr)!;
                Marshal.FreeCoTaskMem((IntPtr)name_ptr);
            }
        }

        // ColorPointerEXT overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.VoidPtrToIntPtrOverloader
        public static unsafe void ColorPointerEXT(this GL.EXTExtension glInstance, int size, ColorPointerType type, int stride, int count, IntPtr pointer)
        {
            var pointer_vptr = (void*)pointer;
            glInstance.ColorPointerEXT(size, type, stride, count, pointer_vptr);
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void ColorPointerEXT<T1>(this GL.EXTExtension glInstance, int size, ColorPointerType type, int stride, int count, ReadOnlySpan<T1> pointer)
            where T1 : unmanaged
        {
            fixed (void* pointer_ptr = pointer) // SpanOrArrayLayer
            {
                glInstance.ColorPointerEXT(size, type, stride, count, pointer_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void ColorPointerEXT<T1>(this GL.EXTExtension glInstance, int size, ColorPointerType type, int stride, int count, T1[] pointer)
            where T1 : unmanaged
        {
            fixed (void* pointer_ptr = pointer) // SpanOrArrayLayer
            {
                glInstance.ColorPointerEXT(size, type, stride, count, pointer_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void ColorPointerEXT<T1>(this GL.EXTExtension glInstance, int size, ColorPointerType type, int stride, int count, in T1 pointer)
            where T1 : unmanaged
        {
            fixed (void* pointer_ptr = &pointer) // RefInsteadOfPointerLayer
            {
                glInstance.ColorPointerEXT(size, type, stride, count, pointer_ptr);
            }
        }

        // EdgeFlagPointerEXT overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void EdgeFlagPointerEXT(this GL.EXTExtension glInstance, int stride, int count, ReadOnlySpan<byte> pointer)
        {
            fixed (byte* pointer_ptr = pointer) // SpanOrArrayLayer
            {
                glInstance.EdgeFlagPointerEXT(stride, count, pointer_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void EdgeFlagPointerEXT(this GL.EXTExtension glInstance, int stride, int count, byte[] pointer)
        {
            fixed (byte* pointer_ptr = pointer) // SpanOrArrayLayer
            {
                glInstance.EdgeFlagPointerEXT(stride, count, pointer_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void EdgeFlagPointerEXT(this GL.EXTExtension glInstance, int stride, int count, in byte pointer)
        {
            fixed (byte* pointer_ptr = &pointer) // RefInsteadOfPointerLayer
            {
                glInstance.EdgeFlagPointerEXT(stride, count, pointer_ptr);
            }
        }

        // IndexPointerEXT overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.VoidPtrToIntPtrOverloader
        public static unsafe void IndexPointerEXT(this GL.EXTExtension glInstance, IndexPointerType type, int stride, int count, IntPtr pointer)
        {
            var pointer_vptr = (void*)pointer;
            glInstance.IndexPointerEXT(type, stride, count, pointer_vptr);
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void IndexPointerEXT<T1>(this GL.EXTExtension glInstance, IndexPointerType type, int stride, int count, ReadOnlySpan<T1> pointer)
            where T1 : unmanaged
        {
            fixed (void* pointer_ptr = pointer) // SpanOrArrayLayer
            {
                glInstance.IndexPointerEXT(type, stride, count, pointer_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void IndexPointerEXT<T1>(this GL.EXTExtension glInstance, IndexPointerType type, int stride, int count, T1[] pointer)
            where T1 : unmanaged
        {
            fixed (void* pointer_ptr = pointer) // SpanOrArrayLayer
            {
                glInstance.IndexPointerEXT(type, stride, count, pointer_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void IndexPointerEXT<T1>(this GL.EXTExtension glInstance, IndexPointerType type, int stride, int count, in T1 pointer)
            where T1 : unmanaged
        {
            fixed (void* pointer_ptr = &pointer) // RefInsteadOfPointerLayer
            {
                glInstance.IndexPointerEXT(type, stride, count, pointer_ptr);
            }
        }

        // NormalPointerEXT overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.VoidPtrToIntPtrOverloader
        public static unsafe void NormalPointerEXT(this GL.EXTExtension glInstance, NormalPointerType type, int stride, int count, IntPtr pointer)
        {
            var pointer_vptr = (void*)pointer;
            glInstance.NormalPointerEXT(type, stride, count, pointer_vptr);
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void NormalPointerEXT<T1>(this GL.EXTExtension glInstance, NormalPointerType type, int stride, int count, ReadOnlySpan<T1> pointer)
            where T1 : unmanaged
        {
            fixed (void* pointer_ptr = pointer) // SpanOrArrayLayer
            {
                glInstance.NormalPointerEXT(type, stride, count, pointer_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void NormalPointerEXT<T1>(this GL.EXTExtension glInstance, NormalPointerType type, int stride, int count, T1[] pointer)
            where T1 : unmanaged
        {
            fixed (void* pointer_ptr = pointer) // SpanOrArrayLayer
            {
                glInstance.NormalPointerEXT(type, stride, count, pointer_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void NormalPointerEXT<T1>(this GL.EXTExtension glInstance, NormalPointerType type, int stride, int count, in T1 pointer)
            where T1 : unmanaged
        {
            fixed (void* pointer_ptr = &pointer) // RefInsteadOfPointerLayer
            {
                glInstance.NormalPointerEXT(type, stride, count, pointer_ptr);
            }
        }

        // TexCoordPointerEXT overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.VoidPtrToIntPtrOverloader
        public static unsafe void TexCoordPointerEXT(this GL.EXTExtension glInstance, int size, TexCoordPointerType type, int stride, int count, IntPtr pointer)
        {
            var pointer_vptr = (void*)pointer;
            glInstance.TexCoordPointerEXT(size, type, stride, count, pointer_vptr);
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void TexCoordPointerEXT<T1>(this GL.EXTExtension glInstance, int size, TexCoordPointerType type, int stride, int count, ReadOnlySpan<T1> pointer)
            where T1 : unmanaged
        {
            fixed (void* pointer_ptr = pointer) // SpanOrArrayLayer
            {
                glInstance.TexCoordPointerEXT(size, type, stride, count, pointer_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void TexCoordPointerEXT<T1>(this GL.EXTExtension glInstance, int size, TexCoordPointerType type, int stride, int count, T1[] pointer)
            where T1 : unmanaged
        {
            fixed (void* pointer_ptr = pointer) // SpanOrArrayLayer
            {
                glInstance.TexCoordPointerEXT(size, type, stride, count, pointer_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void TexCoordPointerEXT<T1>(this GL.EXTExtension glInstance, int size, TexCoordPointerType type, int stride, int count, in T1 pointer)
            where T1 : unmanaged
        {
            fixed (void* pointer_ptr = &pointer) // RefInsteadOfPointerLayer
            {
                glInstance.TexCoordPointerEXT(size, type, stride, count, pointer_ptr);
            }
        }

        // VertexPointerEXT overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.VoidPtrToIntPtrOverloader
        public static unsafe void VertexPointerEXT(this GL.EXTExtension glInstance, int size, VertexPointerType type, int stride, int count, IntPtr pointer)
        {
            var pointer_vptr = (void*)pointer;
            glInstance.VertexPointerEXT(size, type, stride, count, pointer_vptr);
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void VertexPointerEXT<T1>(this GL.EXTExtension glInstance, int size, VertexPointerType type, int stride, int count, ReadOnlySpan<T1> pointer)
            where T1 : unmanaged
        {
            fixed (void* pointer_ptr = pointer) // SpanOrArrayLayer
            {
                glInstance.VertexPointerEXT(size, type, stride, count, pointer_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void VertexPointerEXT<T1>(this GL.EXTExtension glInstance, int size, VertexPointerType type, int stride, int count, T1[] pointer)
            where T1 : unmanaged
        {
            fixed (void* pointer_ptr = pointer) // SpanOrArrayLayer
            {
                glInstance.VertexPointerEXT(size, type, stride, count, pointer_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void VertexPointerEXT<T1>(this GL.EXTExtension glInstance, int size, VertexPointerType type, int stride, int count, in T1 pointer)
            where T1 : unmanaged
        {
            fixed (void* pointer_ptr = &pointer) // RefInsteadOfPointerLayer
            {
                glInstance.VertexPointerEXT(size, type, stride, count, pointer_ptr);
            }
        }

        // VertexAttribL1dvEXT overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void VertexAttribL1dvEXT(this GL.EXTExtension glInstance, uint index, ReadOnlySpan<double> v)
        {
            fixed (double* v_ptr = v) // SpanOrArrayLayer
            {
                glInstance.VertexAttribL1dvEXT(index, v_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void VertexAttribL1dvEXT(this GL.EXTExtension glInstance, uint index, double[] v)
        {
            fixed (double* v_ptr = v) // SpanOrArrayLayer
            {
                glInstance.VertexAttribL1dvEXT(index, v_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void VertexAttribL1dvEXT(this GL.EXTExtension glInstance, uint index, in double v)
        {
            fixed (double* v_ptr = &v) // RefInsteadOfPointerLayer
            {
                glInstance.VertexAttribL1dvEXT(index, v_ptr);
            }
        }

        // VertexAttribL2dvEXT overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void VertexAttribL2dvEXT(this GL.EXTExtension glInstance, uint index, ReadOnlySpan<double> v)
        {
            fixed (double* v_ptr = v) // SpanOrArrayLayer
            {
                glInstance.VertexAttribL2dvEXT(index, v_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void VertexAttribL2dvEXT(this GL.EXTExtension glInstance, uint index, double[] v)
        {
            fixed (double* v_ptr = v) // SpanOrArrayLayer
            {
                glInstance.VertexAttribL2dvEXT(index, v_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void VertexAttribL2dvEXT(this GL.EXTExtension glInstance, uint index, in double v)
        {
            fixed (double* v_ptr = &v) // RefInsteadOfPointerLayer
            {
                glInstance.VertexAttribL2dvEXT(index, v_ptr);
            }
        }

        // VertexAttribL3dvEXT overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void VertexAttribL3dvEXT(this GL.EXTExtension glInstance, uint index, ReadOnlySpan<double> v)
        {
            fixed (double* v_ptr = v) // SpanOrArrayLayer
            {
                glInstance.VertexAttribL3dvEXT(index, v_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void VertexAttribL3dvEXT(this GL.EXTExtension glInstance, uint index, double[] v)
        {
            fixed (double* v_ptr = v) // SpanOrArrayLayer
            {
                glInstance.VertexAttribL3dvEXT(index, v_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void VertexAttribL3dvEXT(this GL.EXTExtension glInstance, uint index, in double v)
        {
            fixed (double* v_ptr = &v) // RefInsteadOfPointerLayer
            {
                glInstance.VertexAttribL3dvEXT(index, v_ptr);
            }
        }

        // VertexAttribL4dvEXT overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void VertexAttribL4dvEXT(this GL.EXTExtension glInstance, uint index, ReadOnlySpan<double> v)
        {
            fixed (double* v_ptr = v) // SpanOrArrayLayer
            {
                glInstance.VertexAttribL4dvEXT(index, v_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void VertexAttribL4dvEXT(this GL.EXTExtension glInstance, uint index, double[] v)
        {
            fixed (double* v_ptr = v) // SpanOrArrayLayer
            {
                glInstance.VertexAttribL4dvEXT(index, v_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void VertexAttribL4dvEXT(this GL.EXTExtension glInstance, uint index, in double v)
        {
            fixed (double* v_ptr = &v) // RefInsteadOfPointerLayer
            {
                glInstance.VertexAttribL4dvEXT(index, v_ptr);
            }
        }

        // VertexAttribLPointerEXT overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.VoidPtrToIntPtrOverloader
        public static unsafe void VertexAttribLPointerEXT(this GL.EXTExtension glInstance, uint index, int size, VertexAttribLType type, int stride, IntPtr pointer)
        {
            var pointer_vptr = (void*)pointer;
            glInstance.VertexAttribLPointerEXT(index, size, type, stride, pointer_vptr);
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void VertexAttribLPointerEXT<T1>(this GL.EXTExtension glInstance, uint index, VertexAttribLType type, int stride, ReadOnlySpan<T1> pointer)
            where T1 : unmanaged
        {
            var size = (int)(pointer.Length * sizeof(T1));
            fixed (void* pointer_ptr = pointer) // SpanOrArrayLayer
            {
                glInstance.VertexAttribLPointerEXT(index, size, type, stride, pointer_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void VertexAttribLPointerEXT<T1>(this GL.EXTExtension glInstance, uint index, VertexAttribLType type, int stride, T1[] pointer)
            where T1 : unmanaged
        {
            var size = (int)(pointer.Length * sizeof(T1));
            fixed (void* pointer_ptr = pointer) // SpanOrArrayLayer
            {
                glInstance.VertexAttribLPointerEXT(index, size, type, stride, pointer_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void VertexAttribLPointerEXT<T1>(this GL.EXTExtension glInstance, uint index, int size, VertexAttribLType type, int stride, in T1 pointer)
            where T1 : unmanaged
        {
            fixed (void* pointer_ptr = &pointer) // RefInsteadOfPointerLayer
            {
                glInstance.VertexAttribLPointerEXT(index, size, type, stride, pointer_ptr);
            }
        }

        // GetVertexAttribLdvEXT overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetVertexAttribLdvEXT(this GL.EXTExtension glInstance, uint index, VertexAttribEnum pname, Span<double> parameters)
        {
            fixed (double* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.GetVertexAttribLdvEXT(index, pname, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetVertexAttribLdvEXT(this GL.EXTExtension glInstance, uint index, VertexAttribEnum pname, double[] parameters)
        {
            fixed (double* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.GetVertexAttribLdvEXT(index, pname, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void GetVertexAttribLdvEXT(this GL.EXTExtension glInstance, uint index, VertexAttribEnum pname, ref double parameters)
        {
            fixed (double* parameters_ptr = &parameters) // RefInsteadOfPointerLayer
            {
                glInstance.GetVertexAttribLdvEXT(index, pname, parameters_ptr);
            }
        }

        // SetInvariantEXT overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.VoidPtrToIntPtrOverloader
        public static unsafe void SetInvariantEXT(this GL.EXTExtension glInstance, uint id, ScalarType type, IntPtr addr)
        {
            var addr_vptr = (void*)addr;
            glInstance.SetInvariantEXT(id, type, addr_vptr);
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void SetInvariantEXT<T1>(this GL.EXTExtension glInstance, uint id, ScalarType type, ReadOnlySpan<T1> addr)
            where T1 : unmanaged
        {
            fixed (void* addr_ptr = addr) // SpanOrArrayLayer
            {
                glInstance.SetInvariantEXT(id, type, addr_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void SetInvariantEXT<T1>(this GL.EXTExtension glInstance, uint id, ScalarType type, T1[] addr)
            where T1 : unmanaged
        {
            fixed (void* addr_ptr = addr) // SpanOrArrayLayer
            {
                glInstance.SetInvariantEXT(id, type, addr_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void SetInvariantEXT<T1>(this GL.EXTExtension glInstance, uint id, ScalarType type, in T1 addr)
            where T1 : unmanaged
        {
            fixed (void* addr_ptr = &addr) // RefInsteadOfPointerLayer
            {
                glInstance.SetInvariantEXT(id, type, addr_ptr);
            }
        }

        // SetLocalConstantEXT overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.VoidPtrToIntPtrOverloader
        public static unsafe void SetLocalConstantEXT(this GL.EXTExtension glInstance, uint id, ScalarType type, IntPtr addr)
        {
            var addr_vptr = (void*)addr;
            glInstance.SetLocalConstantEXT(id, type, addr_vptr);
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void SetLocalConstantEXT<T1>(this GL.EXTExtension glInstance, uint id, ScalarType type, ReadOnlySpan<T1> addr)
            where T1 : unmanaged
        {
            fixed (void* addr_ptr = addr) // SpanOrArrayLayer
            {
                glInstance.SetLocalConstantEXT(id, type, addr_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void SetLocalConstantEXT<T1>(this GL.EXTExtension glInstance, uint id, ScalarType type, T1[] addr)
            where T1 : unmanaged
        {
            fixed (void* addr_ptr = addr) // SpanOrArrayLayer
            {
                glInstance.SetLocalConstantEXT(id, type, addr_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void SetLocalConstantEXT<T1>(this GL.EXTExtension glInstance, uint id, ScalarType type, in T1 addr)
            where T1 : unmanaged
        {
            fixed (void* addr_ptr = &addr) // RefInsteadOfPointerLayer
            {
                glInstance.SetLocalConstantEXT(id, type, addr_ptr);
            }
        }

        // VariantbvEXT overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void VariantbvEXT(this GL.EXTExtension glInstance, uint id, ReadOnlySpan<sbyte> addr)
        {
            fixed (sbyte* addr_ptr = addr) // SpanOrArrayLayer
            {
                glInstance.VariantbvEXT(id, addr_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void VariantbvEXT(this GL.EXTExtension glInstance, uint id, sbyte[] addr)
        {
            fixed (sbyte* addr_ptr = addr) // SpanOrArrayLayer
            {
                glInstance.VariantbvEXT(id, addr_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void VariantbvEXT(this GL.EXTExtension glInstance, uint id, in sbyte addr)
        {
            fixed (sbyte* addr_ptr = &addr) // RefInsteadOfPointerLayer
            {
                glInstance.VariantbvEXT(id, addr_ptr);
            }
        }

        // VariantsvEXT overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void VariantsvEXT(this GL.EXTExtension glInstance, uint id, ReadOnlySpan<short> addr)
        {
            fixed (short* addr_ptr = addr) // SpanOrArrayLayer
            {
                glInstance.VariantsvEXT(id, addr_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void VariantsvEXT(this GL.EXTExtension glInstance, uint id, short[] addr)
        {
            fixed (short* addr_ptr = addr) // SpanOrArrayLayer
            {
                glInstance.VariantsvEXT(id, addr_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void VariantsvEXT(this GL.EXTExtension glInstance, uint id, in short addr)
        {
            fixed (short* addr_ptr = &addr) // RefInsteadOfPointerLayer
            {
                glInstance.VariantsvEXT(id, addr_ptr);
            }
        }

        // VariantivEXT overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void VariantivEXT(this GL.EXTExtension glInstance, uint id, ReadOnlySpan<int> addr)
        {
            fixed (int* addr_ptr = addr) // SpanOrArrayLayer
            {
                glInstance.VariantivEXT(id, addr_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void VariantivEXT(this GL.EXTExtension glInstance, uint id, int[] addr)
        {
            fixed (int* addr_ptr = addr) // SpanOrArrayLayer
            {
                glInstance.VariantivEXT(id, addr_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void VariantivEXT(this GL.EXTExtension glInstance, uint id, in int addr)
        {
            fixed (int* addr_ptr = &addr) // RefInsteadOfPointerLayer
            {
                glInstance.VariantivEXT(id, addr_ptr);
            }
        }

        // VariantfvEXT overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void VariantfvEXT(this GL.EXTExtension glInstance, uint id, ReadOnlySpan<float> addr)
        {
            fixed (float* addr_ptr = addr) // SpanOrArrayLayer
            {
                glInstance.VariantfvEXT(id, addr_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void VariantfvEXT(this GL.EXTExtension glInstance, uint id, float[] addr)
        {
            fixed (float* addr_ptr = addr) // SpanOrArrayLayer
            {
                glInstance.VariantfvEXT(id, addr_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void VariantfvEXT(this GL.EXTExtension glInstance, uint id, in float addr)
        {
            fixed (float* addr_ptr = &addr) // RefInsteadOfPointerLayer
            {
                glInstance.VariantfvEXT(id, addr_ptr);
            }
        }

        // VariantdvEXT overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void VariantdvEXT(this GL.EXTExtension glInstance, uint id, ReadOnlySpan<double> addr)
        {
            fixed (double* addr_ptr = addr) // SpanOrArrayLayer
            {
                glInstance.VariantdvEXT(id, addr_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void VariantdvEXT(this GL.EXTExtension glInstance, uint id, double[] addr)
        {
            fixed (double* addr_ptr = addr) // SpanOrArrayLayer
            {
                glInstance.VariantdvEXT(id, addr_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void VariantdvEXT(this GL.EXTExtension glInstance, uint id, in double addr)
        {
            fixed (double* addr_ptr = &addr) // RefInsteadOfPointerLayer
            {
                glInstance.VariantdvEXT(id, addr_ptr);
            }
        }

        // VariantubvEXT overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void VariantubvEXT(this GL.EXTExtension glInstance, uint id, ReadOnlySpan<byte> addr)
        {
            fixed (byte* addr_ptr = addr) // SpanOrArrayLayer
            {
                glInstance.VariantubvEXT(id, addr_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void VariantubvEXT(this GL.EXTExtension glInstance, uint id, byte[] addr)
        {
            fixed (byte* addr_ptr = addr) // SpanOrArrayLayer
            {
                glInstance.VariantubvEXT(id, addr_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void VariantubvEXT(this GL.EXTExtension glInstance, uint id, in byte addr)
        {
            fixed (byte* addr_ptr = &addr) // RefInsteadOfPointerLayer
            {
                glInstance.VariantubvEXT(id, addr_ptr);
            }
        }

        // VariantusvEXT overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void VariantusvEXT(this GL.EXTExtension glInstance, uint id, ReadOnlySpan<ushort> addr)
        {
            fixed (ushort* addr_ptr = addr) // SpanOrArrayLayer
            {
                glInstance.VariantusvEXT(id, addr_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void VariantusvEXT(this GL.EXTExtension glInstance, uint id, ushort[] addr)
        {
            fixed (ushort* addr_ptr = addr) // SpanOrArrayLayer
            {
                glInstance.VariantusvEXT(id, addr_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void VariantusvEXT(this GL.EXTExtension glInstance, uint id, in ushort addr)
        {
            fixed (ushort* addr_ptr = &addr) // RefInsteadOfPointerLayer
            {
                glInstance.VariantusvEXT(id, addr_ptr);
            }
        }

        // VariantuivEXT overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void VariantuivEXT(this GL.EXTExtension glInstance, uint id, ReadOnlySpan<uint> addr)
        {
            fixed (uint* addr_ptr = addr) // SpanOrArrayLayer
            {
                glInstance.VariantuivEXT(id, addr_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void VariantuivEXT(this GL.EXTExtension glInstance, uint id, uint[] addr)
        {
            fixed (uint* addr_ptr = addr) // SpanOrArrayLayer
            {
                glInstance.VariantuivEXT(id, addr_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void VariantuivEXT(this GL.EXTExtension glInstance, uint id, in uint addr)
        {
            fixed (uint* addr_ptr = &addr) // RefInsteadOfPointerLayer
            {
                glInstance.VariantuivEXT(id, addr_ptr);
            }
        }

        // VariantPointerEXT overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.VoidPtrToIntPtrOverloader
        public static unsafe void VariantPointerEXT(this GL.EXTExtension glInstance, uint id, ScalarType type, uint stride, IntPtr addr)
        {
            var addr_vptr = (void*)addr;
            glInstance.VariantPointerEXT(id, type, stride, addr_vptr);
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void VariantPointerEXT<T1>(this GL.EXTExtension glInstance, uint id, ScalarType type, uint stride, ReadOnlySpan<T1> addr)
            where T1 : unmanaged
        {
            fixed (void* addr_ptr = addr) // SpanOrArrayLayer
            {
                glInstance.VariantPointerEXT(id, type, stride, addr_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void VariantPointerEXT<T1>(this GL.EXTExtension glInstance, uint id, ScalarType type, uint stride, T1[] addr)
            where T1 : unmanaged
        {
            fixed (void* addr_ptr = addr) // SpanOrArrayLayer
            {
                glInstance.VariantPointerEXT(id, type, stride, addr_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void VariantPointerEXT<T1>(this GL.EXTExtension glInstance, uint id, ScalarType type, uint stride, in T1 addr)
            where T1 : unmanaged
        {
            fixed (void* addr_ptr = &addr) // RefInsteadOfPointerLayer
            {
                glInstance.VariantPointerEXT(id, type, stride, addr_ptr);
            }
        }

        // GetVariantBooleanvEXT overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetVariantBooleanvEXT(this GL.EXTExtension glInstance, uint id, GetVariantValueEXT value, Span<byte> data)
        {
            fixed (byte* data_ptr = data) // SpanOrArrayLayer
            {
                glInstance.GetVariantBooleanvEXT(id, value, data_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetVariantBooleanvEXT(this GL.EXTExtension glInstance, uint id, GetVariantValueEXT value, byte[] data)
        {
            fixed (byte* data_ptr = data) // SpanOrArrayLayer
            {
                glInstance.GetVariantBooleanvEXT(id, value, data_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void GetVariantBooleanvEXT(this GL.EXTExtension glInstance, uint id, GetVariantValueEXT value, ref byte data)
        {
            fixed (byte* data_ptr = &data) // RefInsteadOfPointerLayer
            {
                glInstance.GetVariantBooleanvEXT(id, value, data_ptr);
            }
        }

        // GetVariantIntegervEXT overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetVariantIntegervEXT(this GL.EXTExtension glInstance, uint id, GetVariantValueEXT value, Span<int> data)
        {
            fixed (int* data_ptr = data) // SpanOrArrayLayer
            {
                glInstance.GetVariantIntegervEXT(id, value, data_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetVariantIntegervEXT(this GL.EXTExtension glInstance, uint id, GetVariantValueEXT value, int[] data)
        {
            fixed (int* data_ptr = data) // SpanOrArrayLayer
            {
                glInstance.GetVariantIntegervEXT(id, value, data_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void GetVariantIntegervEXT(this GL.EXTExtension glInstance, uint id, GetVariantValueEXT value, ref int data)
        {
            fixed (int* data_ptr = &data) // RefInsteadOfPointerLayer
            {
                glInstance.GetVariantIntegervEXT(id, value, data_ptr);
            }
        }

        // GetVariantFloatvEXT overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetVariantFloatvEXT(this GL.EXTExtension glInstance, uint id, GetVariantValueEXT value, Span<float> data)
        {
            fixed (float* data_ptr = data) // SpanOrArrayLayer
            {
                glInstance.GetVariantFloatvEXT(id, value, data_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetVariantFloatvEXT(this GL.EXTExtension glInstance, uint id, GetVariantValueEXT value, float[] data)
        {
            fixed (float* data_ptr = data) // SpanOrArrayLayer
            {
                glInstance.GetVariantFloatvEXT(id, value, data_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void GetVariantFloatvEXT(this GL.EXTExtension glInstance, uint id, GetVariantValueEXT value, ref float data)
        {
            fixed (float* data_ptr = &data) // RefInsteadOfPointerLayer
            {
                glInstance.GetVariantFloatvEXT(id, value, data_ptr);
            }
        }

        // GetInvariantBooleanvEXT overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetInvariantBooleanvEXT(this GL.EXTExtension glInstance, uint id, GetVariantValueEXT value, Span<byte> data)
        {
            fixed (byte* data_ptr = data) // SpanOrArrayLayer
            {
                glInstance.GetInvariantBooleanvEXT(id, value, data_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetInvariantBooleanvEXT(this GL.EXTExtension glInstance, uint id, GetVariantValueEXT value, byte[] data)
        {
            fixed (byte* data_ptr = data) // SpanOrArrayLayer
            {
                glInstance.GetInvariantBooleanvEXT(id, value, data_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void GetInvariantBooleanvEXT(this GL.EXTExtension glInstance, uint id, GetVariantValueEXT value, ref byte data)
        {
            fixed (byte* data_ptr = &data) // RefInsteadOfPointerLayer
            {
                glInstance.GetInvariantBooleanvEXT(id, value, data_ptr);
            }
        }

        // GetInvariantIntegervEXT overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetInvariantIntegervEXT(this GL.EXTExtension glInstance, uint id, GetVariantValueEXT value, Span<int> data)
        {
            fixed (int* data_ptr = data) // SpanOrArrayLayer
            {
                glInstance.GetInvariantIntegervEXT(id, value, data_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetInvariantIntegervEXT(this GL.EXTExtension glInstance, uint id, GetVariantValueEXT value, int[] data)
        {
            fixed (int* data_ptr = data) // SpanOrArrayLayer
            {
                glInstance.GetInvariantIntegervEXT(id, value, data_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void GetInvariantIntegervEXT(this GL.EXTExtension glInstance, uint id, GetVariantValueEXT value, ref int data)
        {
            fixed (int* data_ptr = &data) // RefInsteadOfPointerLayer
            {
                glInstance.GetInvariantIntegervEXT(id, value, data_ptr);
            }
        }

        // GetInvariantFloatvEXT overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetInvariantFloatvEXT(this GL.EXTExtension glInstance, uint id, GetVariantValueEXT value, Span<float> data)
        {
            fixed (float* data_ptr = data) // SpanOrArrayLayer
            {
                glInstance.GetInvariantFloatvEXT(id, value, data_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetInvariantFloatvEXT(this GL.EXTExtension glInstance, uint id, GetVariantValueEXT value, float[] data)
        {
            fixed (float* data_ptr = data) // SpanOrArrayLayer
            {
                glInstance.GetInvariantFloatvEXT(id, value, data_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void GetInvariantFloatvEXT(this GL.EXTExtension glInstance, uint id, GetVariantValueEXT value, ref float data)
        {
            fixed (float* data_ptr = &data) // RefInsteadOfPointerLayer
            {
                glInstance.GetInvariantFloatvEXT(id, value, data_ptr);
            }
        }

        // GetLocalConstantBooleanvEXT overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetLocalConstantBooleanvEXT(this GL.EXTExtension glInstance, uint id, GetVariantValueEXT value, Span<byte> data)
        {
            fixed (byte* data_ptr = data) // SpanOrArrayLayer
            {
                glInstance.GetLocalConstantBooleanvEXT(id, value, data_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetLocalConstantBooleanvEXT(this GL.EXTExtension glInstance, uint id, GetVariantValueEXT value, byte[] data)
        {
            fixed (byte* data_ptr = data) // SpanOrArrayLayer
            {
                glInstance.GetLocalConstantBooleanvEXT(id, value, data_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void GetLocalConstantBooleanvEXT(this GL.EXTExtension glInstance, uint id, GetVariantValueEXT value, ref byte data)
        {
            fixed (byte* data_ptr = &data) // RefInsteadOfPointerLayer
            {
                glInstance.GetLocalConstantBooleanvEXT(id, value, data_ptr);
            }
        }

        // GetLocalConstantIntegervEXT overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetLocalConstantIntegervEXT(this GL.EXTExtension glInstance, uint id, GetVariantValueEXT value, Span<int> data)
        {
            fixed (int* data_ptr = data) // SpanOrArrayLayer
            {
                glInstance.GetLocalConstantIntegervEXT(id, value, data_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetLocalConstantIntegervEXT(this GL.EXTExtension glInstance, uint id, GetVariantValueEXT value, int[] data)
        {
            fixed (int* data_ptr = data) // SpanOrArrayLayer
            {
                glInstance.GetLocalConstantIntegervEXT(id, value, data_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void GetLocalConstantIntegervEXT(this GL.EXTExtension glInstance, uint id, GetVariantValueEXT value, ref int data)
        {
            fixed (int* data_ptr = &data) // RefInsteadOfPointerLayer
            {
                glInstance.GetLocalConstantIntegervEXT(id, value, data_ptr);
            }
        }

        // GetLocalConstantFloatvEXT overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetLocalConstantFloatvEXT(this GL.EXTExtension glInstance, uint id, GetVariantValueEXT value, Span<float> data)
        {
            fixed (float* data_ptr = data) // SpanOrArrayLayer
            {
                glInstance.GetLocalConstantFloatvEXT(id, value, data_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetLocalConstantFloatvEXT(this GL.EXTExtension glInstance, uint id, GetVariantValueEXT value, float[] data)
        {
            fixed (float* data_ptr = data) // SpanOrArrayLayer
            {
                glInstance.GetLocalConstantFloatvEXT(id, value, data_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void GetLocalConstantFloatvEXT(this GL.EXTExtension glInstance, uint id, GetVariantValueEXT value, ref float data)
        {
            fixed (float* data_ptr = &data) // RefInsteadOfPointerLayer
            {
                glInstance.GetLocalConstantFloatvEXT(id, value, data_ptr);
            }
        }

        // VertexWeightfvEXT overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void VertexWeightfvEXT(this GL.EXTExtension glInstance, ReadOnlySpan<float> weight)
        {
            fixed (float* weight_ptr = weight) // SpanOrArrayLayer
            {
                glInstance.VertexWeightfvEXT(weight_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void VertexWeightfvEXT(this GL.EXTExtension glInstance, float[] weight)
        {
            fixed (float* weight_ptr = weight) // SpanOrArrayLayer
            {
                glInstance.VertexWeightfvEXT(weight_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void VertexWeightfvEXT(this GL.EXTExtension glInstance, in float weight)
        {
            fixed (float* weight_ptr = &weight) // RefInsteadOfPointerLayer
            {
                glInstance.VertexWeightfvEXT(weight_ptr);
            }
        }

        // VertexWeightPointerEXT overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.VoidPtrToIntPtrOverloader
        public static unsafe void VertexWeightPointerEXT(this GL.EXTExtension glInstance, int size, VertexWeightPointerTypeEXT type, int stride, IntPtr pointer)
        {
            var pointer_vptr = (void*)pointer;
            glInstance.VertexWeightPointerEXT(size, type, stride, pointer_vptr);
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void VertexWeightPointerEXT<T1>(this GL.EXTExtension glInstance, int size, VertexWeightPointerTypeEXT type, int stride, ReadOnlySpan<T1> pointer)
            where T1 : unmanaged
        {
            fixed (void* pointer_ptr = pointer) // SpanOrArrayLayer
            {
                glInstance.VertexWeightPointerEXT(size, type, stride, pointer_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void VertexWeightPointerEXT<T1>(this GL.EXTExtension glInstance, int size, VertexWeightPointerTypeEXT type, int stride, T1[] pointer)
            where T1 : unmanaged
        {
            fixed (void* pointer_ptr = pointer) // SpanOrArrayLayer
            {
                glInstance.VertexWeightPointerEXT(size, type, stride, pointer_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void VertexWeightPointerEXT<T1>(this GL.EXTExtension glInstance, int size, VertexWeightPointerTypeEXT type, int stride, in T1 pointer)
            where T1 : unmanaged
        {
            fixed (void* pointer_ptr = &pointer) // RefInsteadOfPointerLayer
            {
                glInstance.VertexWeightPointerEXT(size, type, stride, pointer_ptr);
            }
        }

        // WindowRectanglesEXT overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void WindowRectanglesEXT(this GL.EXTExtension glInstance, GLEnum mode, int count, ReadOnlySpan<int> box)
        {
            fixed (int* box_ptr = box) // SpanOrArrayLayer
            {
                glInstance.WindowRectanglesEXT(mode, count, box_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void WindowRectanglesEXT(this GL.EXTExtension glInstance, GLEnum mode, int count, int[] box)
        {
            fixed (int* box_ptr = box) // SpanOrArrayLayer
            {
                glInstance.WindowRectanglesEXT(mode, count, box_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void WindowRectanglesEXT(this GL.EXTExtension glInstance, GLEnum mode, int count, in int box)
        {
            fixed (int* box_ptr = &box) // RefInsteadOfPointerLayer
            {
                glInstance.WindowRectanglesEXT(mode, count, box_ptr);
            }
        }
    }

#pragma warning restore IDE1006 // Naming Styles
}
