// This file is auto generated, do not edit.
using System;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;

namespace Gwi.OpenGL.GL4
{
#pragma warning disable IDE1006 // Naming Styles

    public static class SGIXOverloads
    {
        // FinishAsyncSGIX overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe int FinishAsyncSGIX(this GL.SGIXExtension glInstance, Span<uint> markerp)
        {
            int returnValue;
            fixed (uint* markerp_ptr = markerp) // SpanOrArrayLayer
            {
                returnValue = glInstance.FinishAsyncSGIX(markerp_ptr);
            }
            return returnValue;
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe int FinishAsyncSGIX(this GL.SGIXExtension glInstance, uint[] markerp)
        {
            int returnValue;
            fixed (uint* markerp_ptr = markerp) // SpanOrArrayLayer
            {
                returnValue = glInstance.FinishAsyncSGIX(markerp_ptr);
            }
            return returnValue;
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe int FinishAsyncSGIX(this GL.SGIXExtension glInstance, ref uint markerp)
        {
            int returnValue;
            fixed (uint* markerp_ptr = &markerp) // RefInsteadOfPointerLayer
            {
                returnValue = glInstance.FinishAsyncSGIX(markerp_ptr);
            }
            return returnValue;
        }

        // PollAsyncSGIX overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe int PollAsyncSGIX(this GL.SGIXExtension glInstance, Span<uint> markerp)
        {
            int returnValue;
            fixed (uint* markerp_ptr = markerp) // SpanOrArrayLayer
            {
                returnValue = glInstance.PollAsyncSGIX(markerp_ptr);
            }
            return returnValue;
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe int PollAsyncSGIX(this GL.SGIXExtension glInstance, uint[] markerp)
        {
            int returnValue;
            fixed (uint* markerp_ptr = markerp) // SpanOrArrayLayer
            {
                returnValue = glInstance.PollAsyncSGIX(markerp_ptr);
            }
            return returnValue;
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe int PollAsyncSGIX(this GL.SGIXExtension glInstance, ref uint markerp)
        {
            int returnValue;
            fixed (uint* markerp_ptr = &markerp) // RefInsteadOfPointerLayer
            {
                returnValue = glInstance.PollAsyncSGIX(markerp_ptr);
            }
            return returnValue;
        }

        // FragmentLightfvSGIX overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void FragmentLightfvSGIX(this GL.SGIXExtension glInstance, FragmentLightNameSGIX light, FragmentLightParameterSGIX pname, ReadOnlySpan<float> parameters)
        {
            fixed (float* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.FragmentLightfvSGIX(light, pname, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void FragmentLightfvSGIX(this GL.SGIXExtension glInstance, FragmentLightNameSGIX light, FragmentLightParameterSGIX pname, float[] parameters)
        {
            fixed (float* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.FragmentLightfvSGIX(light, pname, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void FragmentLightfvSGIX(this GL.SGIXExtension glInstance, FragmentLightNameSGIX light, FragmentLightParameterSGIX pname, in float parameters)
        {
            fixed (float* parameters_ptr = &parameters) // RefInsteadOfPointerLayer
            {
                glInstance.FragmentLightfvSGIX(light, pname, parameters_ptr);
            }
        }

        // FragmentLightivSGIX overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void FragmentLightivSGIX(this GL.SGIXExtension glInstance, FragmentLightNameSGIX light, FragmentLightParameterSGIX pname, ReadOnlySpan<int> parameters)
        {
            fixed (int* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.FragmentLightivSGIX(light, pname, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void FragmentLightivSGIX(this GL.SGIXExtension glInstance, FragmentLightNameSGIX light, FragmentLightParameterSGIX pname, int[] parameters)
        {
            fixed (int* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.FragmentLightivSGIX(light, pname, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void FragmentLightivSGIX(this GL.SGIXExtension glInstance, FragmentLightNameSGIX light, FragmentLightParameterSGIX pname, in int parameters)
        {
            fixed (int* parameters_ptr = &parameters) // RefInsteadOfPointerLayer
            {
                glInstance.FragmentLightivSGIX(light, pname, parameters_ptr);
            }
        }

        // FragmentLightModelfvSGIX overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void FragmentLightModelfvSGIX(this GL.SGIXExtension glInstance, FragmentLightModelParameterSGIX pname, ReadOnlySpan<float> parameters)
        {
            fixed (float* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.FragmentLightModelfvSGIX(pname, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void FragmentLightModelfvSGIX(this GL.SGIXExtension glInstance, FragmentLightModelParameterSGIX pname, float[] parameters)
        {
            fixed (float* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.FragmentLightModelfvSGIX(pname, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void FragmentLightModelfvSGIX(this GL.SGIXExtension glInstance, FragmentLightModelParameterSGIX pname, in float parameters)
        {
            fixed (float* parameters_ptr = &parameters) // RefInsteadOfPointerLayer
            {
                glInstance.FragmentLightModelfvSGIX(pname, parameters_ptr);
            }
        }

        // FragmentLightModelivSGIX overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void FragmentLightModelivSGIX(this GL.SGIXExtension glInstance, FragmentLightModelParameterSGIX pname, ReadOnlySpan<int> parameters)
        {
            fixed (int* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.FragmentLightModelivSGIX(pname, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void FragmentLightModelivSGIX(this GL.SGIXExtension glInstance, FragmentLightModelParameterSGIX pname, int[] parameters)
        {
            fixed (int* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.FragmentLightModelivSGIX(pname, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void FragmentLightModelivSGIX(this GL.SGIXExtension glInstance, FragmentLightModelParameterSGIX pname, in int parameters)
        {
            fixed (int* parameters_ptr = &parameters) // RefInsteadOfPointerLayer
            {
                glInstance.FragmentLightModelivSGIX(pname, parameters_ptr);
            }
        }

        // FragmentMaterialfvSGIX overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void FragmentMaterialfvSGIX(this GL.SGIXExtension glInstance, MaterialFace face, MaterialParameter pname, ReadOnlySpan<float> parameters)
        {
            fixed (float* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.FragmentMaterialfvSGIX(face, pname, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void FragmentMaterialfvSGIX(this GL.SGIXExtension glInstance, MaterialFace face, MaterialParameter pname, float[] parameters)
        {
            fixed (float* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.FragmentMaterialfvSGIX(face, pname, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void FragmentMaterialfvSGIX(this GL.SGIXExtension glInstance, MaterialFace face, MaterialParameter pname, in float parameters)
        {
            fixed (float* parameters_ptr = &parameters) // RefInsteadOfPointerLayer
            {
                glInstance.FragmentMaterialfvSGIX(face, pname, parameters_ptr);
            }
        }

        // FragmentMaterialivSGIX overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void FragmentMaterialivSGIX(this GL.SGIXExtension glInstance, MaterialFace face, MaterialParameter pname, ReadOnlySpan<int> parameters)
        {
            fixed (int* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.FragmentMaterialivSGIX(face, pname, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void FragmentMaterialivSGIX(this GL.SGIXExtension glInstance, MaterialFace face, MaterialParameter pname, int[] parameters)
        {
            fixed (int* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.FragmentMaterialivSGIX(face, pname, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void FragmentMaterialivSGIX(this GL.SGIXExtension glInstance, MaterialFace face, MaterialParameter pname, in int parameters)
        {
            fixed (int* parameters_ptr = &parameters) // RefInsteadOfPointerLayer
            {
                glInstance.FragmentMaterialivSGIX(face, pname, parameters_ptr);
            }
        }

        // GetFragmentLightfvSGIX overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetFragmentLightfvSGIX(this GL.SGIXExtension glInstance, FragmentLightNameSGIX light, FragmentLightParameterSGIX pname, Span<float> parameters)
        {
            fixed (float* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.GetFragmentLightfvSGIX(light, pname, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetFragmentLightfvSGIX(this GL.SGIXExtension glInstance, FragmentLightNameSGIX light, FragmentLightParameterSGIX pname, float[] parameters)
        {
            fixed (float* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.GetFragmentLightfvSGIX(light, pname, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void GetFragmentLightfvSGIX(this GL.SGIXExtension glInstance, FragmentLightNameSGIX light, FragmentLightParameterSGIX pname, ref float parameters)
        {
            fixed (float* parameters_ptr = &parameters) // RefInsteadOfPointerLayer
            {
                glInstance.GetFragmentLightfvSGIX(light, pname, parameters_ptr);
            }
        }

        // GetFragmentLightivSGIX overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetFragmentLightivSGIX(this GL.SGIXExtension glInstance, FragmentLightNameSGIX light, FragmentLightParameterSGIX pname, Span<int> parameters)
        {
            fixed (int* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.GetFragmentLightivSGIX(light, pname, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetFragmentLightivSGIX(this GL.SGIXExtension glInstance, FragmentLightNameSGIX light, FragmentLightParameterSGIX pname, int[] parameters)
        {
            fixed (int* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.GetFragmentLightivSGIX(light, pname, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void GetFragmentLightivSGIX(this GL.SGIXExtension glInstance, FragmentLightNameSGIX light, FragmentLightParameterSGIX pname, ref int parameters)
        {
            fixed (int* parameters_ptr = &parameters) // RefInsteadOfPointerLayer
            {
                glInstance.GetFragmentLightivSGIX(light, pname, parameters_ptr);
            }
        }

        // GetFragmentMaterialfvSGIX overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetFragmentMaterialfvSGIX(this GL.SGIXExtension glInstance, MaterialFace face, MaterialParameter pname, Span<float> parameters)
        {
            fixed (float* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.GetFragmentMaterialfvSGIX(face, pname, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetFragmentMaterialfvSGIX(this GL.SGIXExtension glInstance, MaterialFace face, MaterialParameter pname, float[] parameters)
        {
            fixed (float* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.GetFragmentMaterialfvSGIX(face, pname, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void GetFragmentMaterialfvSGIX(this GL.SGIXExtension glInstance, MaterialFace face, MaterialParameter pname, ref float parameters)
        {
            fixed (float* parameters_ptr = &parameters) // RefInsteadOfPointerLayer
            {
                glInstance.GetFragmentMaterialfvSGIX(face, pname, parameters_ptr);
            }
        }

        // GetFragmentMaterialivSGIX overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetFragmentMaterialivSGIX(this GL.SGIXExtension glInstance, MaterialFace face, MaterialParameter pname, Span<int> parameters)
        {
            fixed (int* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.GetFragmentMaterialivSGIX(face, pname, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetFragmentMaterialivSGIX(this GL.SGIXExtension glInstance, MaterialFace face, MaterialParameter pname, int[] parameters)
        {
            fixed (int* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.GetFragmentMaterialivSGIX(face, pname, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void GetFragmentMaterialivSGIX(this GL.SGIXExtension glInstance, MaterialFace face, MaterialParameter pname, ref int parameters)
        {
            fixed (int* parameters_ptr = &parameters) // RefInsteadOfPointerLayer
            {
                glInstance.GetFragmentMaterialivSGIX(face, pname, parameters_ptr);
            }
        }

        // IglooInterfaceSGIX overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.VoidPtrToIntPtrOverloader
        public static unsafe void IglooInterfaceSGIX(this GL.SGIXExtension glInstance, GLEnum pname, IntPtr parameters)
        {
            var parameters_vptr = (void*)parameters;
            glInstance.IglooInterfaceSGIX(pname, parameters_vptr);
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void IglooInterfaceSGIX<T1>(this GL.SGIXExtension glInstance, GLEnum pname, ReadOnlySpan<T1> parameters)
            where T1 : unmanaged
        {
            fixed (void* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.IglooInterfaceSGIX(pname, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void IglooInterfaceSGIX<T1>(this GL.SGIXExtension glInstance, GLEnum pname, T1[] parameters)
            where T1 : unmanaged
        {
            fixed (void* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.IglooInterfaceSGIX(pname, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void IglooInterfaceSGIX<T1>(this GL.SGIXExtension glInstance, GLEnum pname, in T1 parameters)
            where T1 : unmanaged
        {
            fixed (void* parameters_ptr = &parameters) // RefInsteadOfPointerLayer
            {
                glInstance.IglooInterfaceSGIX(pname, parameters_ptr);
            }
        }

        // InstrumentsBufferSGIX overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void InstrumentsBufferSGIX(this GL.SGIXExtension glInstance, Span<int> buffer)
        {
            var size = (int)(buffer.Length);
            fixed (int* buffer_ptr = buffer) // SpanOrArrayLayer
            {
                glInstance.InstrumentsBufferSGIX(size, buffer_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void InstrumentsBufferSGIX(this GL.SGIXExtension glInstance, int[] buffer)
        {
            var size = (int)(buffer.Length);
            fixed (int* buffer_ptr = buffer) // SpanOrArrayLayer
            {
                glInstance.InstrumentsBufferSGIX(size, buffer_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void InstrumentsBufferSGIX(this GL.SGIXExtension glInstance, int size, ref int buffer)
        {
            fixed (int* buffer_ptr = &buffer) // RefInsteadOfPointerLayer
            {
                glInstance.InstrumentsBufferSGIX(size, buffer_ptr);
            }
        }

        // PollInstrumentsSGIX overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe int PollInstrumentsSGIX(this GL.SGIXExtension glInstance, Span<int> marker_p)
        {
            int returnValue;
            fixed (int* marker_p_ptr = marker_p) // SpanOrArrayLayer
            {
                returnValue = glInstance.PollInstrumentsSGIX(marker_p_ptr);
            }
            return returnValue;
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe int PollInstrumentsSGIX(this GL.SGIXExtension glInstance, int[] marker_p)
        {
            int returnValue;
            fixed (int* marker_p_ptr = marker_p) // SpanOrArrayLayer
            {
                returnValue = glInstance.PollInstrumentsSGIX(marker_p_ptr);
            }
            return returnValue;
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe int PollInstrumentsSGIX(this GL.SGIXExtension glInstance, ref int marker_p)
        {
            int returnValue;
            fixed (int* marker_p_ptr = &marker_p) // RefInsteadOfPointerLayer
            {
                returnValue = glInstance.PollInstrumentsSGIX(marker_p_ptr);
            }
            return returnValue;
        }

        // GetListParameterfvSGIX overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetListParameterfvSGIX(this GL.SGIXExtension glInstance, uint list, ListParameterName pname, Span<float> parameters)
        {
            fixed (float* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.GetListParameterfvSGIX(list, pname, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetListParameterfvSGIX(this GL.SGIXExtension glInstance, uint list, ListParameterName pname, float[] parameters)
        {
            fixed (float* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.GetListParameterfvSGIX(list, pname, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void GetListParameterfvSGIX(this GL.SGIXExtension glInstance, uint list, ListParameterName pname, ref float parameters)
        {
            fixed (float* parameters_ptr = &parameters) // RefInsteadOfPointerLayer
            {
                glInstance.GetListParameterfvSGIX(list, pname, parameters_ptr);
            }
        }

        // GetListParameterivSGIX overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetListParameterivSGIX(this GL.SGIXExtension glInstance, uint list, ListParameterName pname, Span<int> parameters)
        {
            fixed (int* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.GetListParameterivSGIX(list, pname, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetListParameterivSGIX(this GL.SGIXExtension glInstance, uint list, ListParameterName pname, int[] parameters)
        {
            fixed (int* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.GetListParameterivSGIX(list, pname, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void GetListParameterivSGIX(this GL.SGIXExtension glInstance, uint list, ListParameterName pname, ref int parameters)
        {
            fixed (int* parameters_ptr = &parameters) // RefInsteadOfPointerLayer
            {
                glInstance.GetListParameterivSGIX(list, pname, parameters_ptr);
            }
        }

        // ListParameterfvSGIX overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void ListParameterfvSGIX(this GL.SGIXExtension glInstance, uint list, ListParameterName pname, ReadOnlySpan<float> parameters)
        {
            fixed (float* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.ListParameterfvSGIX(list, pname, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void ListParameterfvSGIX(this GL.SGIXExtension glInstance, uint list, ListParameterName pname, float[] parameters)
        {
            fixed (float* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.ListParameterfvSGIX(list, pname, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void ListParameterfvSGIX(this GL.SGIXExtension glInstance, uint list, ListParameterName pname, in float parameters)
        {
            fixed (float* parameters_ptr = &parameters) // RefInsteadOfPointerLayer
            {
                glInstance.ListParameterfvSGIX(list, pname, parameters_ptr);
            }
        }

        // ListParameterivSGIX overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void ListParameterivSGIX(this GL.SGIXExtension glInstance, uint list, ListParameterName pname, ReadOnlySpan<int> parameters)
        {
            fixed (int* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.ListParameterivSGIX(list, pname, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void ListParameterivSGIX(this GL.SGIXExtension glInstance, uint list, ListParameterName pname, int[] parameters)
        {
            fixed (int* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.ListParameterivSGIX(list, pname, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void ListParameterivSGIX(this GL.SGIXExtension glInstance, uint list, ListParameterName pname, in int parameters)
        {
            fixed (int* parameters_ptr = &parameters) // RefInsteadOfPointerLayer
            {
                glInstance.ListParameterivSGIX(list, pname, parameters_ptr);
            }
        }

        // DeformationMap3dSGIX overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void DeformationMap3dSGIX(this GL.SGIXExtension glInstance, FfdTargetSGIX target, double u1, double u2, int ustride, int uorder, double v1, double v2, int vstride, int vorder, double w1, double w2, int wstride, int worder, ReadOnlySpan<double> points)
        {
            fixed (double* points_ptr = points) // SpanOrArrayLayer
            {
                glInstance.DeformationMap3dSGIX(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, w1, w2, wstride, worder, points_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void DeformationMap3dSGIX(this GL.SGIXExtension glInstance, FfdTargetSGIX target, double u1, double u2, int ustride, int uorder, double v1, double v2, int vstride, int vorder, double w1, double w2, int wstride, int worder, double[] points)
        {
            fixed (double* points_ptr = points) // SpanOrArrayLayer
            {
                glInstance.DeformationMap3dSGIX(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, w1, w2, wstride, worder, points_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void DeformationMap3dSGIX(this GL.SGIXExtension glInstance, FfdTargetSGIX target, double u1, double u2, int ustride, int uorder, double v1, double v2, int vstride, int vorder, double w1, double w2, int wstride, int worder, in double points)
        {
            fixed (double* points_ptr = &points) // RefInsteadOfPointerLayer
            {
                glInstance.DeformationMap3dSGIX(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, w1, w2, wstride, worder, points_ptr);
            }
        }

        // DeformationMap3fSGIX overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void DeformationMap3fSGIX(this GL.SGIXExtension glInstance, FfdTargetSGIX target, float u1, float u2, int ustride, int uorder, float v1, float v2, int vstride, int vorder, float w1, float w2, int wstride, int worder, ReadOnlySpan<float> points)
        {
            fixed (float* points_ptr = points) // SpanOrArrayLayer
            {
                glInstance.DeformationMap3fSGIX(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, w1, w2, wstride, worder, points_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void DeformationMap3fSGIX(this GL.SGIXExtension glInstance, FfdTargetSGIX target, float u1, float u2, int ustride, int uorder, float v1, float v2, int vstride, int vorder, float w1, float w2, int wstride, int worder, float[] points)
        {
            fixed (float* points_ptr = points) // SpanOrArrayLayer
            {
                glInstance.DeformationMap3fSGIX(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, w1, w2, wstride, worder, points_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void DeformationMap3fSGIX(this GL.SGIXExtension glInstance, FfdTargetSGIX target, float u1, float u2, int ustride, int uorder, float v1, float v2, int vstride, int vorder, float w1, float w2, int wstride, int worder, in float points)
        {
            fixed (float* points_ptr = &points) // RefInsteadOfPointerLayer
            {
                glInstance.DeformationMap3fSGIX(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, w1, w2, wstride, worder, points_ptr);
            }
        }

        // ReferencePlaneSGIX overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void ReferencePlaneSGIX(this GL.SGIXExtension glInstance, ReadOnlySpan<double> equation)
        {
            fixed (double* equation_ptr = equation) // SpanOrArrayLayer
            {
                glInstance.ReferencePlaneSGIX(equation_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void ReferencePlaneSGIX(this GL.SGIXExtension glInstance, double[] equation)
        {
            fixed (double* equation_ptr = equation) // SpanOrArrayLayer
            {
                glInstance.ReferencePlaneSGIX(equation_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void ReferencePlaneSGIX(this GL.SGIXExtension glInstance, in double equation)
        {
            fixed (double* equation_ptr = &equation) // RefInsteadOfPointerLayer
            {
                glInstance.ReferencePlaneSGIX(equation_ptr);
            }
        }

        // SpriteParameterfvSGIX overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void SpriteParameterfvSGIX(this GL.SGIXExtension glInstance, SpriteParameterNameSGIX pname, ReadOnlySpan<float> parameters)
        {
            fixed (float* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.SpriteParameterfvSGIX(pname, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void SpriteParameterfvSGIX(this GL.SGIXExtension glInstance, SpriteParameterNameSGIX pname, float[] parameters)
        {
            fixed (float* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.SpriteParameterfvSGIX(pname, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void SpriteParameterfvSGIX(this GL.SGIXExtension glInstance, SpriteParameterNameSGIX pname, in float parameters)
        {
            fixed (float* parameters_ptr = &parameters) // RefInsteadOfPointerLayer
            {
                glInstance.SpriteParameterfvSGIX(pname, parameters_ptr);
            }
        }

        // SpriteParameterivSGIX overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void SpriteParameterivSGIX(this GL.SGIXExtension glInstance, SpriteParameterNameSGIX pname, ReadOnlySpan<int> parameters)
        {
            fixed (int* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.SpriteParameterivSGIX(pname, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void SpriteParameterivSGIX(this GL.SGIXExtension glInstance, SpriteParameterNameSGIX pname, int[] parameters)
        {
            fixed (int* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.SpriteParameterivSGIX(pname, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void SpriteParameterivSGIX(this GL.SGIXExtension glInstance, SpriteParameterNameSGIX pname, in int parameters)
        {
            fixed (int* parameters_ptr = &parameters) // RefInsteadOfPointerLayer
            {
                glInstance.SpriteParameterivSGIX(pname, parameters_ptr);
            }
        }
    }

#pragma warning restore IDE1006 // Naming Styles
}
