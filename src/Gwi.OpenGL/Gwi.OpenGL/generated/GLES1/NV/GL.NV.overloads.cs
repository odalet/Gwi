// This file is auto generated, do not edit.
using System;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;

namespace Gwi.OpenGL.GLES1
{
#pragma warning disable IDE1006 // Naming Styles

    public static class NVOverloads
    {
        // DeleteFencesNV overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void DeleteFencesNV(this GL.NVExtension glInstance, ReadOnlySpan<uint> fences)
        {
            var n = (int)(fences.Length);
            fixed (uint* fences_ptr = fences) // SpanOrArrayLayer
            {
                glInstance.DeleteFencesNV(n, fences_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void DeleteFencesNV(this GL.NVExtension glInstance, uint[] fences)
        {
            var n = (int)(fences.Length);
            fixed (uint* fences_ptr = fences) // SpanOrArrayLayer
            {
                glInstance.DeleteFencesNV(n, fences_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void DeleteFencesNV(this GL.NVExtension glInstance, int n, in uint fences)
        {
            fixed (uint* fences_ptr = &fences) // RefInsteadOfPointerLayer
            {
                glInstance.DeleteFencesNV(n, fences_ptr);
            }
        }

        // GenFencesNV overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GenFencesNV(this GL.NVExtension glInstance, Span<uint> fences)
        {
            var n = (int)(fences.Length);
            fixed (uint* fences_ptr = fences) // SpanOrArrayLayer
            {
                glInstance.GenFencesNV(n, fences_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GenFencesNV(this GL.NVExtension glInstance, uint[] fences)
        {
            var n = (int)(fences.Length);
            fixed (uint* fences_ptr = fences) // SpanOrArrayLayer
            {
                glInstance.GenFencesNV(n, fences_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void GenFencesNV(this GL.NVExtension glInstance, int n, ref uint fences)
        {
            fixed (uint* fences_ptr = &fences) // RefInsteadOfPointerLayer
            {
                glInstance.GenFencesNV(n, fences_ptr);
            }
        }

        // GetFenceivNV overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetFenceivNV(this GL.NVExtension glInstance, uint fence, FenceParameterNameNV pname, Span<int> parameters)
        {
            fixed (int* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.GetFenceivNV(fence, pname, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetFenceivNV(this GL.NVExtension glInstance, uint fence, FenceParameterNameNV pname, int[] parameters)
        {
            fixed (int* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.GetFenceivNV(fence, pname, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void GetFenceivNV(this GL.NVExtension glInstance, uint fence, FenceParameterNameNV pname, ref int parameters)
        {
            fixed (int* parameters_ptr = &parameters) // RefInsteadOfPointerLayer
            {
                glInstance.GetFenceivNV(fence, pname, parameters_ptr);
            }
        }
    }

#pragma warning restore IDE1006 // Naming Styles
}
