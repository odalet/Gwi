// This file is auto generated, do not edit.
using System;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;

namespace Gwi.OpenGL.GLES1
{
#pragma warning disable IDE1006 // Naming Styles

    public static class GLOverloads
    {
        // ClipPlanef overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void ClipPlanef(this GL glInstance, ClipPlaneName p, ReadOnlySpan<float> eqn)
        {
            fixed (float* eqn_ptr = eqn) // SpanOrArrayLayer
            {
                glInstance.ClipPlanef(p, eqn_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void ClipPlanef(this GL glInstance, ClipPlaneName p, float[] eqn)
        {
            fixed (float* eqn_ptr = eqn) // SpanOrArrayLayer
            {
                glInstance.ClipPlanef(p, eqn_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void ClipPlanef(this GL glInstance, ClipPlaneName p, in float eqn)
        {
            fixed (float* eqn_ptr = &eqn) // RefInsteadOfPointerLayer
            {
                glInstance.ClipPlanef(p, eqn_ptr);
            }
        }

        // Fogfv overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void Fogf(this GL glInstance, FogParameter pname, ReadOnlySpan<float> parameters)
        {
            fixed (float* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.Fogfv(pname, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void Fogf(this GL glInstance, FogParameter pname, float[] parameters)
        {
            fixed (float* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.Fogfv(pname, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void Fogf(this GL glInstance, FogParameter pname, in float parameters)
        {
            fixed (float* parameters_ptr = &parameters) // RefInsteadOfPointerLayer
            {
                glInstance.Fogfv(pname, parameters_ptr);
            }
        }

        // GetClipPlanef overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetClipPlanef(this GL glInstance, ClipPlaneName plane, Span<float> equation)
        {
            fixed (float* equation_ptr = equation) // SpanOrArrayLayer
            {
                glInstance.GetClipPlanef(plane, equation_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetClipPlanef(this GL glInstance, ClipPlaneName plane, float[] equation)
        {
            fixed (float* equation_ptr = equation) // SpanOrArrayLayer
            {
                glInstance.GetClipPlanef(plane, equation_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void GetClipPlanef(this GL glInstance, ClipPlaneName plane, ref float equation)
        {
            fixed (float* equation_ptr = &equation) // RefInsteadOfPointerLayer
            {
                glInstance.GetClipPlanef(plane, equation_ptr);
            }
        }

        // GetFloatv overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetFloat(this GL glInstance, GetPName pname, Span<float> data)
        {
            fixed (float* data_ptr = data) // SpanOrArrayLayer
            {
                glInstance.GetFloatv(pname, data_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetFloat(this GL glInstance, GetPName pname, float[] data)
        {
            fixed (float* data_ptr = data) // SpanOrArrayLayer
            {
                glInstance.GetFloatv(pname, data_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void GetFloat(this GL glInstance, GetPName pname, ref float data)
        {
            fixed (float* data_ptr = &data) // RefInsteadOfPointerLayer
            {
                glInstance.GetFloatv(pname, data_ptr);
            }
        }

        // GetLightfv overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetLightf(this GL glInstance, LightName light, LightParameter pname, Span<float> parameters)
        {
            fixed (float* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.GetLightfv(light, pname, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetLightf(this GL glInstance, LightName light, LightParameter pname, float[] parameters)
        {
            fixed (float* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.GetLightfv(light, pname, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void GetLightf(this GL glInstance, LightName light, LightParameter pname, ref float parameters)
        {
            fixed (float* parameters_ptr = &parameters) // RefInsteadOfPointerLayer
            {
                glInstance.GetLightfv(light, pname, parameters_ptr);
            }
        }

        // GetMaterialfv overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetMaterialf(this GL glInstance, MaterialFace face, MaterialParameter pname, Span<float> parameters)
        {
            fixed (float* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.GetMaterialfv(face, pname, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetMaterialf(this GL glInstance, MaterialFace face, MaterialParameter pname, float[] parameters)
        {
            fixed (float* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.GetMaterialfv(face, pname, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void GetMaterialf(this GL glInstance, MaterialFace face, MaterialParameter pname, ref float parameters)
        {
            fixed (float* parameters_ptr = &parameters) // RefInsteadOfPointerLayer
            {
                glInstance.GetMaterialfv(face, pname, parameters_ptr);
            }
        }

        // GetTexEnvfv overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetTexEnvf(this GL glInstance, TextureEnvTarget target, TextureEnvParameter pname, Span<float> parameters)
        {
            fixed (float* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.GetTexEnvfv(target, pname, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetTexEnvf(this GL glInstance, TextureEnvTarget target, TextureEnvParameter pname, float[] parameters)
        {
            fixed (float* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.GetTexEnvfv(target, pname, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void GetTexEnvf(this GL glInstance, TextureEnvTarget target, TextureEnvParameter pname, ref float parameters)
        {
            fixed (float* parameters_ptr = &parameters) // RefInsteadOfPointerLayer
            {
                glInstance.GetTexEnvfv(target, pname, parameters_ptr);
            }
        }

        // GetTexParameterfv overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetTexParameterf(this GL glInstance, TextureTarget target, GetTextureParameter pname, Span<float> parameters)
        {
            fixed (float* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.GetTexParameterfv(target, pname, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetTexParameterf(this GL glInstance, TextureTarget target, GetTextureParameter pname, float[] parameters)
        {
            fixed (float* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.GetTexParameterfv(target, pname, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void GetTexParameterf(this GL glInstance, TextureTarget target, GetTextureParameter pname, ref float parameters)
        {
            fixed (float* parameters_ptr = &parameters) // RefInsteadOfPointerLayer
            {
                glInstance.GetTexParameterfv(target, pname, parameters_ptr);
            }
        }

        // LightModelfv overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void LightModelf(this GL glInstance, LightModelParameter pname, ReadOnlySpan<float> parameters)
        {
            fixed (float* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.LightModelfv(pname, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void LightModelf(this GL glInstance, LightModelParameter pname, float[] parameters)
        {
            fixed (float* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.LightModelfv(pname, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void LightModelf(this GL glInstance, LightModelParameter pname, in float parameters)
        {
            fixed (float* parameters_ptr = &parameters) // RefInsteadOfPointerLayer
            {
                glInstance.LightModelfv(pname, parameters_ptr);
            }
        }

        // Lightfv overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void Lightf(this GL glInstance, LightName light, LightParameter pname, ReadOnlySpan<float> parameters)
        {
            fixed (float* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.Lightfv(light, pname, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void Lightf(this GL glInstance, LightName light, LightParameter pname, float[] parameters)
        {
            fixed (float* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.Lightfv(light, pname, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void Lightf(this GL glInstance, LightName light, LightParameter pname, in float parameters)
        {
            fixed (float* parameters_ptr = &parameters) // RefInsteadOfPointerLayer
            {
                glInstance.Lightfv(light, pname, parameters_ptr);
            }
        }

        // LoadMatrixf overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void LoadMatrixf(this GL glInstance, ReadOnlySpan<float> m)
        {
            fixed (float* m_ptr = m) // SpanOrArrayLayer
            {
                glInstance.LoadMatrixf(m_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void LoadMatrixf(this GL glInstance, float[] m)
        {
            fixed (float* m_ptr = m) // SpanOrArrayLayer
            {
                glInstance.LoadMatrixf(m_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void LoadMatrixf(this GL glInstance, in float m)
        {
            fixed (float* m_ptr = &m) // RefInsteadOfPointerLayer
            {
                glInstance.LoadMatrixf(m_ptr);
            }
        }

        // Materialfv overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void Materialf(this GL glInstance, MaterialFace face, MaterialParameter pname, ReadOnlySpan<float> parameters)
        {
            fixed (float* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.Materialfv(face, pname, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void Materialf(this GL glInstance, MaterialFace face, MaterialParameter pname, float[] parameters)
        {
            fixed (float* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.Materialfv(face, pname, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void Materialf(this GL glInstance, MaterialFace face, MaterialParameter pname, in float parameters)
        {
            fixed (float* parameters_ptr = &parameters) // RefInsteadOfPointerLayer
            {
                glInstance.Materialfv(face, pname, parameters_ptr);
            }
        }

        // MultMatrixf overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void MultMatrixf(this GL glInstance, ReadOnlySpan<float> m)
        {
            fixed (float* m_ptr = m) // SpanOrArrayLayer
            {
                glInstance.MultMatrixf(m_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void MultMatrixf(this GL glInstance, float[] m)
        {
            fixed (float* m_ptr = m) // SpanOrArrayLayer
            {
                glInstance.MultMatrixf(m_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void MultMatrixf(this GL glInstance, in float m)
        {
            fixed (float* m_ptr = &m) // RefInsteadOfPointerLayer
            {
                glInstance.MultMatrixf(m_ptr);
            }
        }

        // PointParameterfv overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void PointParameterf(this GL glInstance, PointParameterNameARB pname, ReadOnlySpan<float> parameters)
        {
            fixed (float* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.PointParameterfv(pname, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void PointParameterf(this GL glInstance, PointParameterNameARB pname, float[] parameters)
        {
            fixed (float* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.PointParameterfv(pname, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void PointParameterf(this GL glInstance, PointParameterNameARB pname, in float parameters)
        {
            fixed (float* parameters_ptr = &parameters) // RefInsteadOfPointerLayer
            {
                glInstance.PointParameterfv(pname, parameters_ptr);
            }
        }

        // TexEnvfv overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void TexEnvf(this GL glInstance, TextureEnvTarget target, TextureEnvParameter pname, ReadOnlySpan<float> parameters)
        {
            fixed (float* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.TexEnvfv(target, pname, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void TexEnvf(this GL glInstance, TextureEnvTarget target, TextureEnvParameter pname, float[] parameters)
        {
            fixed (float* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.TexEnvfv(target, pname, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void TexEnvf(this GL glInstance, TextureEnvTarget target, TextureEnvParameter pname, in float parameters)
        {
            fixed (float* parameters_ptr = &parameters) // RefInsteadOfPointerLayer
            {
                glInstance.TexEnvfv(target, pname, parameters_ptr);
            }
        }

        // TexParameterfv overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void TexParameterf(this GL glInstance, TextureTarget target, TextureParameterName pname, ReadOnlySpan<float> parameters)
        {
            fixed (float* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.TexParameterfv(target, pname, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void TexParameterf(this GL glInstance, TextureTarget target, TextureParameterName pname, float[] parameters)
        {
            fixed (float* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.TexParameterfv(target, pname, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void TexParameterf(this GL glInstance, TextureTarget target, TextureParameterName pname, in float parameters)
        {
            fixed (float* parameters_ptr = &parameters) // RefInsteadOfPointerLayer
            {
                glInstance.TexParameterfv(target, pname, parameters_ptr);
            }
        }

        // BufferData overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.VoidPtrToIntPtrOverloader
        public static unsafe void BufferData(this GL glInstance, BufferTargetARB target, nint size, IntPtr data, BufferUsageARB usage)
        {
            var data_vptr = (void*)data;
            glInstance.BufferData(target, size, data_vptr, usage);
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void BufferData<T1>(this GL glInstance, BufferTargetARB target, ReadOnlySpan<T1> data, BufferUsageARB usage)
            where T1 : unmanaged
        {
            var size = (nint)(data.Length * sizeof(T1));
            fixed (void* data_ptr = data) // SpanOrArrayLayer
            {
                glInstance.BufferData(target, size, data_ptr, usage);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void BufferData<T1>(this GL glInstance, BufferTargetARB target, T1[] data, BufferUsageARB usage)
            where T1 : unmanaged
        {
            var size = (nint)(data.Length * sizeof(T1));
            fixed (void* data_ptr = data) // SpanOrArrayLayer
            {
                glInstance.BufferData(target, size, data_ptr, usage);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void BufferData<T1>(this GL glInstance, BufferTargetARB target, nint size, in T1 data, BufferUsageARB usage)
            where T1 : unmanaged
        {
            fixed (void* data_ptr = &data) // RefInsteadOfPointerLayer
            {
                glInstance.BufferData(target, size, data_ptr, usage);
            }
        }

        // BufferSubData overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.VoidPtrToIntPtrOverloader
        public static unsafe void BufferSubData(this GL glInstance, BufferTargetARB target, IntPtr offset, nint size, IntPtr data)
        {
            var data_vptr = (void*)data;
            glInstance.BufferSubData(target, offset, size, data_vptr);
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void BufferSubData<T1>(this GL glInstance, BufferTargetARB target, IntPtr offset, ReadOnlySpan<T1> data)
            where T1 : unmanaged
        {
            var size = (nint)(data.Length * sizeof(T1));
            fixed (void* data_ptr = data) // SpanOrArrayLayer
            {
                glInstance.BufferSubData(target, offset, size, data_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void BufferSubData<T1>(this GL glInstance, BufferTargetARB target, IntPtr offset, T1[] data)
            where T1 : unmanaged
        {
            var size = (nint)(data.Length * sizeof(T1));
            fixed (void* data_ptr = data) // SpanOrArrayLayer
            {
                glInstance.BufferSubData(target, offset, size, data_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void BufferSubData<T1>(this GL glInstance, BufferTargetARB target, IntPtr offset, nint size, in T1 data)
            where T1 : unmanaged
        {
            fixed (void* data_ptr = &data) // RefInsteadOfPointerLayer
            {
                glInstance.BufferSubData(target, offset, size, data_ptr);
            }
        }

        // ClipPlanex overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void ClipPlanex(this GL glInstance, ClipPlaneName plane, ReadOnlySpan<int> equation)
        {
            fixed (int* equation_ptr = equation) // SpanOrArrayLayer
            {
                glInstance.ClipPlanex(plane, equation_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void ClipPlanex(this GL glInstance, ClipPlaneName plane, int[] equation)
        {
            fixed (int* equation_ptr = equation) // SpanOrArrayLayer
            {
                glInstance.ClipPlanex(plane, equation_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void ClipPlanex(this GL glInstance, ClipPlaneName plane, in int equation)
        {
            fixed (int* equation_ptr = &equation) // RefInsteadOfPointerLayer
            {
                glInstance.ClipPlanex(plane, equation_ptr);
            }
        }

        // Color4ub overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.TrimNameOverloader
        public static unsafe void Color4(this GL glInstance, byte red, byte green, byte blue, byte alpha) =>
            glInstance.Color4ub(red, green, blue, alpha);

        // ColorMask overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.BoolOverloader
        public static unsafe void ColorMask(this GL glInstance, bool red, bool green, bool blue, bool alpha)
        {
            var red_byte = (byte)(red ? 1 : 0);
            var green_byte = (byte)(green ? 1 : 0);
            var blue_byte = (byte)(blue ? 1 : 0);
            var alpha_byte = (byte)(alpha ? 1 : 0);
            glInstance.ColorMask(red_byte, green_byte, blue_byte, alpha_byte);
        }

        // ColorPointer overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.VoidPtrToIntPtrOverloader
        public static unsafe void ColorPointer(this GL glInstance, int size, ColorPointerType type, int stride, IntPtr pointer)
        {
            var pointer_vptr = (void*)pointer;
            glInstance.ColorPointer(size, type, stride, pointer_vptr);
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void ColorPointer<T1>(this GL glInstance, int size, ColorPointerType type, int stride, ReadOnlySpan<T1> pointer)
            where T1 : unmanaged
        {
            fixed (void* pointer_ptr = pointer) // SpanOrArrayLayer
            {
                glInstance.ColorPointer(size, type, stride, pointer_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void ColorPointer<T1>(this GL glInstance, int size, ColorPointerType type, int stride, T1[] pointer)
            where T1 : unmanaged
        {
            fixed (void* pointer_ptr = pointer) // SpanOrArrayLayer
            {
                glInstance.ColorPointer(size, type, stride, pointer_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void ColorPointer<T1>(this GL glInstance, int size, ColorPointerType type, int stride, in T1 pointer)
            where T1 : unmanaged
        {
            fixed (void* pointer_ptr = &pointer) // RefInsteadOfPointerLayer
            {
                glInstance.ColorPointer(size, type, stride, pointer_ptr);
            }
        }

        // CompressedTexImage2D overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.VoidPtrToIntPtrOverloader
        public static unsafe void CompressedTexImage2D(this GL glInstance, TextureTarget target, int level, InternalFormat internalformat, int width, int height, int border, int imageSize, IntPtr data)
        {
            var data_vptr = (void*)data;
            glInstance.CompressedTexImage2D(target, level, internalformat, width, height, border, imageSize, data_vptr);
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void CompressedTexImage2D<T1>(this GL glInstance, TextureTarget target, int level, InternalFormat internalformat, int width, int height, int border, ReadOnlySpan<T1> data)
            where T1 : unmanaged
        {
            var imageSize = (int)(data.Length * sizeof(T1));
            fixed (void* data_ptr = data) // SpanOrArrayLayer
            {
                glInstance.CompressedTexImage2D(target, level, internalformat, width, height, border, imageSize, data_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void CompressedTexImage2D<T1>(this GL glInstance, TextureTarget target, int level, InternalFormat internalformat, int width, int height, int border, T1[] data)
            where T1 : unmanaged
        {
            var imageSize = (int)(data.Length * sizeof(T1));
            fixed (void* data_ptr = data) // SpanOrArrayLayer
            {
                glInstance.CompressedTexImage2D(target, level, internalformat, width, height, border, imageSize, data_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void CompressedTexImage2D<T1>(this GL glInstance, TextureTarget target, int level, InternalFormat internalformat, int width, int height, int border, int imageSize, in T1 data)
            where T1 : unmanaged
        {
            fixed (void* data_ptr = &data) // RefInsteadOfPointerLayer
            {
                glInstance.CompressedTexImage2D(target, level, internalformat, width, height, border, imageSize, data_ptr);
            }
        }

        // CompressedTexSubImage2D overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.VoidPtrToIntPtrOverloader
        public static unsafe void CompressedTexSubImage2D(this GL glInstance, TextureTarget target, int level, int xoffset, int yoffset, int width, int height, InternalFormat format, int imageSize, IntPtr data)
        {
            var data_vptr = (void*)data;
            glInstance.CompressedTexSubImage2D(target, level, xoffset, yoffset, width, height, format, imageSize, data_vptr);
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void CompressedTexSubImage2D<T1>(this GL glInstance, TextureTarget target, int level, int xoffset, int yoffset, int width, int height, InternalFormat format, ReadOnlySpan<T1> data)
            where T1 : unmanaged
        {
            var imageSize = (int)(data.Length * sizeof(T1));
            fixed (void* data_ptr = data) // SpanOrArrayLayer
            {
                glInstance.CompressedTexSubImage2D(target, level, xoffset, yoffset, width, height, format, imageSize, data_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void CompressedTexSubImage2D<T1>(this GL glInstance, TextureTarget target, int level, int xoffset, int yoffset, int width, int height, InternalFormat format, T1[] data)
            where T1 : unmanaged
        {
            var imageSize = (int)(data.Length * sizeof(T1));
            fixed (void* data_ptr = data) // SpanOrArrayLayer
            {
                glInstance.CompressedTexSubImage2D(target, level, xoffset, yoffset, width, height, format, imageSize, data_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void CompressedTexSubImage2D<T1>(this GL glInstance, TextureTarget target, int level, int xoffset, int yoffset, int width, int height, InternalFormat format, int imageSize, in T1 data)
            where T1 : unmanaged
        {
            fixed (void* data_ptr = &data) // RefInsteadOfPointerLayer
            {
                glInstance.CompressedTexSubImage2D(target, level, xoffset, yoffset, width, height, format, imageSize, data_ptr);
            }
        }

        // DeleteBuffers overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.GenCreateAndDeleteOverloader
        public static unsafe void DeleteBuffer(this GL glInstance, in BufferHandle buffers)
        {
            int n = 1;
            fixed(BufferHandle* buffers_handle = &buffers) // DeleteOverloadLayer
                glInstance.DeleteBuffers(n, buffers_handle);
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void DeleteBuffers(this GL glInstance, ReadOnlySpan<BufferHandle> buffers)
        {
            var n = (int)(buffers.Length);
            fixed (BufferHandle* buffers_ptr = buffers) // SpanOrArrayLayer
            {
                glInstance.DeleteBuffers(n, buffers_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void DeleteBuffers(this GL glInstance, BufferHandle[] buffers)
        {
            var n = (int)(buffers.Length);
            fixed (BufferHandle* buffers_ptr = buffers) // SpanOrArrayLayer
            {
                glInstance.DeleteBuffers(n, buffers_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void DeleteBuffers(this GL glInstance, int n, in BufferHandle buffers)
        {
            fixed (BufferHandle* buffers_ptr = &buffers) // RefInsteadOfPointerLayer
            {
                glInstance.DeleteBuffers(n, buffers_ptr);
            }
        }

        // DeleteTextures overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.GenCreateAndDeleteOverloader
        public static unsafe void DeleteTexture(this GL glInstance, in TextureHandle textures)
        {
            int n = 1;
            fixed(TextureHandle* textures_handle = &textures) // DeleteOverloadLayer
                glInstance.DeleteTextures(n, textures_handle);
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void DeleteTextures(this GL glInstance, ReadOnlySpan<TextureHandle> textures)
        {
            var n = (int)(textures.Length);
            fixed (TextureHandle* textures_ptr = textures) // SpanOrArrayLayer
            {
                glInstance.DeleteTextures(n, textures_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void DeleteTextures(this GL glInstance, TextureHandle[] textures)
        {
            var n = (int)(textures.Length);
            fixed (TextureHandle* textures_ptr = textures) // SpanOrArrayLayer
            {
                glInstance.DeleteTextures(n, textures_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void DeleteTextures(this GL glInstance, int n, in TextureHandle textures)
        {
            fixed (TextureHandle* textures_ptr = &textures) // RefInsteadOfPointerLayer
            {
                glInstance.DeleteTextures(n, textures_ptr);
            }
        }

        // DepthMask overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.BoolOverloader
        public static unsafe void DepthMask(this GL glInstance, bool flag)
        {
            var flag_byte = (byte)(flag ? 1 : 0);
            glInstance.DepthMask(flag_byte);
        }

        // DrawElements overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.PointerToOffsetOverloader
        public static unsafe void DrawElements(this GL glInstance, PrimitiveType mode, int count, DrawElementsType type, nint offset)
        {
            void* indices = (void*)offset;
            glInstance.DrawElements(mode, count, type, indices);
        }

        // Fogxv overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void Fogx(this GL glInstance, FogPName pname, ReadOnlySpan<int> param)
        {
            fixed (int* param_ptr = param) // SpanOrArrayLayer
            {
                glInstance.Fogxv(pname, param_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void Fogx(this GL glInstance, FogPName pname, int[] param)
        {
            fixed (int* param_ptr = param) // SpanOrArrayLayer
            {
                glInstance.Fogxv(pname, param_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void Fogx(this GL glInstance, FogPName pname, in int param)
        {
            fixed (int* param_ptr = &param) // RefInsteadOfPointerLayer
            {
                glInstance.Fogxv(pname, param_ptr);
            }
        }

        // GetBooleanv overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetBoolean(this GL glInstance, GetPName pname, Span<byte> data)
        {
            fixed (byte* data_ptr = data) // SpanOrArrayLayer
            {
                glInstance.GetBooleanv(pname, data_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetBoolean(this GL glInstance, GetPName pname, byte[] data)
        {
            fixed (byte* data_ptr = data) // SpanOrArrayLayer
            {
                glInstance.GetBooleanv(pname, data_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void GetBoolean(this GL glInstance, GetPName pname, ref byte data)
        {
            fixed (byte* data_ptr = &data) // RefInsteadOfPointerLayer
            {
                glInstance.GetBooleanv(pname, data_ptr);
            }
        }

        // GetBufferParameteriv overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetBufferParameteri(this GL glInstance, BufferTargetARB target, BufferPNameARB pname, Span<int> parameters)
        {
            fixed (int* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.GetBufferParameteriv(target, pname, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetBufferParameteri(this GL glInstance, BufferTargetARB target, BufferPNameARB pname, int[] parameters)
        {
            fixed (int* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.GetBufferParameteriv(target, pname, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void GetBufferParameteri(this GL glInstance, BufferTargetARB target, BufferPNameARB pname, ref int parameters)
        {
            fixed (int* parameters_ptr = &parameters) // RefInsteadOfPointerLayer
            {
                glInstance.GetBufferParameteriv(target, pname, parameters_ptr);
            }
        }

        // GetClipPlanex overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetClipPlanex(this GL glInstance, ClipPlaneName plane, Span<int> equation)
        {
            fixed (int* equation_ptr = equation) // SpanOrArrayLayer
            {
                glInstance.GetClipPlanex(plane, equation_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetClipPlanex(this GL glInstance, ClipPlaneName plane, int[] equation)
        {
            fixed (int* equation_ptr = equation) // SpanOrArrayLayer
            {
                glInstance.GetClipPlanex(plane, equation_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void GetClipPlanex(this GL glInstance, ClipPlaneName plane, ref int equation)
        {
            fixed (int* equation_ptr = &equation) // RefInsteadOfPointerLayer
            {
                glInstance.GetClipPlanex(plane, equation_ptr);
            }
        }

        // GenBuffers overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.OutToReturnOverloader
        public static unsafe BufferHandle GenBuffer(this GL glInstance)
        {
            BufferHandle buffers;
            int n = 1;
            Unsafe.SkipInit(out buffers);
            // FIXME: This could be a problem for the overloads that take an out parameter
            // as this parameter could *potentially* move while inside of this function
            // which would mean that the new value never gets written to the out parameter.
            // Making for a nasty bug.
            // The reason we don't use a fixed expression here is because of the "single out parameter to return value" overloading step
            // that will make it so this tries to fix a local variable which is not allowed in C# for some reason.
            // If you have problems with this we would really appreciate you opening an issue at https://github.com/opentk/opentk
            // - 2021-05-18
            BufferHandle* buffers_handle = (BufferHandle*)Unsafe.AsPointer(ref buffers);
            glInstance.GenBuffers(n, buffers_handle);
            return buffers;
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.GenCreateAndDeleteOverloader
        public static unsafe void GenBuffer(this GL glInstance, out BufferHandle buffers)
        {
            int n = 1;
            Unsafe.SkipInit(out buffers);
            // FIXME: This could be a problem for the overloads that take an out parameter
            // as this parameter could *potentially* move while inside of this function
            // which would mean that the new value never gets written to the out parameter.
            // Making for a nasty bug.
            // The reason we don't use a fixed expression here is because of the "single out parameter to return value" overloading step
            // that will make it so this tries to fix a local variable which is not allowed in C# for some reason.
            // If you have problems with this we would really appreciate you opening an issue at https://github.com/opentk/opentk
            // - 2021-05-18
            BufferHandle* buffers_handle = (BufferHandle*)Unsafe.AsPointer(ref buffers);
            glInstance.GenBuffers(n, buffers_handle);
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GenBuffers(this GL glInstance, Span<BufferHandle> buffers)
        {
            var n = (int)(buffers.Length);
            fixed (BufferHandle* buffers_ptr = buffers) // SpanOrArrayLayer
            {
                glInstance.GenBuffers(n, buffers_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GenBuffers(this GL glInstance, BufferHandle[] buffers)
        {
            var n = (int)(buffers.Length);
            fixed (BufferHandle* buffers_ptr = buffers) // SpanOrArrayLayer
            {
                glInstance.GenBuffers(n, buffers_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void GenBuffers(this GL glInstance, int n, ref BufferHandle buffers)
        {
            fixed (BufferHandle* buffers_ptr = &buffers) // RefInsteadOfPointerLayer
            {
                glInstance.GenBuffers(n, buffers_ptr);
            }
        }

        // GenTextures overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.OutToReturnOverloader
        public static unsafe TextureHandle GenTexture(this GL glInstance)
        {
            TextureHandle textures;
            int n = 1;
            Unsafe.SkipInit(out textures);
            // FIXME: This could be a problem for the overloads that take an out parameter
            // as this parameter could *potentially* move while inside of this function
            // which would mean that the new value never gets written to the out parameter.
            // Making for a nasty bug.
            // The reason we don't use a fixed expression here is because of the "single out parameter to return value" overloading step
            // that will make it so this tries to fix a local variable which is not allowed in C# for some reason.
            // If you have problems with this we would really appreciate you opening an issue at https://github.com/opentk/opentk
            // - 2021-05-18
            TextureHandle* textures_handle = (TextureHandle*)Unsafe.AsPointer(ref textures);
            glInstance.GenTextures(n, textures_handle);
            return textures;
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.GenCreateAndDeleteOverloader
        public static unsafe void GenTexture(this GL glInstance, out TextureHandle textures)
        {
            int n = 1;
            Unsafe.SkipInit(out textures);
            // FIXME: This could be a problem for the overloads that take an out parameter
            // as this parameter could *potentially* move while inside of this function
            // which would mean that the new value never gets written to the out parameter.
            // Making for a nasty bug.
            // The reason we don't use a fixed expression here is because of the "single out parameter to return value" overloading step
            // that will make it so this tries to fix a local variable which is not allowed in C# for some reason.
            // If you have problems with this we would really appreciate you opening an issue at https://github.com/opentk/opentk
            // - 2021-05-18
            TextureHandle* textures_handle = (TextureHandle*)Unsafe.AsPointer(ref textures);
            glInstance.GenTextures(n, textures_handle);
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GenTextures(this GL glInstance, Span<TextureHandle> textures)
        {
            var n = (int)(textures.Length);
            fixed (TextureHandle* textures_ptr = textures) // SpanOrArrayLayer
            {
                glInstance.GenTextures(n, textures_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GenTextures(this GL glInstance, TextureHandle[] textures)
        {
            var n = (int)(textures.Length);
            fixed (TextureHandle* textures_ptr = textures) // SpanOrArrayLayer
            {
                glInstance.GenTextures(n, textures_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void GenTextures(this GL glInstance, int n, ref TextureHandle textures)
        {
            fixed (TextureHandle* textures_ptr = &textures) // RefInsteadOfPointerLayer
            {
                glInstance.GenTextures(n, textures_ptr);
            }
        }

        // GetFixedv overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void GetFixedv(this GL glInstance, GetPName pname, ref int parameters)
        {
            fixed (int* parameters_ptr = &parameters) // RefInsteadOfPointerLayer
            {
                glInstance.GetFixedv(pname, parameters_ptr);
            }
        }

        // GetIntegerv overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetInteger(this GL glInstance, GetPName pname, Span<int> data)
        {
            fixed (int* data_ptr = data) // SpanOrArrayLayer
            {
                glInstance.GetIntegerv(pname, data_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetInteger(this GL glInstance, GetPName pname, int[] data)
        {
            fixed (int* data_ptr = data) // SpanOrArrayLayer
            {
                glInstance.GetIntegerv(pname, data_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void GetInteger(this GL glInstance, GetPName pname, ref int data)
        {
            fixed (int* data_ptr = &data) // RefInsteadOfPointerLayer
            {
                glInstance.GetIntegerv(pname, data_ptr);
            }
        }

        // GetLightxv overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetLightx(this GL glInstance, LightName light, LightParameter pname, Span<int> parameters)
        {
            fixed (int* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.GetLightxv(light, pname, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetLightx(this GL glInstance, LightName light, LightParameter pname, int[] parameters)
        {
            fixed (int* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.GetLightxv(light, pname, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void GetLightx(this GL glInstance, LightName light, LightParameter pname, ref int parameters)
        {
            fixed (int* parameters_ptr = &parameters) // RefInsteadOfPointerLayer
            {
                glInstance.GetLightxv(light, pname, parameters_ptr);
            }
        }

        // GetMaterialxv overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetMaterialx(this GL glInstance, MaterialFace face, MaterialParameter pname, Span<int> parameters)
        {
            fixed (int* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.GetMaterialxv(face, pname, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetMaterialx(this GL glInstance, MaterialFace face, MaterialParameter pname, int[] parameters)
        {
            fixed (int* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.GetMaterialxv(face, pname, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void GetMaterialx(this GL glInstance, MaterialFace face, MaterialParameter pname, ref int parameters)
        {
            fixed (int* parameters_ptr = &parameters) // RefInsteadOfPointerLayer
            {
                glInstance.GetMaterialxv(face, pname, parameters_ptr);
            }
        }

        // GetPointerv overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.TrimNameOverloader
        public static unsafe void GetPointer(this GL glInstance, GetPointervPName pname, void** parameters) =>
            glInstance.GetPointerv(pname, parameters);

        // GetString_ overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.StringReturnOverloader
        public static unsafe string? GetString(this GL glInstance, StringName name)
        {
            byte* returnValue;
            string? returnValue_str;
            returnValue = glInstance.GetString_(name);
            returnValue_str = Marshaller.PtrToString((nint)returnValue);
            return returnValue_str;
        }

        // GetTexEnviv overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetTexEnvi(this GL glInstance, TextureEnvTarget target, TextureEnvParameter pname, Span<int> parameters)
        {
            fixed (int* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.GetTexEnviv(target, pname, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetTexEnvi(this GL glInstance, TextureEnvTarget target, TextureEnvParameter pname, int[] parameters)
        {
            fixed (int* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.GetTexEnviv(target, pname, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void GetTexEnvi(this GL glInstance, TextureEnvTarget target, TextureEnvParameter pname, ref int parameters)
        {
            fixed (int* parameters_ptr = &parameters) // RefInsteadOfPointerLayer
            {
                glInstance.GetTexEnviv(target, pname, parameters_ptr);
            }
        }

        // GetTexEnvxv overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetTexEnvx(this GL glInstance, TextureEnvTarget target, TextureEnvParameter pname, Span<int> parameters)
        {
            fixed (int* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.GetTexEnvxv(target, pname, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetTexEnvx(this GL glInstance, TextureEnvTarget target, TextureEnvParameter pname, int[] parameters)
        {
            fixed (int* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.GetTexEnvxv(target, pname, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void GetTexEnvx(this GL glInstance, TextureEnvTarget target, TextureEnvParameter pname, ref int parameters)
        {
            fixed (int* parameters_ptr = &parameters) // RefInsteadOfPointerLayer
            {
                glInstance.GetTexEnvxv(target, pname, parameters_ptr);
            }
        }

        // GetTexParameteriv overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetTexParameteri(this GL glInstance, TextureTarget target, GetTextureParameter pname, Span<int> parameters)
        {
            fixed (int* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.GetTexParameteriv(target, pname, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetTexParameteri(this GL glInstance, TextureTarget target, GetTextureParameter pname, int[] parameters)
        {
            fixed (int* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.GetTexParameteriv(target, pname, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void GetTexParameteri(this GL glInstance, TextureTarget target, GetTextureParameter pname, ref int parameters)
        {
            fixed (int* parameters_ptr = &parameters) // RefInsteadOfPointerLayer
            {
                glInstance.GetTexParameteriv(target, pname, parameters_ptr);
            }
        }

        // GetTexParameterxv overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetTexParameterx(this GL glInstance, TextureTarget target, GetTextureParameter pname, Span<int> parameters)
        {
            fixed (int* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.GetTexParameterxv(target, pname, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetTexParameterx(this GL glInstance, TextureTarget target, GetTextureParameter pname, int[] parameters)
        {
            fixed (int* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.GetTexParameterxv(target, pname, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void GetTexParameterx(this GL glInstance, TextureTarget target, GetTextureParameter pname, ref int parameters)
        {
            fixed (int* parameters_ptr = &parameters) // RefInsteadOfPointerLayer
            {
                glInstance.GetTexParameterxv(target, pname, parameters_ptr);
            }
        }

        // LightModelxv overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void LightModelx(this GL glInstance, LightModelParameter pname, ReadOnlySpan<int> param)
        {
            fixed (int* param_ptr = param) // SpanOrArrayLayer
            {
                glInstance.LightModelxv(pname, param_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void LightModelx(this GL glInstance, LightModelParameter pname, int[] param)
        {
            fixed (int* param_ptr = param) // SpanOrArrayLayer
            {
                glInstance.LightModelxv(pname, param_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void LightModelx(this GL glInstance, LightModelParameter pname, in int param)
        {
            fixed (int* param_ptr = &param) // RefInsteadOfPointerLayer
            {
                glInstance.LightModelxv(pname, param_ptr);
            }
        }

        // Lightxv overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void Lightx(this GL glInstance, LightName light, LightParameter pname, ReadOnlySpan<int> parameters)
        {
            fixed (int* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.Lightxv(light, pname, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void Lightx(this GL glInstance, LightName light, LightParameter pname, int[] parameters)
        {
            fixed (int* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.Lightxv(light, pname, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void Lightx(this GL glInstance, LightName light, LightParameter pname, in int parameters)
        {
            fixed (int* parameters_ptr = &parameters) // RefInsteadOfPointerLayer
            {
                glInstance.Lightxv(light, pname, parameters_ptr);
            }
        }

        // LoadMatrixx overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void LoadMatrixx(this GL glInstance, ReadOnlySpan<int> m)
        {
            fixed (int* m_ptr = m) // SpanOrArrayLayer
            {
                glInstance.LoadMatrixx(m_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void LoadMatrixx(this GL glInstance, int[] m)
        {
            fixed (int* m_ptr = m) // SpanOrArrayLayer
            {
                glInstance.LoadMatrixx(m_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void LoadMatrixx(this GL glInstance, in int m)
        {
            fixed (int* m_ptr = &m) // RefInsteadOfPointerLayer
            {
                glInstance.LoadMatrixx(m_ptr);
            }
        }

        // Materialxv overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void Materialx(this GL glInstance, MaterialFace face, MaterialParameter pname, ReadOnlySpan<int> param)
        {
            fixed (int* param_ptr = param) // SpanOrArrayLayer
            {
                glInstance.Materialxv(face, pname, param_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void Materialx(this GL glInstance, MaterialFace face, MaterialParameter pname, int[] param)
        {
            fixed (int* param_ptr = param) // SpanOrArrayLayer
            {
                glInstance.Materialxv(face, pname, param_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void Materialx(this GL glInstance, MaterialFace face, MaterialParameter pname, in int param)
        {
            fixed (int* param_ptr = &param) // RefInsteadOfPointerLayer
            {
                glInstance.Materialxv(face, pname, param_ptr);
            }
        }

        // MultMatrixx overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void MultMatrixx(this GL glInstance, ReadOnlySpan<int> m)
        {
            fixed (int* m_ptr = m) // SpanOrArrayLayer
            {
                glInstance.MultMatrixx(m_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void MultMatrixx(this GL glInstance, int[] m)
        {
            fixed (int* m_ptr = m) // SpanOrArrayLayer
            {
                glInstance.MultMatrixx(m_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void MultMatrixx(this GL glInstance, in int m)
        {
            fixed (int* m_ptr = &m) // RefInsteadOfPointerLayer
            {
                glInstance.MultMatrixx(m_ptr);
            }
        }

        // NormalPointer overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.VoidPtrToIntPtrOverloader
        public static unsafe void NormalPointer(this GL glInstance, NormalPointerType type, int stride, IntPtr pointer)
        {
            var pointer_vptr = (void*)pointer;
            glInstance.NormalPointer(type, stride, pointer_vptr);
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void NormalPointer<T1>(this GL glInstance, NormalPointerType type, int stride, ReadOnlySpan<T1> pointer)
            where T1 : unmanaged
        {
            fixed (void* pointer_ptr = pointer) // SpanOrArrayLayer
            {
                glInstance.NormalPointer(type, stride, pointer_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void NormalPointer<T1>(this GL glInstance, NormalPointerType type, int stride, T1[] pointer)
            where T1 : unmanaged
        {
            fixed (void* pointer_ptr = pointer) // SpanOrArrayLayer
            {
                glInstance.NormalPointer(type, stride, pointer_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void NormalPointer<T1>(this GL glInstance, NormalPointerType type, int stride, in T1 pointer)
            where T1 : unmanaged
        {
            fixed (void* pointer_ptr = &pointer) // RefInsteadOfPointerLayer
            {
                glInstance.NormalPointer(type, stride, pointer_ptr);
            }
        }

        // PointParameterxv overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void PointParameterx(this GL glInstance, PointParameterNameARB pname, ReadOnlySpan<int> parameters)
        {
            fixed (int* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.PointParameterxv(pname, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void PointParameterx(this GL glInstance, PointParameterNameARB pname, int[] parameters)
        {
            fixed (int* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.PointParameterxv(pname, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void PointParameterx(this GL glInstance, PointParameterNameARB pname, in int parameters)
        {
            fixed (int* parameters_ptr = &parameters) // RefInsteadOfPointerLayer
            {
                glInstance.PointParameterxv(pname, parameters_ptr);
            }
        }

        // ReadPixels overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.VoidPtrToIntPtrOverloader
        public static unsafe void ReadPixels(this GL glInstance, int x, int y, int width, int height, PixelFormat format, PixelType type, IntPtr pixels)
        {
            var pixels_vptr = (void*)pixels;
            glInstance.ReadPixels(x, y, width, height, format, type, pixels_vptr);
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void ReadPixels<T1>(this GL glInstance, int x, int y, int width, int height, PixelFormat format, PixelType type, Span<T1> pixels)
            where T1 : unmanaged
        {
            fixed (void* pixels_ptr = pixels) // SpanOrArrayLayer
            {
                glInstance.ReadPixels(x, y, width, height, format, type, pixels_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void ReadPixels<T1>(this GL glInstance, int x, int y, int width, int height, PixelFormat format, PixelType type, T1[] pixels)
            where T1 : unmanaged
        {
            fixed (void* pixels_ptr = pixels) // SpanOrArrayLayer
            {
                glInstance.ReadPixels(x, y, width, height, format, type, pixels_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void ReadPixels<T1>(this GL glInstance, int x, int y, int width, int height, PixelFormat format, PixelType type, ref T1 pixels)
            where T1 : unmanaged
        {
            fixed (void* pixels_ptr = &pixels) // RefInsteadOfPointerLayer
            {
                glInstance.ReadPixels(x, y, width, height, format, type, pixels_ptr);
            }
        }

        // SampleCoverage overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.BoolOverloader
        public static unsafe void SampleCoverage(this GL glInstance, float value, bool invert)
        {
            var invert_byte = (byte)(invert ? 1 : 0);
            glInstance.SampleCoverage(value, invert_byte);
        }

        // SampleCoveragex overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.BoolOverloader
        public static unsafe void SampleCoveragex(this GL glInstance, int value, bool invert)
        {
            var invert_byte = (byte)(invert ? 1 : 0);
            glInstance.SampleCoveragex(value, invert_byte);
        }

        // TexCoordPointer overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.VoidPtrToIntPtrOverloader
        public static unsafe void TexCoordPointer(this GL glInstance, int size, TexCoordPointerType type, int stride, IntPtr pointer)
        {
            var pointer_vptr = (void*)pointer;
            glInstance.TexCoordPointer(size, type, stride, pointer_vptr);
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void TexCoordPointer<T1>(this GL glInstance, int size, TexCoordPointerType type, int stride, ReadOnlySpan<T1> pointer)
            where T1 : unmanaged
        {
            fixed (void* pointer_ptr = pointer) // SpanOrArrayLayer
            {
                glInstance.TexCoordPointer(size, type, stride, pointer_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void TexCoordPointer<T1>(this GL glInstance, int size, TexCoordPointerType type, int stride, T1[] pointer)
            where T1 : unmanaged
        {
            fixed (void* pointer_ptr = pointer) // SpanOrArrayLayer
            {
                glInstance.TexCoordPointer(size, type, stride, pointer_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void TexCoordPointer<T1>(this GL glInstance, int size, TexCoordPointerType type, int stride, in T1 pointer)
            where T1 : unmanaged
        {
            fixed (void* pointer_ptr = &pointer) // RefInsteadOfPointerLayer
            {
                glInstance.TexCoordPointer(size, type, stride, pointer_ptr);
            }
        }

        // TexEnviv overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void TexEnvi(this GL glInstance, TextureEnvTarget target, TextureEnvParameter pname, ReadOnlySpan<int> parameters)
        {
            fixed (int* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.TexEnviv(target, pname, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void TexEnvi(this GL glInstance, TextureEnvTarget target, TextureEnvParameter pname, int[] parameters)
        {
            fixed (int* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.TexEnviv(target, pname, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void TexEnvi(this GL glInstance, TextureEnvTarget target, TextureEnvParameter pname, in int parameters)
        {
            fixed (int* parameters_ptr = &parameters) // RefInsteadOfPointerLayer
            {
                glInstance.TexEnviv(target, pname, parameters_ptr);
            }
        }

        // TexEnvxv overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void TexEnvx(this GL glInstance, TextureEnvTarget target, TextureEnvParameter pname, ReadOnlySpan<int> parameters)
        {
            fixed (int* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.TexEnvxv(target, pname, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void TexEnvx(this GL glInstance, TextureEnvTarget target, TextureEnvParameter pname, int[] parameters)
        {
            fixed (int* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.TexEnvxv(target, pname, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void TexEnvx(this GL glInstance, TextureEnvTarget target, TextureEnvParameter pname, in int parameters)
        {
            fixed (int* parameters_ptr = &parameters) // RefInsteadOfPointerLayer
            {
                glInstance.TexEnvxv(target, pname, parameters_ptr);
            }
        }

        // TexImage2D overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.VoidPtrToIntPtrOverloader
        public static unsafe void TexImage2D(this GL glInstance, TextureTarget target, int level, int internalformat, int width, int height, int border, PixelFormat format, PixelType type, IntPtr pixels)
        {
            var pixels_vptr = (void*)pixels;
            glInstance.TexImage2D(target, level, internalformat, width, height, border, format, type, pixels_vptr);
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void TexImage2D<T1>(this GL glInstance, TextureTarget target, int level, int internalformat, int width, int height, int border, PixelFormat format, PixelType type, ReadOnlySpan<T1> pixels)
            where T1 : unmanaged
        {
            fixed (void* pixels_ptr = pixels) // SpanOrArrayLayer
            {
                glInstance.TexImage2D(target, level, internalformat, width, height, border, format, type, pixels_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void TexImage2D<T1>(this GL glInstance, TextureTarget target, int level, int internalformat, int width, int height, int border, PixelFormat format, PixelType type, T1[] pixels)
            where T1 : unmanaged
        {
            fixed (void* pixels_ptr = pixels) // SpanOrArrayLayer
            {
                glInstance.TexImage2D(target, level, internalformat, width, height, border, format, type, pixels_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void TexImage2D<T1>(this GL glInstance, TextureTarget target, int level, int internalformat, int width, int height, int border, PixelFormat format, PixelType type, in T1 pixels)
            where T1 : unmanaged
        {
            fixed (void* pixels_ptr = &pixels) // RefInsteadOfPointerLayer
            {
                glInstance.TexImage2D(target, level, internalformat, width, height, border, format, type, pixels_ptr);
            }
        }

        // TexParameteriv overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void TexParameteri(this GL glInstance, TextureTarget target, TextureParameterName pname, ReadOnlySpan<int> parameters)
        {
            fixed (int* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.TexParameteriv(target, pname, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void TexParameteri(this GL glInstance, TextureTarget target, TextureParameterName pname, int[] parameters)
        {
            fixed (int* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.TexParameteriv(target, pname, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void TexParameteri(this GL glInstance, TextureTarget target, TextureParameterName pname, in int parameters)
        {
            fixed (int* parameters_ptr = &parameters) // RefInsteadOfPointerLayer
            {
                glInstance.TexParameteriv(target, pname, parameters_ptr);
            }
        }

        // TexParameterxv overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void TexParameterx(this GL glInstance, TextureTarget target, GetTextureParameter pname, ReadOnlySpan<int> parameters)
        {
            fixed (int* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.TexParameterxv(target, pname, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void TexParameterx(this GL glInstance, TextureTarget target, GetTextureParameter pname, int[] parameters)
        {
            fixed (int* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.TexParameterxv(target, pname, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void TexParameterx(this GL glInstance, TextureTarget target, GetTextureParameter pname, in int parameters)
        {
            fixed (int* parameters_ptr = &parameters) // RefInsteadOfPointerLayer
            {
                glInstance.TexParameterxv(target, pname, parameters_ptr);
            }
        }

        // TexSubImage2D overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.VoidPtrToIntPtrOverloader
        public static unsafe void TexSubImage2D(this GL glInstance, TextureTarget target, int level, int xoffset, int yoffset, int width, int height, PixelFormat format, PixelType type, IntPtr pixels)
        {
            var pixels_vptr = (void*)pixels;
            glInstance.TexSubImage2D(target, level, xoffset, yoffset, width, height, format, type, pixels_vptr);
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void TexSubImage2D<T1>(this GL glInstance, TextureTarget target, int level, int xoffset, int yoffset, int width, int height, PixelFormat format, PixelType type, ReadOnlySpan<T1> pixels)
            where T1 : unmanaged
        {
            fixed (void* pixels_ptr = pixels) // SpanOrArrayLayer
            {
                glInstance.TexSubImage2D(target, level, xoffset, yoffset, width, height, format, type, pixels_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void TexSubImage2D<T1>(this GL glInstance, TextureTarget target, int level, int xoffset, int yoffset, int width, int height, PixelFormat format, PixelType type, T1[] pixels)
            where T1 : unmanaged
        {
            fixed (void* pixels_ptr = pixels) // SpanOrArrayLayer
            {
                glInstance.TexSubImage2D(target, level, xoffset, yoffset, width, height, format, type, pixels_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void TexSubImage2D<T1>(this GL glInstance, TextureTarget target, int level, int xoffset, int yoffset, int width, int height, PixelFormat format, PixelType type, in T1 pixels)
            where T1 : unmanaged
        {
            fixed (void* pixels_ptr = &pixels) // RefInsteadOfPointerLayer
            {
                glInstance.TexSubImage2D(target, level, xoffset, yoffset, width, height, format, type, pixels_ptr);
            }
        }

        // VertexPointer overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.VoidPtrToIntPtrOverloader
        public static unsafe void VertexPointer(this GL glInstance, int size, VertexPointerType type, int stride, IntPtr pointer)
        {
            var pointer_vptr = (void*)pointer;
            glInstance.VertexPointer(size, type, stride, pointer_vptr);
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void VertexPointer<T1>(this GL glInstance, int size, VertexPointerType type, int stride, ReadOnlySpan<T1> pointer)
            where T1 : unmanaged
        {
            fixed (void* pointer_ptr = pointer) // SpanOrArrayLayer
            {
                glInstance.VertexPointer(size, type, stride, pointer_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void VertexPointer<T1>(this GL glInstance, int size, VertexPointerType type, int stride, T1[] pointer)
            where T1 : unmanaged
        {
            fixed (void* pointer_ptr = pointer) // SpanOrArrayLayer
            {
                glInstance.VertexPointer(size, type, stride, pointer_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void VertexPointer<T1>(this GL glInstance, int size, VertexPointerType type, int stride, in T1 pointer)
            where T1 : unmanaged
        {
            fixed (void* pointer_ptr = &pointer) // RefInsteadOfPointerLayer
            {
                glInstance.VertexPointer(size, type, stride, pointer_ptr);
            }
        }
    }

#pragma warning restore IDE1006 // Naming Styles
}
