// This file is auto generated, do not edit.
using System;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;

namespace Gwi.OpenGL.GLES3
{
#pragma warning disable IDE1006 // Naming Styles

    public static class OESOverloads
    {
        // EGLImageTargetTexture2DOES overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.VoidPtrToIntPtrOverloader
        public static unsafe void EGLImageTargetTexture2DOES(this GL.OESExtension glInstance, GLEnum target, IntPtr image)
        {
            var image_vptr = (void*)image;
            glInstance.EGLImageTargetTexture2DOES(target, image_vptr);
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void EGLImageTargetTexture2DOES<T1>(this GL.OESExtension glInstance, GLEnum target, ref T1 image)
            where T1 : unmanaged
        {
            fixed (void* image_ptr = &image) // RefInsteadOfPointerLayer
            {
                glInstance.EGLImageTargetTexture2DOES(target, image_ptr);
            }
        }

        // EGLImageTargetRenderbufferStorageOES overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.VoidPtrToIntPtrOverloader
        public static unsafe void EGLImageTargetRenderbufferStorageOES(this GL.OESExtension glInstance, GLEnum target, IntPtr image)
        {
            var image_vptr = (void*)image;
            glInstance.EGLImageTargetRenderbufferStorageOES(target, image_vptr);
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void EGLImageTargetRenderbufferStorageOES<T1>(this GL.OESExtension glInstance, GLEnum target, ref T1 image)
            where T1 : unmanaged
        {
            fixed (void* image_ptr = &image) // RefInsteadOfPointerLayer
            {
                glInstance.EGLImageTargetRenderbufferStorageOES(target, image_ptr);
            }
        }

        // ColorMaskiOES overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.BoolOverloader
        public static unsafe void ColorMaskiOES(this GL.OESExtension glInstance, uint index, bool r, bool g, bool b, bool a)
        {
            var r_byte = (byte)(r ? 1 : 0);
            var g_byte = (byte)(g ? 1 : 0);
            var b_byte = (byte)(b ? 1 : 0);
            var a_byte = (byte)(a ? 1 : 0);
            glInstance.ColorMaskiOES(index, r_byte, g_byte, b_byte, a_byte);
        }

        // DrawElementsBaseVertexOES overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.PointerToOffsetOverloader
        public static unsafe void DrawElementsBaseVertexOES(this GL.OESExtension glInstance, PrimitiveType mode, int count, DrawElementsType type, nint offset, int basevertex)
        {
            void* indices = (void*)offset;
            glInstance.DrawElementsBaseVertexOES(mode, count, type, indices, basevertex);
        }

        // DrawRangeElementsBaseVertexOES overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.PointerToOffsetOverloader
        public static unsafe void DrawRangeElementsBaseVertexOES(this GL.OESExtension glInstance, PrimitiveType mode, uint start, uint end, int count, DrawElementsType type, nint offset, int basevertex)
        {
            void* indices = (void*)offset;
            glInstance.DrawRangeElementsBaseVertexOES(mode, start, end, count, type, indices, basevertex);
        }

        // DrawElementsInstancedBaseVertexOES overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.PointerToOffsetOverloader
        public static unsafe void DrawElementsInstancedBaseVertexOES(this GL.OESExtension glInstance, PrimitiveType mode, int count, DrawElementsType type, nint offset, int instancecount, int basevertex)
        {
            void* indices = (void*)offset;
            glInstance.DrawElementsInstancedBaseVertexOES(mode, count, type, indices, instancecount, basevertex);
        }

        // MultiDrawElementsBaseVertexEXT overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void MultiDrawElementsBaseVertexEXT(this GL.OESExtension glInstance, PrimitiveType mode, ReadOnlySpan<int> count, DrawElementsType type, void** indices, int drawcount, ReadOnlySpan<int> basevertex)
        {
            fixed (int* count_ptr = count) // SpanOrArrayLayer
            {
                fixed (int* basevertex_ptr = basevertex) // SpanOrArrayLayer
                {
                    glInstance.MultiDrawElementsBaseVertexEXT(mode, count_ptr, type, indices, drawcount, basevertex_ptr);
                }
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void MultiDrawElementsBaseVertexEXT(this GL.OESExtension glInstance, PrimitiveType mode, int[] count, DrawElementsType type, void** indices, int drawcount, int[] basevertex)
        {
            fixed (int* count_ptr = count) // SpanOrArrayLayer
            {
                fixed (int* basevertex_ptr = basevertex) // SpanOrArrayLayer
                {
                    glInstance.MultiDrawElementsBaseVertexEXT(mode, count_ptr, type, indices, drawcount, basevertex_ptr);
                }
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void MultiDrawElementsBaseVertexEXT(this GL.OESExtension glInstance, PrimitiveType mode, in int count, DrawElementsType type, void** indices, int drawcount, in int basevertex)
        {
            fixed (int* count_ptr = &count) // RefInsteadOfPointerLayer
            fixed (int* basevertex_ptr = &basevertex) // RefInsteadOfPointerLayer
            {
                glInstance.MultiDrawElementsBaseVertexEXT(mode, count_ptr, type, indices, drawcount, basevertex_ptr);
            }
        }

        // GetProgramBinaryOES overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetProgramBinaryOES(this GL.OESExtension glInstance, ProgramHandle program, int bufSize, Span<int> length, Span<GLEnum> binaryFormat, IntPtr binary)
        {
            fixed (int* length_ptr = length) // SpanOrArrayLayer
            {
                fixed (GLEnum* binaryFormat_ptr = binaryFormat) // SpanOrArrayLayer
                {
                    var binary_vptr = (void*)binary;
                    glInstance.GetProgramBinaryOES(program, bufSize, length_ptr, binaryFormat_ptr, binary_vptr);
                }
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetProgramBinaryOES(this GL.OESExtension glInstance, ProgramHandle program, int bufSize, int[] length, GLEnum[] binaryFormat, IntPtr binary)
        {
            fixed (int* length_ptr = length) // SpanOrArrayLayer
            {
                fixed (GLEnum* binaryFormat_ptr = binaryFormat) // SpanOrArrayLayer
                {
                    var binary_vptr = (void*)binary;
                    glInstance.GetProgramBinaryOES(program, bufSize, length_ptr, binaryFormat_ptr, binary_vptr);
                }
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void GetProgramBinaryOES(this GL.OESExtension glInstance, ProgramHandle program, int bufSize, ref int length, ref GLEnum binaryFormat, IntPtr binary)
        {
            fixed (int* length_ptr = &length) // RefInsteadOfPointerLayer
            fixed (GLEnum* binaryFormat_ptr = &binaryFormat) // RefInsteadOfPointerLayer
            {
                var binary_vptr = (void*)binary;
                glInstance.GetProgramBinaryOES(program, bufSize, length_ptr, binaryFormat_ptr, binary_vptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetProgramBinaryOES<T1>(this GL.OESExtension glInstance, ProgramHandle program, Span<int> length, Span<GLEnum> binaryFormat, Span<T1> binary)
            where T1 : unmanaged
        {
            fixed (int* length_ptr = length) // SpanOrArrayLayer
            {
                fixed (GLEnum* binaryFormat_ptr = binaryFormat) // SpanOrArrayLayer
                {
                    var bufSize = (int)(binary.Length * sizeof(T1));
                    fixed (void* binary_ptr = binary) // SpanOrArrayLayer
                    {
                        glInstance.GetProgramBinaryOES(program, bufSize, length_ptr, binaryFormat_ptr, binary_ptr);
                    }
                }
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetProgramBinaryOES<T1>(this GL.OESExtension glInstance, ProgramHandle program, int[] length, GLEnum[] binaryFormat, T1[] binary)
            where T1 : unmanaged
        {
            fixed (int* length_ptr = length) // SpanOrArrayLayer
            {
                fixed (GLEnum* binaryFormat_ptr = binaryFormat) // SpanOrArrayLayer
                {
                    var bufSize = (int)(binary.Length * sizeof(T1));
                    fixed (void* binary_ptr = binary) // SpanOrArrayLayer
                    {
                        glInstance.GetProgramBinaryOES(program, bufSize, length_ptr, binaryFormat_ptr, binary_ptr);
                    }
                }
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void GetProgramBinaryOES<T1>(this GL.OESExtension glInstance, ProgramHandle program, int bufSize, ref int length, ref GLEnum binaryFormat, ref T1 binary)
            where T1 : unmanaged
        {
            fixed (int* length_ptr = &length) // RefInsteadOfPointerLayer
            fixed (GLEnum* binaryFormat_ptr = &binaryFormat) // RefInsteadOfPointerLayer
            fixed (void* binary_ptr = &binary) // RefInsteadOfPointerLayer
            {
                glInstance.GetProgramBinaryOES(program, bufSize, length_ptr, binaryFormat_ptr, binary_ptr);
            }
        }

        // ProgramBinaryOES overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.VoidPtrToIntPtrOverloader
        public static unsafe void ProgramBinaryOES(this GL.OESExtension glInstance, ProgramHandle program, GLEnum binaryFormat, IntPtr binary, int length)
        {
            var binary_vptr = (void*)binary;
            glInstance.ProgramBinaryOES(program, binaryFormat, binary_vptr, length);
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void ProgramBinaryOES<T1>(this GL.OESExtension glInstance, ProgramHandle program, GLEnum binaryFormat, ReadOnlySpan<T1> binary)
            where T1 : unmanaged
        {
            var length = (int)(binary.Length * sizeof(T1));
            fixed (void* binary_ptr = binary) // SpanOrArrayLayer
            {
                glInstance.ProgramBinaryOES(program, binaryFormat, binary_ptr, length);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void ProgramBinaryOES<T1>(this GL.OESExtension glInstance, ProgramHandle program, GLEnum binaryFormat, T1[] binary)
            where T1 : unmanaged
        {
            var length = (int)(binary.Length * sizeof(T1));
            fixed (void* binary_ptr = binary) // SpanOrArrayLayer
            {
                glInstance.ProgramBinaryOES(program, binaryFormat, binary_ptr, length);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void ProgramBinaryOES<T1>(this GL.OESExtension glInstance, ProgramHandle program, GLEnum binaryFormat, in T1 binary, int length)
            where T1 : unmanaged
        {
            fixed (void* binary_ptr = &binary) // RefInsteadOfPointerLayer
            {
                glInstance.ProgramBinaryOES(program, binaryFormat, binary_ptr, length);
            }
        }

        // TexImage3DOES overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.VoidPtrToIntPtrOverloader
        public static unsafe void TexImage3DOES(this GL.OESExtension glInstance, TextureTarget target, int level, InternalFormat internalformat, int width, int height, int depth, int border, PixelFormat format, PixelType type, IntPtr pixels)
        {
            var pixels_vptr = (void*)pixels;
            glInstance.TexImage3DOES(target, level, internalformat, width, height, depth, border, format, type, pixels_vptr);
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void TexImage3DOES<T1>(this GL.OESExtension glInstance, TextureTarget target, int level, InternalFormat internalformat, int width, int height, int depth, int border, PixelFormat format, PixelType type, ReadOnlySpan<T1> pixels)
            where T1 : unmanaged
        {
            fixed (void* pixels_ptr = pixels) // SpanOrArrayLayer
            {
                glInstance.TexImage3DOES(target, level, internalformat, width, height, depth, border, format, type, pixels_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void TexImage3DOES<T1>(this GL.OESExtension glInstance, TextureTarget target, int level, InternalFormat internalformat, int width, int height, int depth, int border, PixelFormat format, PixelType type, T1[] pixels)
            where T1 : unmanaged
        {
            fixed (void* pixels_ptr = pixels) // SpanOrArrayLayer
            {
                glInstance.TexImage3DOES(target, level, internalformat, width, height, depth, border, format, type, pixels_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void TexImage3DOES<T1>(this GL.OESExtension glInstance, TextureTarget target, int level, InternalFormat internalformat, int width, int height, int depth, int border, PixelFormat format, PixelType type, in T1 pixels)
            where T1 : unmanaged
        {
            fixed (void* pixels_ptr = &pixels) // RefInsteadOfPointerLayer
            {
                glInstance.TexImage3DOES(target, level, internalformat, width, height, depth, border, format, type, pixels_ptr);
            }
        }

        // TexSubImage3DOES overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.VoidPtrToIntPtrOverloader
        public static unsafe void TexSubImage3DOES(this GL.OESExtension glInstance, TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, PixelFormat format, PixelType type, IntPtr pixels)
        {
            var pixels_vptr = (void*)pixels;
            glInstance.TexSubImage3DOES(target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels_vptr);
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void TexSubImage3DOES<T1>(this GL.OESExtension glInstance, TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, PixelFormat format, PixelType type, ReadOnlySpan<T1> pixels)
            where T1 : unmanaged
        {
            fixed (void* pixels_ptr = pixels) // SpanOrArrayLayer
            {
                glInstance.TexSubImage3DOES(target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void TexSubImage3DOES<T1>(this GL.OESExtension glInstance, TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, PixelFormat format, PixelType type, T1[] pixels)
            where T1 : unmanaged
        {
            fixed (void* pixels_ptr = pixels) // SpanOrArrayLayer
            {
                glInstance.TexSubImage3DOES(target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void TexSubImage3DOES<T1>(this GL.OESExtension glInstance, TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, PixelFormat format, PixelType type, in T1 pixels)
            where T1 : unmanaged
        {
            fixed (void* pixels_ptr = &pixels) // RefInsteadOfPointerLayer
            {
                glInstance.TexSubImage3DOES(target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels_ptr);
            }
        }

        // CompressedTexImage3DOES overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.VoidPtrToIntPtrOverloader
        public static unsafe void CompressedTexImage3DOES(this GL.OESExtension glInstance, TextureTarget target, int level, InternalFormat internalformat, int width, int height, int depth, int border, int imageSize, IntPtr data)
        {
            var data_vptr = (void*)data;
            glInstance.CompressedTexImage3DOES(target, level, internalformat, width, height, depth, border, imageSize, data_vptr);
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void CompressedTexImage3DOES<T1>(this GL.OESExtension glInstance, TextureTarget target, int level, InternalFormat internalformat, int width, int height, int depth, int border, ReadOnlySpan<T1> data)
            where T1 : unmanaged
        {
            var imageSize = (int)(data.Length * sizeof(T1));
            fixed (void* data_ptr = data) // SpanOrArrayLayer
            {
                glInstance.CompressedTexImage3DOES(target, level, internalformat, width, height, depth, border, imageSize, data_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void CompressedTexImage3DOES<T1>(this GL.OESExtension glInstance, TextureTarget target, int level, InternalFormat internalformat, int width, int height, int depth, int border, T1[] data)
            where T1 : unmanaged
        {
            var imageSize = (int)(data.Length * sizeof(T1));
            fixed (void* data_ptr = data) // SpanOrArrayLayer
            {
                glInstance.CompressedTexImage3DOES(target, level, internalformat, width, height, depth, border, imageSize, data_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void CompressedTexImage3DOES<T1>(this GL.OESExtension glInstance, TextureTarget target, int level, InternalFormat internalformat, int width, int height, int depth, int border, int imageSize, in T1 data)
            where T1 : unmanaged
        {
            fixed (void* data_ptr = &data) // RefInsteadOfPointerLayer
            {
                glInstance.CompressedTexImage3DOES(target, level, internalformat, width, height, depth, border, imageSize, data_ptr);
            }
        }

        // CompressedTexSubImage3DOES overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.VoidPtrToIntPtrOverloader
        public static unsafe void CompressedTexSubImage3DOES(this GL.OESExtension glInstance, TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, InternalFormat format, int imageSize, IntPtr data)
        {
            var data_vptr = (void*)data;
            glInstance.CompressedTexSubImage3DOES(target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data_vptr);
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void CompressedTexSubImage3DOES<T1>(this GL.OESExtension glInstance, TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, InternalFormat format, ReadOnlySpan<T1> data)
            where T1 : unmanaged
        {
            var imageSize = (int)(data.Length * sizeof(T1));
            fixed (void* data_ptr = data) // SpanOrArrayLayer
            {
                glInstance.CompressedTexSubImage3DOES(target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void CompressedTexSubImage3DOES<T1>(this GL.OESExtension glInstance, TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, InternalFormat format, T1[] data)
            where T1 : unmanaged
        {
            var imageSize = (int)(data.Length * sizeof(T1));
            fixed (void* data_ptr = data) // SpanOrArrayLayer
            {
                glInstance.CompressedTexSubImage3DOES(target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void CompressedTexSubImage3DOES<T1>(this GL.OESExtension glInstance, TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, InternalFormat format, int imageSize, in T1 data)
            where T1 : unmanaged
        {
            fixed (void* data_ptr = &data) // RefInsteadOfPointerLayer
            {
                glInstance.CompressedTexSubImage3DOES(target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data_ptr);
            }
        }

        // TexParameterIivOES overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void TexParameterIivOES(this GL.OESExtension glInstance, TextureTarget target, TextureParameterName pname, ReadOnlySpan<int> parameters)
        {
            fixed (int* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.TexParameterIivOES(target, pname, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void TexParameterIivOES(this GL.OESExtension glInstance, TextureTarget target, TextureParameterName pname, int[] parameters)
        {
            fixed (int* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.TexParameterIivOES(target, pname, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void TexParameterIivOES(this GL.OESExtension glInstance, TextureTarget target, TextureParameterName pname, in int parameters)
        {
            fixed (int* parameters_ptr = &parameters) // RefInsteadOfPointerLayer
            {
                glInstance.TexParameterIivOES(target, pname, parameters_ptr);
            }
        }

        // TexParameterIuivOES overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void TexParameterIuivOES(this GL.OESExtension glInstance, TextureTarget target, TextureParameterName pname, ReadOnlySpan<uint> parameters)
        {
            fixed (uint* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.TexParameterIuivOES(target, pname, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void TexParameterIuivOES(this GL.OESExtension glInstance, TextureTarget target, TextureParameterName pname, uint[] parameters)
        {
            fixed (uint* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.TexParameterIuivOES(target, pname, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void TexParameterIuivOES(this GL.OESExtension glInstance, TextureTarget target, TextureParameterName pname, in uint parameters)
        {
            fixed (uint* parameters_ptr = &parameters) // RefInsteadOfPointerLayer
            {
                glInstance.TexParameterIuivOES(target, pname, parameters_ptr);
            }
        }

        // GetTexParameterIivOES overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetTexParameterIivOES(this GL.OESExtension glInstance, TextureTarget target, GetTextureParameter pname, Span<int> parameters)
        {
            fixed (int* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.GetTexParameterIivOES(target, pname, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetTexParameterIivOES(this GL.OESExtension glInstance, TextureTarget target, GetTextureParameter pname, int[] parameters)
        {
            fixed (int* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.GetTexParameterIivOES(target, pname, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void GetTexParameterIivOES(this GL.OESExtension glInstance, TextureTarget target, GetTextureParameter pname, ref int parameters)
        {
            fixed (int* parameters_ptr = &parameters) // RefInsteadOfPointerLayer
            {
                glInstance.GetTexParameterIivOES(target, pname, parameters_ptr);
            }
        }

        // GetTexParameterIuivOES overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetTexParameterIuivOES(this GL.OESExtension glInstance, TextureTarget target, GetTextureParameter pname, Span<uint> parameters)
        {
            fixed (uint* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.GetTexParameterIuivOES(target, pname, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetTexParameterIuivOES(this GL.OESExtension glInstance, TextureTarget target, GetTextureParameter pname, uint[] parameters)
        {
            fixed (uint* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.GetTexParameterIuivOES(target, pname, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void GetTexParameterIuivOES(this GL.OESExtension glInstance, TextureTarget target, GetTextureParameter pname, ref uint parameters)
        {
            fixed (uint* parameters_ptr = &parameters) // RefInsteadOfPointerLayer
            {
                glInstance.GetTexParameterIuivOES(target, pname, parameters_ptr);
            }
        }

        // SamplerParameterIivOES overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void SamplerParameterIivOES(this GL.OESExtension glInstance, SamplerHandle sampler, SamplerParameterI pname, ReadOnlySpan<int> param)
        {
            fixed (int* param_ptr = param) // SpanOrArrayLayer
            {
                glInstance.SamplerParameterIivOES(sampler, pname, param_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void SamplerParameterIivOES(this GL.OESExtension glInstance, SamplerHandle sampler, SamplerParameterI pname, int[] param)
        {
            fixed (int* param_ptr = param) // SpanOrArrayLayer
            {
                glInstance.SamplerParameterIivOES(sampler, pname, param_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void SamplerParameterIivOES(this GL.OESExtension glInstance, SamplerHandle sampler, SamplerParameterI pname, in int param)
        {
            fixed (int* param_ptr = &param) // RefInsteadOfPointerLayer
            {
                glInstance.SamplerParameterIivOES(sampler, pname, param_ptr);
            }
        }

        // SamplerParameterIuivOES overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void SamplerParameterIuivOES(this GL.OESExtension glInstance, SamplerHandle sampler, SamplerParameterI pname, ReadOnlySpan<uint> param)
        {
            fixed (uint* param_ptr = param) // SpanOrArrayLayer
            {
                glInstance.SamplerParameterIuivOES(sampler, pname, param_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void SamplerParameterIuivOES(this GL.OESExtension glInstance, SamplerHandle sampler, SamplerParameterI pname, uint[] param)
        {
            fixed (uint* param_ptr = param) // SpanOrArrayLayer
            {
                glInstance.SamplerParameterIuivOES(sampler, pname, param_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void SamplerParameterIuivOES(this GL.OESExtension glInstance, SamplerHandle sampler, SamplerParameterI pname, in uint param)
        {
            fixed (uint* param_ptr = &param) // RefInsteadOfPointerLayer
            {
                glInstance.SamplerParameterIuivOES(sampler, pname, param_ptr);
            }
        }

        // GetSamplerParameterIivOES overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetSamplerParameterIivOES(this GL.OESExtension glInstance, SamplerHandle sampler, SamplerParameterI pname, Span<int> parameters)
        {
            fixed (int* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.GetSamplerParameterIivOES(sampler, pname, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetSamplerParameterIivOES(this GL.OESExtension glInstance, SamplerHandle sampler, SamplerParameterI pname, int[] parameters)
        {
            fixed (int* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.GetSamplerParameterIivOES(sampler, pname, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void GetSamplerParameterIivOES(this GL.OESExtension glInstance, SamplerHandle sampler, SamplerParameterI pname, ref int parameters)
        {
            fixed (int* parameters_ptr = &parameters) // RefInsteadOfPointerLayer
            {
                glInstance.GetSamplerParameterIivOES(sampler, pname, parameters_ptr);
            }
        }

        // GetSamplerParameterIuivOES overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetSamplerParameterIuivOES(this GL.OESExtension glInstance, SamplerHandle sampler, SamplerParameterI pname, Span<uint> parameters)
        {
            fixed (uint* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.GetSamplerParameterIuivOES(sampler, pname, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetSamplerParameterIuivOES(this GL.OESExtension glInstance, SamplerHandle sampler, SamplerParameterI pname, uint[] parameters)
        {
            fixed (uint* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.GetSamplerParameterIuivOES(sampler, pname, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void GetSamplerParameterIuivOES(this GL.OESExtension glInstance, SamplerHandle sampler, SamplerParameterI pname, ref uint parameters)
        {
            fixed (uint* parameters_ptr = &parameters) // RefInsteadOfPointerLayer
            {
                glInstance.GetSamplerParameterIuivOES(sampler, pname, parameters_ptr);
            }
        }

        // TexStorage3DMultisampleOES overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.BoolOverloader
        public static unsafe void TexStorage3DMultisampleOES(this GL.OESExtension glInstance, TextureTarget target, int samples, SizedInternalFormat internalformat, int width, int height, int depth, bool fixedsamplelocations)
        {
            var fixedsamplelocations_byte = (byte)(fixedsamplelocations ? 1 : 0);
            glInstance.TexStorage3DMultisampleOES(target, samples, internalformat, width, height, depth, fixedsamplelocations_byte);
        }

        // DeleteVertexArraysOES overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void DeleteVertexArraysOES(this GL.OESExtension glInstance, ReadOnlySpan<VertexArrayHandle> arrays)
        {
            var n = (int)(arrays.Length);
            fixed (VertexArrayHandle* arrays_ptr = arrays) // SpanOrArrayLayer
            {
                glInstance.DeleteVertexArraysOES(n, arrays_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void DeleteVertexArraysOES(this GL.OESExtension glInstance, VertexArrayHandle[] arrays)
        {
            var n = (int)(arrays.Length);
            fixed (VertexArrayHandle* arrays_ptr = arrays) // SpanOrArrayLayer
            {
                glInstance.DeleteVertexArraysOES(n, arrays_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void DeleteVertexArraysOES(this GL.OESExtension glInstance, int n, in VertexArrayHandle arrays)
        {
            fixed (VertexArrayHandle* arrays_ptr = &arrays) // RefInsteadOfPointerLayer
            {
                glInstance.DeleteVertexArraysOES(n, arrays_ptr);
            }
        }

        // GenVertexArraysOES overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GenVertexArraysOES(this GL.OESExtension glInstance, Span<VertexArrayHandle> arrays)
        {
            var n = (int)(arrays.Length);
            fixed (VertexArrayHandle* arrays_ptr = arrays) // SpanOrArrayLayer
            {
                glInstance.GenVertexArraysOES(n, arrays_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GenVertexArraysOES(this GL.OESExtension glInstance, VertexArrayHandle[] arrays)
        {
            var n = (int)(arrays.Length);
            fixed (VertexArrayHandle* arrays_ptr = arrays) // SpanOrArrayLayer
            {
                glInstance.GenVertexArraysOES(n, arrays_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void GenVertexArraysOES(this GL.OESExtension glInstance, int n, ref VertexArrayHandle arrays)
        {
            fixed (VertexArrayHandle* arrays_ptr = &arrays) // RefInsteadOfPointerLayer
            {
                glInstance.GenVertexArraysOES(n, arrays_ptr);
            }
        }

        // ViewportArrayvOES overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void ViewportArrayvOES(this GL.OESExtension glInstance, uint first, int count, ReadOnlySpan<float> v)
        {
            fixed (float* v_ptr = v) // SpanOrArrayLayer
            {
                glInstance.ViewportArrayvOES(first, count, v_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void ViewportArrayvOES(this GL.OESExtension glInstance, uint first, int count, float[] v)
        {
            fixed (float* v_ptr = v) // SpanOrArrayLayer
            {
                glInstance.ViewportArrayvOES(first, count, v_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void ViewportArrayvOES(this GL.OESExtension glInstance, uint first, int count, in float v)
        {
            fixed (float* v_ptr = &v) // RefInsteadOfPointerLayer
            {
                glInstance.ViewportArrayvOES(first, count, v_ptr);
            }
        }

        // ViewportIndexedfvOES overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void ViewportIndexedfvOES(this GL.OESExtension glInstance, uint index, ReadOnlySpan<float> v)
        {
            fixed (float* v_ptr = v) // SpanOrArrayLayer
            {
                glInstance.ViewportIndexedfvOES(index, v_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void ViewportIndexedfvOES(this GL.OESExtension glInstance, uint index, float[] v)
        {
            fixed (float* v_ptr = v) // SpanOrArrayLayer
            {
                glInstance.ViewportIndexedfvOES(index, v_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void ViewportIndexedfvOES(this GL.OESExtension glInstance, uint index, in float v)
        {
            fixed (float* v_ptr = &v) // RefInsteadOfPointerLayer
            {
                glInstance.ViewportIndexedfvOES(index, v_ptr);
            }
        }

        // ScissorArrayvOES overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void ScissorArrayvOES(this GL.OESExtension glInstance, uint first, int count, ReadOnlySpan<int> v)
        {
            fixed (int* v_ptr = v) // SpanOrArrayLayer
            {
                glInstance.ScissorArrayvOES(first, count, v_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void ScissorArrayvOES(this GL.OESExtension glInstance, uint first, int count, int[] v)
        {
            fixed (int* v_ptr = v) // SpanOrArrayLayer
            {
                glInstance.ScissorArrayvOES(first, count, v_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void ScissorArrayvOES(this GL.OESExtension glInstance, uint first, int count, in int v)
        {
            fixed (int* v_ptr = &v) // RefInsteadOfPointerLayer
            {
                glInstance.ScissorArrayvOES(first, count, v_ptr);
            }
        }

        // ScissorIndexedvOES overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void ScissorIndexedvOES(this GL.OESExtension glInstance, uint index, ReadOnlySpan<int> v)
        {
            fixed (int* v_ptr = v) // SpanOrArrayLayer
            {
                glInstance.ScissorIndexedvOES(index, v_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void ScissorIndexedvOES(this GL.OESExtension glInstance, uint index, int[] v)
        {
            fixed (int* v_ptr = v) // SpanOrArrayLayer
            {
                glInstance.ScissorIndexedvOES(index, v_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void ScissorIndexedvOES(this GL.OESExtension glInstance, uint index, in int v)
        {
            fixed (int* v_ptr = &v) // RefInsteadOfPointerLayer
            {
                glInstance.ScissorIndexedvOES(index, v_ptr);
            }
        }

        // DepthRangeArrayfvOES overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void DepthRangeArrayfvOES(this GL.OESExtension glInstance, uint first, int count, in float v)
        {
            fixed (float* v_ptr = &v) // RefInsteadOfPointerLayer
            {
                glInstance.DepthRangeArrayfvOES(first, count, v_ptr);
            }
        }

        // GetFloati_vOES overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetFloati_vOES(this GL.OESExtension glInstance, GetPName target, uint index, Span<float> data)
        {
            fixed (float* data_ptr = data) // SpanOrArrayLayer
            {
                glInstance.GetFloati_vOES(target, index, data_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetFloati_vOES(this GL.OESExtension glInstance, GetPName target, uint index, float[] data)
        {
            fixed (float* data_ptr = data) // SpanOrArrayLayer
            {
                glInstance.GetFloati_vOES(target, index, data_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void GetFloati_vOES(this GL.OESExtension glInstance, GetPName target, uint index, ref float data)
        {
            fixed (float* data_ptr = &data) // RefInsteadOfPointerLayer
            {
                glInstance.GetFloati_vOES(target, index, data_ptr);
            }
        }
    }

#pragma warning restore IDE1006 // Naming Styles
}
