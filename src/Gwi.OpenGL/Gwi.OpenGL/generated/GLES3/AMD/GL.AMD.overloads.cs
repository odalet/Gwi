// This file is auto generated, do not edit.
using System;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;

namespace Gwi.OpenGL.GLES3
{
#pragma warning disable IDE1006 // Naming Styles

    public static class AMDOverloads
    {
        // GetPerfMonitorGroupsAMD overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetPerfMonitorGroupsAMD(this GL.AMDExtension glInstance, Span<int> numGroups, Span<uint> groups)
        {
            fixed (int* numGroups_ptr = numGroups) // SpanOrArrayLayer
            {
                var groupsSize = (int)(groups.Length);
                fixed (uint* groups_ptr = groups) // SpanOrArrayLayer
                {
                    glInstance.GetPerfMonitorGroupsAMD(numGroups_ptr, groupsSize, groups_ptr);
                }
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetPerfMonitorGroupsAMD(this GL.AMDExtension glInstance, int[] numGroups, uint[] groups)
        {
            fixed (int* numGroups_ptr = numGroups) // SpanOrArrayLayer
            {
                var groupsSize = (int)(groups.Length);
                fixed (uint* groups_ptr = groups) // SpanOrArrayLayer
                {
                    glInstance.GetPerfMonitorGroupsAMD(numGroups_ptr, groupsSize, groups_ptr);
                }
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void GetPerfMonitorGroupsAMD(this GL.AMDExtension glInstance, ref int numGroups, int groupsSize, ref uint groups)
        {
            fixed (int* numGroups_ptr = &numGroups) // RefInsteadOfPointerLayer
            fixed (uint* groups_ptr = &groups) // RefInsteadOfPointerLayer
            {
                glInstance.GetPerfMonitorGroupsAMD(numGroups_ptr, groupsSize, groups_ptr);
            }
        }

        // GetPerfMonitorCountersAMD overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetPerfMonitorCountersAMD(this GL.AMDExtension glInstance, uint group, Span<int> numCounters, Span<int> maxActiveCounters, Span<uint> counters)
        {
            fixed (int* numCounters_ptr = numCounters) // SpanOrArrayLayer
            {
                fixed (int* maxActiveCounters_ptr = maxActiveCounters) // SpanOrArrayLayer
                {
                    var counterSize = (int)(counters.Length);
                    fixed (uint* counters_ptr = counters) // SpanOrArrayLayer
                    {
                        glInstance.GetPerfMonitorCountersAMD(group, numCounters_ptr, maxActiveCounters_ptr, counterSize, counters_ptr);
                    }
                }
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetPerfMonitorCountersAMD(this GL.AMDExtension glInstance, uint group, int[] numCounters, int[] maxActiveCounters, uint[] counters)
        {
            fixed (int* numCounters_ptr = numCounters) // SpanOrArrayLayer
            {
                fixed (int* maxActiveCounters_ptr = maxActiveCounters) // SpanOrArrayLayer
                {
                    var counterSize = (int)(counters.Length);
                    fixed (uint* counters_ptr = counters) // SpanOrArrayLayer
                    {
                        glInstance.GetPerfMonitorCountersAMD(group, numCounters_ptr, maxActiveCounters_ptr, counterSize, counters_ptr);
                    }
                }
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void GetPerfMonitorCountersAMD(this GL.AMDExtension glInstance, uint group, ref int numCounters, ref int maxActiveCounters, int counterSize, ref uint counters)
        {
            fixed (int* numCounters_ptr = &numCounters) // RefInsteadOfPointerLayer
            fixed (int* maxActiveCounters_ptr = &maxActiveCounters) // RefInsteadOfPointerLayer
            fixed (uint* counters_ptr = &counters) // RefInsteadOfPointerLayer
            {
                glInstance.GetPerfMonitorCountersAMD(group, numCounters_ptr, maxActiveCounters_ptr, counterSize, counters_ptr);
            }
        }

        // GetPerfMonitorGroupStringAMD overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.OutToReturnOverloader
        public static unsafe string GetPerfMonitorGroupStringAMD(this GL.AMDExtension glInstance, uint group, int bufSize, Span<int> length)
        {
            string groupString;
            fixed (int* length_ptr = length) // SpanOrArrayLayer
            {
                var groupString_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                glInstance.GetPerfMonitorGroupStringAMD(group, bufSize, length_ptr, groupString_ptr);
                groupString = Marshal.PtrToStringUTF8((IntPtr)groupString_ptr)!;
                Marshal.FreeCoTaskMem((IntPtr)groupString_ptr);
            }
            return groupString;
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetPerfMonitorGroupStringAMD(this GL.AMDExtension glInstance, uint group, int bufSize, Span<int> length, out string groupString)
        {
            fixed (int* length_ptr = length) // SpanOrArrayLayer
            {
                var groupString_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                glInstance.GetPerfMonitorGroupStringAMD(group, bufSize, length_ptr, groupString_ptr);
                groupString = Marshal.PtrToStringUTF8((IntPtr)groupString_ptr)!;
                Marshal.FreeCoTaskMem((IntPtr)groupString_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.OutToReturnOverloader
        public static unsafe string GetPerfMonitorGroupStringAMD(this GL.AMDExtension glInstance, uint group, int bufSize, int[] length)
        {
            string groupString;
            fixed (int* length_ptr = length) // SpanOrArrayLayer
            {
                var groupString_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                glInstance.GetPerfMonitorGroupStringAMD(group, bufSize, length_ptr, groupString_ptr);
                groupString = Marshal.PtrToStringUTF8((IntPtr)groupString_ptr)!;
                Marshal.FreeCoTaskMem((IntPtr)groupString_ptr);
            }
            return groupString;
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetPerfMonitorGroupStringAMD(this GL.AMDExtension glInstance, uint group, int bufSize, int[] length, out string groupString)
        {
            fixed (int* length_ptr = length) // SpanOrArrayLayer
            {
                var groupString_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                glInstance.GetPerfMonitorGroupStringAMD(group, bufSize, length_ptr, groupString_ptr);
                groupString = Marshal.PtrToStringUTF8((IntPtr)groupString_ptr)!;
                Marshal.FreeCoTaskMem((IntPtr)groupString_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.OutToReturnOverloader
        public static unsafe string GetPerfMonitorGroupStringAMD(this GL.AMDExtension glInstance, uint group, int bufSize, ref int length)
        {
            string groupString;
            fixed (int* length_ptr = &length) // RefInsteadOfPointerLayer
            {
                var groupString_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                glInstance.GetPerfMonitorGroupStringAMD(group, bufSize, length_ptr, groupString_ptr);
                groupString = Marshal.PtrToStringUTF8((IntPtr)groupString_ptr)!;
                Marshal.FreeCoTaskMem((IntPtr)groupString_ptr);
            }
            return groupString;
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void GetPerfMonitorGroupStringAMD(this GL.AMDExtension glInstance, uint group, int bufSize, ref int length, out string groupString)
        {
            fixed (int* length_ptr = &length) // RefInsteadOfPointerLayer
            {
                var groupString_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                glInstance.GetPerfMonitorGroupStringAMD(group, bufSize, length_ptr, groupString_ptr);
                groupString = Marshal.PtrToStringUTF8((IntPtr)groupString_ptr)!;
                Marshal.FreeCoTaskMem((IntPtr)groupString_ptr);
            }
        }

        // GetPerfMonitorCounterStringAMD overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.OutToReturnOverloader
        public static unsafe string GetPerfMonitorCounterStringAMD(this GL.AMDExtension glInstance, uint group, uint counter, int bufSize, Span<int> length)
        {
            string counterString;
            fixed (int* length_ptr = length) // SpanOrArrayLayer
            {
                var counterString_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                glInstance.GetPerfMonitorCounterStringAMD(group, counter, bufSize, length_ptr, counterString_ptr);
                counterString = Marshal.PtrToStringUTF8((IntPtr)counterString_ptr)!;
                Marshal.FreeCoTaskMem((IntPtr)counterString_ptr);
            }
            return counterString;
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetPerfMonitorCounterStringAMD(this GL.AMDExtension glInstance, uint group, uint counter, int bufSize, Span<int> length, out string counterString)
        {
            fixed (int* length_ptr = length) // SpanOrArrayLayer
            {
                var counterString_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                glInstance.GetPerfMonitorCounterStringAMD(group, counter, bufSize, length_ptr, counterString_ptr);
                counterString = Marshal.PtrToStringUTF8((IntPtr)counterString_ptr)!;
                Marshal.FreeCoTaskMem((IntPtr)counterString_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.OutToReturnOverloader
        public static unsafe string GetPerfMonitorCounterStringAMD(this GL.AMDExtension glInstance, uint group, uint counter, int bufSize, int[] length)
        {
            string counterString;
            fixed (int* length_ptr = length) // SpanOrArrayLayer
            {
                var counterString_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                glInstance.GetPerfMonitorCounterStringAMD(group, counter, bufSize, length_ptr, counterString_ptr);
                counterString = Marshal.PtrToStringUTF8((IntPtr)counterString_ptr)!;
                Marshal.FreeCoTaskMem((IntPtr)counterString_ptr);
            }
            return counterString;
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetPerfMonitorCounterStringAMD(this GL.AMDExtension glInstance, uint group, uint counter, int bufSize, int[] length, out string counterString)
        {
            fixed (int* length_ptr = length) // SpanOrArrayLayer
            {
                var counterString_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                glInstance.GetPerfMonitorCounterStringAMD(group, counter, bufSize, length_ptr, counterString_ptr);
                counterString = Marshal.PtrToStringUTF8((IntPtr)counterString_ptr)!;
                Marshal.FreeCoTaskMem((IntPtr)counterString_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.OutToReturnOverloader
        public static unsafe string GetPerfMonitorCounterStringAMD(this GL.AMDExtension glInstance, uint group, uint counter, int bufSize, ref int length)
        {
            string counterString;
            fixed (int* length_ptr = &length) // RefInsteadOfPointerLayer
            {
                var counterString_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                glInstance.GetPerfMonitorCounterStringAMD(group, counter, bufSize, length_ptr, counterString_ptr);
                counterString = Marshal.PtrToStringUTF8((IntPtr)counterString_ptr)!;
                Marshal.FreeCoTaskMem((IntPtr)counterString_ptr);
            }
            return counterString;
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void GetPerfMonitorCounterStringAMD(this GL.AMDExtension glInstance, uint group, uint counter, int bufSize, ref int length, out string counterString)
        {
            fixed (int* length_ptr = &length) // RefInsteadOfPointerLayer
            {
                var counterString_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                glInstance.GetPerfMonitorCounterStringAMD(group, counter, bufSize, length_ptr, counterString_ptr);
                counterString = Marshal.PtrToStringUTF8((IntPtr)counterString_ptr)!;
                Marshal.FreeCoTaskMem((IntPtr)counterString_ptr);
            }
        }

        // GetPerfMonitorCounterInfoAMD overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.VoidPtrToIntPtrOverloader
        public static unsafe void GetPerfMonitorCounterInfoAMD(this GL.AMDExtension glInstance, uint group, uint counter, GLEnum pname, IntPtr data)
        {
            var data_vptr = (void*)data;
            glInstance.GetPerfMonitorCounterInfoAMD(group, counter, pname, data_vptr);
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetPerfMonitorCounterInfoAMD<T1>(this GL.AMDExtension glInstance, uint group, uint counter, GLEnum pname, Span<T1> data)
            where T1 : unmanaged
        {
            fixed (void* data_ptr = data) // SpanOrArrayLayer
            {
                glInstance.GetPerfMonitorCounterInfoAMD(group, counter, pname, data_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetPerfMonitorCounterInfoAMD<T1>(this GL.AMDExtension glInstance, uint group, uint counter, GLEnum pname, T1[] data)
            where T1 : unmanaged
        {
            fixed (void* data_ptr = data) // SpanOrArrayLayer
            {
                glInstance.GetPerfMonitorCounterInfoAMD(group, counter, pname, data_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void GetPerfMonitorCounterInfoAMD<T1>(this GL.AMDExtension glInstance, uint group, uint counter, GLEnum pname, ref T1 data)
            where T1 : unmanaged
        {
            fixed (void* data_ptr = &data) // RefInsteadOfPointerLayer
            {
                glInstance.GetPerfMonitorCounterInfoAMD(group, counter, pname, data_ptr);
            }
        }

        // GenPerfMonitorsAMD overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GenPerfMonitorsAMD(this GL.AMDExtension glInstance, Span<uint> monitors)
        {
            var n = (int)(monitors.Length);
            fixed (uint* monitors_ptr = monitors) // SpanOrArrayLayer
            {
                glInstance.GenPerfMonitorsAMD(n, monitors_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GenPerfMonitorsAMD(this GL.AMDExtension glInstance, uint[] monitors)
        {
            var n = (int)(monitors.Length);
            fixed (uint* monitors_ptr = monitors) // SpanOrArrayLayer
            {
                glInstance.GenPerfMonitorsAMD(n, monitors_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void GenPerfMonitorsAMD(this GL.AMDExtension glInstance, int n, ref uint monitors)
        {
            fixed (uint* monitors_ptr = &monitors) // RefInsteadOfPointerLayer
            {
                glInstance.GenPerfMonitorsAMD(n, monitors_ptr);
            }
        }

        // DeletePerfMonitorsAMD overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void DeletePerfMonitorsAMD(this GL.AMDExtension glInstance, Span<uint> monitors)
        {
            var n = (int)(monitors.Length);
            fixed (uint* monitors_ptr = monitors) // SpanOrArrayLayer
            {
                glInstance.DeletePerfMonitorsAMD(n, monitors_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void DeletePerfMonitorsAMD(this GL.AMDExtension glInstance, uint[] monitors)
        {
            var n = (int)(monitors.Length);
            fixed (uint* monitors_ptr = monitors) // SpanOrArrayLayer
            {
                glInstance.DeletePerfMonitorsAMD(n, monitors_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void DeletePerfMonitorsAMD(this GL.AMDExtension glInstance, int n, ref uint monitors)
        {
            fixed (uint* monitors_ptr = &monitors) // RefInsteadOfPointerLayer
            {
                glInstance.DeletePerfMonitorsAMD(n, monitors_ptr);
            }
        }

        // SelectPerfMonitorCountersAMD overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void SelectPerfMonitorCountersAMD(this GL.AMDExtension glInstance, uint monitor, bool enable, uint group, Span<uint> counterList)
        {
            var numCounters = (int)(counterList.Length);
            fixed (uint* counterList_ptr = counterList) // SpanOrArrayLayer
            {
                var enable_byte = (byte)(enable ? 1 : 0);
                glInstance.SelectPerfMonitorCountersAMD(monitor, enable_byte, group, numCounters, counterList_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void SelectPerfMonitorCountersAMD(this GL.AMDExtension glInstance, uint monitor, bool enable, uint group, uint[] counterList)
        {
            var numCounters = (int)(counterList.Length);
            fixed (uint* counterList_ptr = counterList) // SpanOrArrayLayer
            {
                var enable_byte = (byte)(enable ? 1 : 0);
                glInstance.SelectPerfMonitorCountersAMD(monitor, enable_byte, group, numCounters, counterList_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void SelectPerfMonitorCountersAMD(this GL.AMDExtension glInstance, uint monitor, bool enable, uint group, int numCounters, ref uint counterList)
        {
            fixed (uint* counterList_ptr = &counterList) // RefInsteadOfPointerLayer
            {
                var enable_byte = (byte)(enable ? 1 : 0);
                glInstance.SelectPerfMonitorCountersAMD(monitor, enable_byte, group, numCounters, counterList_ptr);
            }
        }

        // GetPerfMonitorCounterDataAMD overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetPerfMonitorCounterDataAMD(this GL.AMDExtension glInstance, uint monitor, GLEnum pname, Span<uint> data, Span<int> bytesWritten)
        {
            var dataSize = (int)(data.Length * 4);
            fixed (uint* data_ptr = data) // SpanOrArrayLayer
            {
                fixed (int* bytesWritten_ptr = bytesWritten) // SpanOrArrayLayer
                {
                    glInstance.GetPerfMonitorCounterDataAMD(monitor, pname, dataSize, data_ptr, bytesWritten_ptr);
                }
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetPerfMonitorCounterDataAMD(this GL.AMDExtension glInstance, uint monitor, GLEnum pname, uint[] data, int[] bytesWritten)
        {
            var dataSize = (int)(data.Length * 4);
            fixed (uint* data_ptr = data) // SpanOrArrayLayer
            {
                fixed (int* bytesWritten_ptr = bytesWritten) // SpanOrArrayLayer
                {
                    glInstance.GetPerfMonitorCounterDataAMD(monitor, pname, dataSize, data_ptr, bytesWritten_ptr);
                }
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void GetPerfMonitorCounterDataAMD(this GL.AMDExtension glInstance, uint monitor, GLEnum pname, int dataSize, ref uint data, ref int bytesWritten)
        {
            fixed (uint* data_ptr = &data) // RefInsteadOfPointerLayer
            fixed (int* bytesWritten_ptr = &bytesWritten) // RefInsteadOfPointerLayer
            {
                glInstance.GetPerfMonitorCounterDataAMD(monitor, pname, dataSize, data_ptr, bytesWritten_ptr);
            }
        }
    }

#pragma warning restore IDE1006 // Naming Styles
}
