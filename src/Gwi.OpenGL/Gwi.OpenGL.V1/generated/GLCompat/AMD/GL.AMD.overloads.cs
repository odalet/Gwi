// This file is auto generated, do not edit.
using System;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;

namespace Gwi.OpenGL.GLCompat
{
#pragma warning disable IDE1006 // Naming Styles

    public static class AMDOverloads
    {
        // DebugMessageEnableAMD overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void DebugMessageEnableAMD(this GL.AMDExtension glInstance, GLEnum category, DebugSeverity severity, ReadOnlySpan<uint> ids, bool enabled)
        {
            var count = (int)(ids.Length);
            fixed (uint* ids_ptr = ids) // SpanOrArrayLayer
            {
                var enabled_byte = (byte)(enabled ? 1 : 0);
                glInstance.DebugMessageEnableAMD(category, severity, count, ids_ptr, enabled_byte);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void DebugMessageEnableAMD(this GL.AMDExtension glInstance, GLEnum category, DebugSeverity severity, uint[] ids, bool enabled)
        {
            var count = (int)(ids.Length);
            fixed (uint* ids_ptr = ids) // SpanOrArrayLayer
            {
                var enabled_byte = (byte)(enabled ? 1 : 0);
                glInstance.DebugMessageEnableAMD(category, severity, count, ids_ptr, enabled_byte);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void DebugMessageEnableAMD(this GL.AMDExtension glInstance, GLEnum category, DebugSeverity severity, int count, in uint ids, bool enabled)
        {
            fixed (uint* ids_ptr = &ids) // RefInsteadOfPointerLayer
            {
                var enabled_byte = (byte)(enabled ? 1 : 0);
                glInstance.DebugMessageEnableAMD(category, severity, count, ids_ptr, enabled_byte);
            }
        }

        // DebugMessageInsertAMD overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.Transformer
        public static unsafe void DebugMessageInsertAMD(this GL.AMDExtension glInstance, GLEnum category, DebugSeverity severity, uint id, int length, string buf)
        {
            byte* buf_ptr = (byte*)Marshal.StringToCoTaskMemUTF8(buf);
            glInstance.DebugMessageInsertAMD(category, severity, id, length, buf_ptr);
            Marshal.FreeCoTaskMem((IntPtr)buf_ptr);
        }

        // DebugMessageCallbackAMD overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.VoidPtrToIntPtrOverloader
        public static unsafe void DebugMessageCallbackAMD(this GL.AMDExtension glInstance, GLDebugProcAMD callback, IntPtr userParam)
        {
            var userParam_vptr = (void*)userParam;
            IntPtr callback_ptr = Marshal.GetFunctionPointerForDelegate(callback);
            glInstance.DebugMessageCallbackAMD(callback_ptr, userParam_vptr);
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void DebugMessageCallbackAMD<T1>(this GL.AMDExtension glInstance, GLDebugProcAMD callback, ref T1 userParam)
            where T1 : unmanaged
        {
            fixed (void* userParam_ptr = &userParam) // RefInsteadOfPointerLayer
            {
                IntPtr callback_ptr = Marshal.GetFunctionPointerForDelegate(callback);
                glInstance.DebugMessageCallbackAMD(callback_ptr, userParam_ptr);
            }
        }

        // GetDebugMessageLogAMD overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe uint GetDebugMessageLogAMD(this GL.AMDExtension glInstance, uint count, int bufSize, Span<GLEnum> categories, Span<uint> severities, Span<uint> ids, Span<int> lengths, out string message)
        {
            uint returnValue;
            fixed (GLEnum* categories_ptr = categories) // SpanOrArrayLayer
            {
                fixed (uint* severities_ptr = severities) // SpanOrArrayLayer
                {
                    fixed (uint* ids_ptr = ids) // SpanOrArrayLayer
                    {
                        fixed (int* lengths_ptr = lengths) // SpanOrArrayLayer
                        {
                            var message_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                            returnValue = glInstance.GetDebugMessageLogAMD(count, bufSize, categories_ptr, severities_ptr, ids_ptr, lengths_ptr, message_ptr);
                            message = Marshal.PtrToStringUTF8((IntPtr)message_ptr)!;
                            Marshal.FreeCoTaskMem((IntPtr)message_ptr);
                        }
                    }
                }
            }
            return returnValue;
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe uint GetDebugMessageLogAMD(this GL.AMDExtension glInstance, uint count, int bufSize, GLEnum[] categories, uint[] severities, uint[] ids, int[] lengths, out string message)
        {
            uint returnValue;
            fixed (GLEnum* categories_ptr = categories) // SpanOrArrayLayer
            {
                fixed (uint* severities_ptr = severities) // SpanOrArrayLayer
                {
                    fixed (uint* ids_ptr = ids) // SpanOrArrayLayer
                    {
                        fixed (int* lengths_ptr = lengths) // SpanOrArrayLayer
                        {
                            var message_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                            returnValue = glInstance.GetDebugMessageLogAMD(count, bufSize, categories_ptr, severities_ptr, ids_ptr, lengths_ptr, message_ptr);
                            message = Marshal.PtrToStringUTF8((IntPtr)message_ptr)!;
                            Marshal.FreeCoTaskMem((IntPtr)message_ptr);
                        }
                    }
                }
            }
            return returnValue;
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe uint GetDebugMessageLogAMD(this GL.AMDExtension glInstance, uint count, int bufSize, ref GLEnum categories, ref uint severities, ref uint ids, ref int lengths, out string message)
        {
            uint returnValue;
            fixed (GLEnum* categories_ptr = &categories) // RefInsteadOfPointerLayer
            fixed (uint* severities_ptr = &severities) // RefInsteadOfPointerLayer
            fixed (uint* ids_ptr = &ids) // RefInsteadOfPointerLayer
            fixed (int* lengths_ptr = &lengths) // RefInsteadOfPointerLayer
            {
                var message_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                returnValue = glInstance.GetDebugMessageLogAMD(count, bufSize, categories_ptr, severities_ptr, ids_ptr, lengths_ptr, message_ptr);
                message = Marshal.PtrToStringUTF8((IntPtr)message_ptr)!;
                Marshal.FreeCoTaskMem((IntPtr)message_ptr);
            }
            return returnValue;
        }

        // FramebufferSamplePositionsfvAMD overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void FramebufferSamplePositionsfvAMD(this GL.AMDExtension glInstance, FramebufferTarget target, uint numsamples, uint pixelindex, in float values)
        {
            fixed (float* values_ptr = &values) // RefInsteadOfPointerLayer
            {
                glInstance.FramebufferSamplePositionsfvAMD(target, numsamples, pixelindex, values_ptr);
            }
        }

        // NamedFramebufferSamplePositionsfvAMD overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void NamedFramebufferSamplePositionsfvAMD(this GL.AMDExtension glInstance, FramebufferHandle framebuffer, uint numsamples, uint pixelindex, in float values)
        {
            fixed (float* values_ptr = &values) // RefInsteadOfPointerLayer
            {
                glInstance.NamedFramebufferSamplePositionsfvAMD(framebuffer, numsamples, pixelindex, values_ptr);
            }
        }

        // GetFramebufferParameterfvAMD overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void GetFramebufferParameterfvAMD(this GL.AMDExtension glInstance, FramebufferTarget target, FramebufferAttachmentParameterName pname, uint numsamples, uint pixelindex, int size, ref float values)
        {
            fixed (float* values_ptr = &values) // RefInsteadOfPointerLayer
            {
                glInstance.GetFramebufferParameterfvAMD(target, pname, numsamples, pixelindex, size, values_ptr);
            }
        }

        // GetNamedFramebufferParameterfvAMD overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void GetNamedFramebufferParameterfvAMD(this GL.AMDExtension glInstance, FramebufferHandle framebuffer, GLEnum pname, uint numsamples, uint pixelindex, int size, ref float values)
        {
            fixed (float* values_ptr = &values) // RefInsteadOfPointerLayer
            {
                glInstance.GetNamedFramebufferParameterfvAMD(framebuffer, pname, numsamples, pixelindex, size, values_ptr);
            }
        }

        // Uniform1i64vNV overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void Uniform1i64vNV(this GL.AMDExtension glInstance, int location, ReadOnlySpan<long> value)
        {
            var count = (int)(value.Length / 1);
            fixed (long* value_ptr = value) // SpanOrArrayLayer
            {
                glInstance.Uniform1i64vNV(location, count, value_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void Uniform1i64vNV(this GL.AMDExtension glInstance, int location, long[] value)
        {
            var count = (int)(value.Length / 1);
            fixed (long* value_ptr = value) // SpanOrArrayLayer
            {
                glInstance.Uniform1i64vNV(location, count, value_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void Uniform1i64vNV(this GL.AMDExtension glInstance, int location, int count, in long value)
        {
            fixed (long* value_ptr = &value) // RefInsteadOfPointerLayer
            {
                glInstance.Uniform1i64vNV(location, count, value_ptr);
            }
        }

        // Uniform2i64vNV overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void Uniform2i64vNV(this GL.AMDExtension glInstance, int location, ReadOnlySpan<long> value)
        {
            var count = (int)(value.Length / 2);
            fixed (long* value_ptr = value) // SpanOrArrayLayer
            {
                glInstance.Uniform2i64vNV(location, count, value_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void Uniform2i64vNV(this GL.AMDExtension glInstance, int location, long[] value)
        {
            var count = (int)(value.Length / 2);
            fixed (long* value_ptr = value) // SpanOrArrayLayer
            {
                glInstance.Uniform2i64vNV(location, count, value_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void Uniform2i64vNV(this GL.AMDExtension glInstance, int location, int count, in long value)
        {
            fixed (long* value_ptr = &value) // RefInsteadOfPointerLayer
            {
                glInstance.Uniform2i64vNV(location, count, value_ptr);
            }
        }

        // Uniform3i64vNV overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void Uniform3i64vNV(this GL.AMDExtension glInstance, int location, ReadOnlySpan<long> value)
        {
            var count = (int)(value.Length / 3);
            fixed (long* value_ptr = value) // SpanOrArrayLayer
            {
                glInstance.Uniform3i64vNV(location, count, value_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void Uniform3i64vNV(this GL.AMDExtension glInstance, int location, long[] value)
        {
            var count = (int)(value.Length / 3);
            fixed (long* value_ptr = value) // SpanOrArrayLayer
            {
                glInstance.Uniform3i64vNV(location, count, value_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void Uniform3i64vNV(this GL.AMDExtension glInstance, int location, int count, in long value)
        {
            fixed (long* value_ptr = &value) // RefInsteadOfPointerLayer
            {
                glInstance.Uniform3i64vNV(location, count, value_ptr);
            }
        }

        // Uniform4i64vNV overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void Uniform4i64vNV(this GL.AMDExtension glInstance, int location, ReadOnlySpan<long> value)
        {
            var count = (int)(value.Length / 4);
            fixed (long* value_ptr = value) // SpanOrArrayLayer
            {
                glInstance.Uniform4i64vNV(location, count, value_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void Uniform4i64vNV(this GL.AMDExtension glInstance, int location, long[] value)
        {
            var count = (int)(value.Length / 4);
            fixed (long* value_ptr = value) // SpanOrArrayLayer
            {
                glInstance.Uniform4i64vNV(location, count, value_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void Uniform4i64vNV(this GL.AMDExtension glInstance, int location, int count, in long value)
        {
            fixed (long* value_ptr = &value) // RefInsteadOfPointerLayer
            {
                glInstance.Uniform4i64vNV(location, count, value_ptr);
            }
        }

        // Uniform1ui64vNV overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void Uniform1ui64vNV(this GL.AMDExtension glInstance, int location, ReadOnlySpan<ulong> value)
        {
            var count = (int)(value.Length / 1);
            fixed (ulong* value_ptr = value) // SpanOrArrayLayer
            {
                glInstance.Uniform1ui64vNV(location, count, value_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void Uniform1ui64vNV(this GL.AMDExtension glInstance, int location, ulong[] value)
        {
            var count = (int)(value.Length / 1);
            fixed (ulong* value_ptr = value) // SpanOrArrayLayer
            {
                glInstance.Uniform1ui64vNV(location, count, value_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void Uniform1ui64vNV(this GL.AMDExtension glInstance, int location, int count, in ulong value)
        {
            fixed (ulong* value_ptr = &value) // RefInsteadOfPointerLayer
            {
                glInstance.Uniform1ui64vNV(location, count, value_ptr);
            }
        }

        // Uniform2ui64vNV overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void Uniform2ui64vNV(this GL.AMDExtension glInstance, int location, ReadOnlySpan<ulong> value)
        {
            var count = (int)(value.Length / 2);
            fixed (ulong* value_ptr = value) // SpanOrArrayLayer
            {
                glInstance.Uniform2ui64vNV(location, count, value_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void Uniform2ui64vNV(this GL.AMDExtension glInstance, int location, ulong[] value)
        {
            var count = (int)(value.Length / 2);
            fixed (ulong* value_ptr = value) // SpanOrArrayLayer
            {
                glInstance.Uniform2ui64vNV(location, count, value_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void Uniform2ui64vNV(this GL.AMDExtension glInstance, int location, int count, in ulong value)
        {
            fixed (ulong* value_ptr = &value) // RefInsteadOfPointerLayer
            {
                glInstance.Uniform2ui64vNV(location, count, value_ptr);
            }
        }

        // Uniform3ui64vNV overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void Uniform3ui64vNV(this GL.AMDExtension glInstance, int location, ReadOnlySpan<ulong> value)
        {
            var count = (int)(value.Length / 3);
            fixed (ulong* value_ptr = value) // SpanOrArrayLayer
            {
                glInstance.Uniform3ui64vNV(location, count, value_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void Uniform3ui64vNV(this GL.AMDExtension glInstance, int location, ulong[] value)
        {
            var count = (int)(value.Length / 3);
            fixed (ulong* value_ptr = value) // SpanOrArrayLayer
            {
                glInstance.Uniform3ui64vNV(location, count, value_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void Uniform3ui64vNV(this GL.AMDExtension glInstance, int location, int count, in ulong value)
        {
            fixed (ulong* value_ptr = &value) // RefInsteadOfPointerLayer
            {
                glInstance.Uniform3ui64vNV(location, count, value_ptr);
            }
        }

        // Uniform4ui64vNV overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void Uniform4ui64vNV(this GL.AMDExtension glInstance, int location, ReadOnlySpan<ulong> value)
        {
            var count = (int)(value.Length / 4);
            fixed (ulong* value_ptr = value) // SpanOrArrayLayer
            {
                glInstance.Uniform4ui64vNV(location, count, value_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void Uniform4ui64vNV(this GL.AMDExtension glInstance, int location, ulong[] value)
        {
            var count = (int)(value.Length / 4);
            fixed (ulong* value_ptr = value) // SpanOrArrayLayer
            {
                glInstance.Uniform4ui64vNV(location, count, value_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void Uniform4ui64vNV(this GL.AMDExtension glInstance, int location, int count, in ulong value)
        {
            fixed (ulong* value_ptr = &value) // RefInsteadOfPointerLayer
            {
                glInstance.Uniform4ui64vNV(location, count, value_ptr);
            }
        }

        // GetUniformi64vNV overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetUniformi64vNV(this GL.AMDExtension glInstance, ProgramHandle program, int location, Span<long> parameters)
        {
            fixed (long* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.GetUniformi64vNV(program, location, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetUniformi64vNV(this GL.AMDExtension glInstance, ProgramHandle program, int location, long[] parameters)
        {
            fixed (long* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.GetUniformi64vNV(program, location, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void GetUniformi64vNV(this GL.AMDExtension glInstance, ProgramHandle program, int location, ref long parameters)
        {
            fixed (long* parameters_ptr = &parameters) // RefInsteadOfPointerLayer
            {
                glInstance.GetUniformi64vNV(program, location, parameters_ptr);
            }
        }

        // GetUniformui64vNV overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetUniformui64vNV(this GL.AMDExtension glInstance, ProgramHandle program, int location, Span<ulong> parameters)
        {
            fixed (ulong* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.GetUniformui64vNV(program, location, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetUniformui64vNV(this GL.AMDExtension glInstance, ProgramHandle program, int location, ulong[] parameters)
        {
            fixed (ulong* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.GetUniformui64vNV(program, location, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void GetUniformui64vNV(this GL.AMDExtension glInstance, ProgramHandle program, int location, ref ulong parameters)
        {
            fixed (ulong* parameters_ptr = &parameters) // RefInsteadOfPointerLayer
            {
                glInstance.GetUniformui64vNV(program, location, parameters_ptr);
            }
        }

        // ProgramUniform1i64vNV overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void ProgramUniform1i64vNV(this GL.AMDExtension glInstance, ProgramHandle program, int location, ReadOnlySpan<long> value)
        {
            var count = (int)(value.Length);
            fixed (long* value_ptr = value) // SpanOrArrayLayer
            {
                glInstance.ProgramUniform1i64vNV(program, location, count, value_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void ProgramUniform1i64vNV(this GL.AMDExtension glInstance, ProgramHandle program, int location, long[] value)
        {
            var count = (int)(value.Length);
            fixed (long* value_ptr = value) // SpanOrArrayLayer
            {
                glInstance.ProgramUniform1i64vNV(program, location, count, value_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void ProgramUniform1i64vNV(this GL.AMDExtension glInstance, ProgramHandle program, int location, int count, in long value)
        {
            fixed (long* value_ptr = &value) // RefInsteadOfPointerLayer
            {
                glInstance.ProgramUniform1i64vNV(program, location, count, value_ptr);
            }
        }

        // ProgramUniform2i64vNV overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void ProgramUniform2i64vNV(this GL.AMDExtension glInstance, ProgramHandle program, int location, ReadOnlySpan<long> value)
        {
            var count = (int)(value.Length / 2);
            fixed (long* value_ptr = value) // SpanOrArrayLayer
            {
                glInstance.ProgramUniform2i64vNV(program, location, count, value_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void ProgramUniform2i64vNV(this GL.AMDExtension glInstance, ProgramHandle program, int location, long[] value)
        {
            var count = (int)(value.Length / 2);
            fixed (long* value_ptr = value) // SpanOrArrayLayer
            {
                glInstance.ProgramUniform2i64vNV(program, location, count, value_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void ProgramUniform2i64vNV(this GL.AMDExtension glInstance, ProgramHandle program, int location, int count, in long value)
        {
            fixed (long* value_ptr = &value) // RefInsteadOfPointerLayer
            {
                glInstance.ProgramUniform2i64vNV(program, location, count, value_ptr);
            }
        }

        // ProgramUniform3i64vNV overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void ProgramUniform3i64vNV(this GL.AMDExtension glInstance, ProgramHandle program, int location, ReadOnlySpan<long> value)
        {
            var count = (int)(value.Length / 3);
            fixed (long* value_ptr = value) // SpanOrArrayLayer
            {
                glInstance.ProgramUniform3i64vNV(program, location, count, value_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void ProgramUniform3i64vNV(this GL.AMDExtension glInstance, ProgramHandle program, int location, long[] value)
        {
            var count = (int)(value.Length / 3);
            fixed (long* value_ptr = value) // SpanOrArrayLayer
            {
                glInstance.ProgramUniform3i64vNV(program, location, count, value_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void ProgramUniform3i64vNV(this GL.AMDExtension glInstance, ProgramHandle program, int location, int count, in long value)
        {
            fixed (long* value_ptr = &value) // RefInsteadOfPointerLayer
            {
                glInstance.ProgramUniform3i64vNV(program, location, count, value_ptr);
            }
        }

        // ProgramUniform4i64vNV overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void ProgramUniform4i64vNV(this GL.AMDExtension glInstance, ProgramHandle program, int location, ReadOnlySpan<long> value)
        {
            var count = (int)(value.Length / 4);
            fixed (long* value_ptr = value) // SpanOrArrayLayer
            {
                glInstance.ProgramUniform4i64vNV(program, location, count, value_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void ProgramUniform4i64vNV(this GL.AMDExtension glInstance, ProgramHandle program, int location, long[] value)
        {
            var count = (int)(value.Length / 4);
            fixed (long* value_ptr = value) // SpanOrArrayLayer
            {
                glInstance.ProgramUniform4i64vNV(program, location, count, value_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void ProgramUniform4i64vNV(this GL.AMDExtension glInstance, ProgramHandle program, int location, int count, in long value)
        {
            fixed (long* value_ptr = &value) // RefInsteadOfPointerLayer
            {
                glInstance.ProgramUniform4i64vNV(program, location, count, value_ptr);
            }
        }

        // ProgramUniform1ui64vNV overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void ProgramUniform1ui64vNV(this GL.AMDExtension glInstance, ProgramHandle program, int location, ReadOnlySpan<ulong> value)
        {
            var count = (int)(value.Length);
            fixed (ulong* value_ptr = value) // SpanOrArrayLayer
            {
                glInstance.ProgramUniform1ui64vNV(program, location, count, value_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void ProgramUniform1ui64vNV(this GL.AMDExtension glInstance, ProgramHandle program, int location, ulong[] value)
        {
            var count = (int)(value.Length);
            fixed (ulong* value_ptr = value) // SpanOrArrayLayer
            {
                glInstance.ProgramUniform1ui64vNV(program, location, count, value_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void ProgramUniform1ui64vNV(this GL.AMDExtension glInstance, ProgramHandle program, int location, int count, in ulong value)
        {
            fixed (ulong* value_ptr = &value) // RefInsteadOfPointerLayer
            {
                glInstance.ProgramUniform1ui64vNV(program, location, count, value_ptr);
            }
        }

        // ProgramUniform2ui64vNV overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void ProgramUniform2ui64vNV(this GL.AMDExtension glInstance, ProgramHandle program, int location, ReadOnlySpan<ulong> value)
        {
            var count = (int)(value.Length / 2);
            fixed (ulong* value_ptr = value) // SpanOrArrayLayer
            {
                glInstance.ProgramUniform2ui64vNV(program, location, count, value_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void ProgramUniform2ui64vNV(this GL.AMDExtension glInstance, ProgramHandle program, int location, ulong[] value)
        {
            var count = (int)(value.Length / 2);
            fixed (ulong* value_ptr = value) // SpanOrArrayLayer
            {
                glInstance.ProgramUniform2ui64vNV(program, location, count, value_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void ProgramUniform2ui64vNV(this GL.AMDExtension glInstance, ProgramHandle program, int location, int count, in ulong value)
        {
            fixed (ulong* value_ptr = &value) // RefInsteadOfPointerLayer
            {
                glInstance.ProgramUniform2ui64vNV(program, location, count, value_ptr);
            }
        }

        // ProgramUniform3ui64vNV overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void ProgramUniform3ui64vNV(this GL.AMDExtension glInstance, ProgramHandle program, int location, ReadOnlySpan<ulong> value)
        {
            var count = (int)(value.Length / 3);
            fixed (ulong* value_ptr = value) // SpanOrArrayLayer
            {
                glInstance.ProgramUniform3ui64vNV(program, location, count, value_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void ProgramUniform3ui64vNV(this GL.AMDExtension glInstance, ProgramHandle program, int location, ulong[] value)
        {
            var count = (int)(value.Length / 3);
            fixed (ulong* value_ptr = value) // SpanOrArrayLayer
            {
                glInstance.ProgramUniform3ui64vNV(program, location, count, value_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void ProgramUniform3ui64vNV(this GL.AMDExtension glInstance, ProgramHandle program, int location, int count, in ulong value)
        {
            fixed (ulong* value_ptr = &value) // RefInsteadOfPointerLayer
            {
                glInstance.ProgramUniform3ui64vNV(program, location, count, value_ptr);
            }
        }

        // ProgramUniform4ui64vNV overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void ProgramUniform4ui64vNV(this GL.AMDExtension glInstance, ProgramHandle program, int location, ReadOnlySpan<ulong> value)
        {
            var count = (int)(value.Length / 4);
            fixed (ulong* value_ptr = value) // SpanOrArrayLayer
            {
                glInstance.ProgramUniform4ui64vNV(program, location, count, value_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void ProgramUniform4ui64vNV(this GL.AMDExtension glInstance, ProgramHandle program, int location, ulong[] value)
        {
            var count = (int)(value.Length / 4);
            fixed (ulong* value_ptr = value) // SpanOrArrayLayer
            {
                glInstance.ProgramUniform4ui64vNV(program, location, count, value_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void ProgramUniform4ui64vNV(this GL.AMDExtension glInstance, ProgramHandle program, int location, int count, in ulong value)
        {
            fixed (ulong* value_ptr = &value) // RefInsteadOfPointerLayer
            {
                glInstance.ProgramUniform4ui64vNV(program, location, count, value_ptr);
            }
        }

        // MultiDrawArraysIndirectAMD overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.VoidPtrToIntPtrOverloader
        public static unsafe void MultiDrawArraysIndirectAMD(this GL.AMDExtension glInstance, PrimitiveType mode, IntPtr indirect, int primcount, int stride)
        {
            var indirect_vptr = (void*)indirect;
            glInstance.MultiDrawArraysIndirectAMD(mode, indirect_vptr, primcount, stride);
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void MultiDrawArraysIndirectAMD<T1>(this GL.AMDExtension glInstance, PrimitiveType mode, ReadOnlySpan<T1> indirect, int primcount, int stride)
            where T1 : unmanaged
        {
            fixed (void* indirect_ptr = indirect) // SpanOrArrayLayer
            {
                glInstance.MultiDrawArraysIndirectAMD(mode, indirect_ptr, primcount, stride);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void MultiDrawArraysIndirectAMD<T1>(this GL.AMDExtension glInstance, PrimitiveType mode, T1[] indirect, int primcount, int stride)
            where T1 : unmanaged
        {
            fixed (void* indirect_ptr = indirect) // SpanOrArrayLayer
            {
                glInstance.MultiDrawArraysIndirectAMD(mode, indirect_ptr, primcount, stride);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void MultiDrawArraysIndirectAMD<T1>(this GL.AMDExtension glInstance, PrimitiveType mode, in T1 indirect, int primcount, int stride)
            where T1 : unmanaged
        {
            fixed (void* indirect_ptr = &indirect) // RefInsteadOfPointerLayer
            {
                glInstance.MultiDrawArraysIndirectAMD(mode, indirect_ptr, primcount, stride);
            }
        }

        // MultiDrawElementsIndirectAMD overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.VoidPtrToIntPtrOverloader
        public static unsafe void MultiDrawElementsIndirectAMD(this GL.AMDExtension glInstance, PrimitiveType mode, DrawElementsType type, IntPtr indirect, int primcount, int stride)
        {
            var indirect_vptr = (void*)indirect;
            glInstance.MultiDrawElementsIndirectAMD(mode, type, indirect_vptr, primcount, stride);
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void MultiDrawElementsIndirectAMD<T1>(this GL.AMDExtension glInstance, PrimitiveType mode, DrawElementsType type, ReadOnlySpan<T1> indirect, int primcount, int stride)
            where T1 : unmanaged
        {
            fixed (void* indirect_ptr = indirect) // SpanOrArrayLayer
            {
                glInstance.MultiDrawElementsIndirectAMD(mode, type, indirect_ptr, primcount, stride);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void MultiDrawElementsIndirectAMD<T1>(this GL.AMDExtension glInstance, PrimitiveType mode, DrawElementsType type, T1[] indirect, int primcount, int stride)
            where T1 : unmanaged
        {
            fixed (void* indirect_ptr = indirect) // SpanOrArrayLayer
            {
                glInstance.MultiDrawElementsIndirectAMD(mode, type, indirect_ptr, primcount, stride);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void MultiDrawElementsIndirectAMD<T1>(this GL.AMDExtension glInstance, PrimitiveType mode, DrawElementsType type, in T1 indirect, int primcount, int stride)
            where T1 : unmanaged
        {
            fixed (void* indirect_ptr = &indirect) // RefInsteadOfPointerLayer
            {
                glInstance.MultiDrawElementsIndirectAMD(mode, type, indirect_ptr, primcount, stride);
            }
        }

        // GenNamesAMD overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GenNamesAMD(this GL.AMDExtension glInstance, GLEnum identifier, Span<uint> names)
        {
            var num = (uint)(names.Length);
            fixed (uint* names_ptr = names) // SpanOrArrayLayer
            {
                glInstance.GenNamesAMD(identifier, num, names_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GenNamesAMD(this GL.AMDExtension glInstance, GLEnum identifier, uint[] names)
        {
            var num = (uint)(names.Length);
            fixed (uint* names_ptr = names) // SpanOrArrayLayer
            {
                glInstance.GenNamesAMD(identifier, num, names_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void GenNamesAMD(this GL.AMDExtension glInstance, GLEnum identifier, uint num, ref uint names)
        {
            fixed (uint* names_ptr = &names) // RefInsteadOfPointerLayer
            {
                glInstance.GenNamesAMD(identifier, num, names_ptr);
            }
        }

        // DeleteNamesAMD overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void DeleteNamesAMD(this GL.AMDExtension glInstance, GLEnum identifier, ReadOnlySpan<uint> names)
        {
            var num = (uint)(names.Length);
            fixed (uint* names_ptr = names) // SpanOrArrayLayer
            {
                glInstance.DeleteNamesAMD(identifier, num, names_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void DeleteNamesAMD(this GL.AMDExtension glInstance, GLEnum identifier, uint[] names)
        {
            var num = (uint)(names.Length);
            fixed (uint* names_ptr = names) // SpanOrArrayLayer
            {
                glInstance.DeleteNamesAMD(identifier, num, names_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void DeleteNamesAMD(this GL.AMDExtension glInstance, GLEnum identifier, uint num, in uint names)
        {
            fixed (uint* names_ptr = &names) // RefInsteadOfPointerLayer
            {
                glInstance.DeleteNamesAMD(identifier, num, names_ptr);
            }
        }

        // GetPerfMonitorGroupsAMD overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetPerfMonitorGroupsAMD(this GL.AMDExtension glInstance, Span<int> numGroups, Span<uint> groups)
        {
            fixed (int* numGroups_ptr = numGroups) // SpanOrArrayLayer
            {
                var groupsSize = (int)(groups.Length);
                fixed (uint* groups_ptr = groups) // SpanOrArrayLayer
                {
                    glInstance.GetPerfMonitorGroupsAMD(numGroups_ptr, groupsSize, groups_ptr);
                }
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetPerfMonitorGroupsAMD(this GL.AMDExtension glInstance, int[] numGroups, uint[] groups)
        {
            fixed (int* numGroups_ptr = numGroups) // SpanOrArrayLayer
            {
                var groupsSize = (int)(groups.Length);
                fixed (uint* groups_ptr = groups) // SpanOrArrayLayer
                {
                    glInstance.GetPerfMonitorGroupsAMD(numGroups_ptr, groupsSize, groups_ptr);
                }
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void GetPerfMonitorGroupsAMD(this GL.AMDExtension glInstance, ref int numGroups, int groupsSize, ref uint groups)
        {
            fixed (int* numGroups_ptr = &numGroups) // RefInsteadOfPointerLayer
            fixed (uint* groups_ptr = &groups) // RefInsteadOfPointerLayer
            {
                glInstance.GetPerfMonitorGroupsAMD(numGroups_ptr, groupsSize, groups_ptr);
            }
        }

        // GetPerfMonitorCountersAMD overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetPerfMonitorCountersAMD(this GL.AMDExtension glInstance, uint group, Span<int> numCounters, Span<int> maxActiveCounters, Span<uint> counters)
        {
            fixed (int* numCounters_ptr = numCounters) // SpanOrArrayLayer
            {
                fixed (int* maxActiveCounters_ptr = maxActiveCounters) // SpanOrArrayLayer
                {
                    var counterSize = (int)(counters.Length);
                    fixed (uint* counters_ptr = counters) // SpanOrArrayLayer
                    {
                        glInstance.GetPerfMonitorCountersAMD(group, numCounters_ptr, maxActiveCounters_ptr, counterSize, counters_ptr);
                    }
                }
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetPerfMonitorCountersAMD(this GL.AMDExtension glInstance, uint group, int[] numCounters, int[] maxActiveCounters, uint[] counters)
        {
            fixed (int* numCounters_ptr = numCounters) // SpanOrArrayLayer
            {
                fixed (int* maxActiveCounters_ptr = maxActiveCounters) // SpanOrArrayLayer
                {
                    var counterSize = (int)(counters.Length);
                    fixed (uint* counters_ptr = counters) // SpanOrArrayLayer
                    {
                        glInstance.GetPerfMonitorCountersAMD(group, numCounters_ptr, maxActiveCounters_ptr, counterSize, counters_ptr);
                    }
                }
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void GetPerfMonitorCountersAMD(this GL.AMDExtension glInstance, uint group, ref int numCounters, ref int maxActiveCounters, int counterSize, ref uint counters)
        {
            fixed (int* numCounters_ptr = &numCounters) // RefInsteadOfPointerLayer
            fixed (int* maxActiveCounters_ptr = &maxActiveCounters) // RefInsteadOfPointerLayer
            fixed (uint* counters_ptr = &counters) // RefInsteadOfPointerLayer
            {
                glInstance.GetPerfMonitorCountersAMD(group, numCounters_ptr, maxActiveCounters_ptr, counterSize, counters_ptr);
            }
        }

        // GetPerfMonitorGroupStringAMD overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.OutToReturnOverloader
        public static unsafe string GetPerfMonitorGroupStringAMD(this GL.AMDExtension glInstance, uint group, int bufSize, Span<int> length)
        {
            string groupString;
            fixed (int* length_ptr = length) // SpanOrArrayLayer
            {
                var groupString_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                glInstance.GetPerfMonitorGroupStringAMD(group, bufSize, length_ptr, groupString_ptr);
                groupString = Marshal.PtrToStringUTF8((IntPtr)groupString_ptr)!;
                Marshal.FreeCoTaskMem((IntPtr)groupString_ptr);
            }
            return groupString;
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetPerfMonitorGroupStringAMD(this GL.AMDExtension glInstance, uint group, int bufSize, Span<int> length, out string groupString)
        {
            fixed (int* length_ptr = length) // SpanOrArrayLayer
            {
                var groupString_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                glInstance.GetPerfMonitorGroupStringAMD(group, bufSize, length_ptr, groupString_ptr);
                groupString = Marshal.PtrToStringUTF8((IntPtr)groupString_ptr)!;
                Marshal.FreeCoTaskMem((IntPtr)groupString_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.OutToReturnOverloader
        public static unsafe string GetPerfMonitorGroupStringAMD(this GL.AMDExtension glInstance, uint group, int bufSize, int[] length)
        {
            string groupString;
            fixed (int* length_ptr = length) // SpanOrArrayLayer
            {
                var groupString_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                glInstance.GetPerfMonitorGroupStringAMD(group, bufSize, length_ptr, groupString_ptr);
                groupString = Marshal.PtrToStringUTF8((IntPtr)groupString_ptr)!;
                Marshal.FreeCoTaskMem((IntPtr)groupString_ptr);
            }
            return groupString;
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetPerfMonitorGroupStringAMD(this GL.AMDExtension glInstance, uint group, int bufSize, int[] length, out string groupString)
        {
            fixed (int* length_ptr = length) // SpanOrArrayLayer
            {
                var groupString_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                glInstance.GetPerfMonitorGroupStringAMD(group, bufSize, length_ptr, groupString_ptr);
                groupString = Marshal.PtrToStringUTF8((IntPtr)groupString_ptr)!;
                Marshal.FreeCoTaskMem((IntPtr)groupString_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.OutToReturnOverloader
        public static unsafe string GetPerfMonitorGroupStringAMD(this GL.AMDExtension glInstance, uint group, int bufSize, ref int length)
        {
            string groupString;
            fixed (int* length_ptr = &length) // RefInsteadOfPointerLayer
            {
                var groupString_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                glInstance.GetPerfMonitorGroupStringAMD(group, bufSize, length_ptr, groupString_ptr);
                groupString = Marshal.PtrToStringUTF8((IntPtr)groupString_ptr)!;
                Marshal.FreeCoTaskMem((IntPtr)groupString_ptr);
            }
            return groupString;
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void GetPerfMonitorGroupStringAMD(this GL.AMDExtension glInstance, uint group, int bufSize, ref int length, out string groupString)
        {
            fixed (int* length_ptr = &length) // RefInsteadOfPointerLayer
            {
                var groupString_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                glInstance.GetPerfMonitorGroupStringAMD(group, bufSize, length_ptr, groupString_ptr);
                groupString = Marshal.PtrToStringUTF8((IntPtr)groupString_ptr)!;
                Marshal.FreeCoTaskMem((IntPtr)groupString_ptr);
            }
        }

        // GetPerfMonitorCounterStringAMD overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.OutToReturnOverloader
        public static unsafe string GetPerfMonitorCounterStringAMD(this GL.AMDExtension glInstance, uint group, uint counter, int bufSize, Span<int> length)
        {
            string counterString;
            fixed (int* length_ptr = length) // SpanOrArrayLayer
            {
                var counterString_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                glInstance.GetPerfMonitorCounterStringAMD(group, counter, bufSize, length_ptr, counterString_ptr);
                counterString = Marshal.PtrToStringUTF8((IntPtr)counterString_ptr)!;
                Marshal.FreeCoTaskMem((IntPtr)counterString_ptr);
            }
            return counterString;
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetPerfMonitorCounterStringAMD(this GL.AMDExtension glInstance, uint group, uint counter, int bufSize, Span<int> length, out string counterString)
        {
            fixed (int* length_ptr = length) // SpanOrArrayLayer
            {
                var counterString_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                glInstance.GetPerfMonitorCounterStringAMD(group, counter, bufSize, length_ptr, counterString_ptr);
                counterString = Marshal.PtrToStringUTF8((IntPtr)counterString_ptr)!;
                Marshal.FreeCoTaskMem((IntPtr)counterString_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.OutToReturnOverloader
        public static unsafe string GetPerfMonitorCounterStringAMD(this GL.AMDExtension glInstance, uint group, uint counter, int bufSize, int[] length)
        {
            string counterString;
            fixed (int* length_ptr = length) // SpanOrArrayLayer
            {
                var counterString_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                glInstance.GetPerfMonitorCounterStringAMD(group, counter, bufSize, length_ptr, counterString_ptr);
                counterString = Marshal.PtrToStringUTF8((IntPtr)counterString_ptr)!;
                Marshal.FreeCoTaskMem((IntPtr)counterString_ptr);
            }
            return counterString;
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetPerfMonitorCounterStringAMD(this GL.AMDExtension glInstance, uint group, uint counter, int bufSize, int[] length, out string counterString)
        {
            fixed (int* length_ptr = length) // SpanOrArrayLayer
            {
                var counterString_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                glInstance.GetPerfMonitorCounterStringAMD(group, counter, bufSize, length_ptr, counterString_ptr);
                counterString = Marshal.PtrToStringUTF8((IntPtr)counterString_ptr)!;
                Marshal.FreeCoTaskMem((IntPtr)counterString_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.OutToReturnOverloader
        public static unsafe string GetPerfMonitorCounterStringAMD(this GL.AMDExtension glInstance, uint group, uint counter, int bufSize, ref int length)
        {
            string counterString;
            fixed (int* length_ptr = &length) // RefInsteadOfPointerLayer
            {
                var counterString_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                glInstance.GetPerfMonitorCounterStringAMD(group, counter, bufSize, length_ptr, counterString_ptr);
                counterString = Marshal.PtrToStringUTF8((IntPtr)counterString_ptr)!;
                Marshal.FreeCoTaskMem((IntPtr)counterString_ptr);
            }
            return counterString;
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void GetPerfMonitorCounterStringAMD(this GL.AMDExtension glInstance, uint group, uint counter, int bufSize, ref int length, out string counterString)
        {
            fixed (int* length_ptr = &length) // RefInsteadOfPointerLayer
            {
                var counterString_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                glInstance.GetPerfMonitorCounterStringAMD(group, counter, bufSize, length_ptr, counterString_ptr);
                counterString = Marshal.PtrToStringUTF8((IntPtr)counterString_ptr)!;
                Marshal.FreeCoTaskMem((IntPtr)counterString_ptr);
            }
        }

        // GetPerfMonitorCounterInfoAMD overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.VoidPtrToIntPtrOverloader
        public static unsafe void GetPerfMonitorCounterInfoAMD(this GL.AMDExtension glInstance, uint group, uint counter, GLEnum pname, IntPtr data)
        {
            var data_vptr = (void*)data;
            glInstance.GetPerfMonitorCounterInfoAMD(group, counter, pname, data_vptr);
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetPerfMonitorCounterInfoAMD<T1>(this GL.AMDExtension glInstance, uint group, uint counter, GLEnum pname, Span<T1> data)
            where T1 : unmanaged
        {
            fixed (void* data_ptr = data) // SpanOrArrayLayer
            {
                glInstance.GetPerfMonitorCounterInfoAMD(group, counter, pname, data_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetPerfMonitorCounterInfoAMD<T1>(this GL.AMDExtension glInstance, uint group, uint counter, GLEnum pname, T1[] data)
            where T1 : unmanaged
        {
            fixed (void* data_ptr = data) // SpanOrArrayLayer
            {
                glInstance.GetPerfMonitorCounterInfoAMD(group, counter, pname, data_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void GetPerfMonitorCounterInfoAMD<T1>(this GL.AMDExtension glInstance, uint group, uint counter, GLEnum pname, ref T1 data)
            where T1 : unmanaged
        {
            fixed (void* data_ptr = &data) // RefInsteadOfPointerLayer
            {
                glInstance.GetPerfMonitorCounterInfoAMD(group, counter, pname, data_ptr);
            }
        }

        // GenPerfMonitorsAMD overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GenPerfMonitorsAMD(this GL.AMDExtension glInstance, Span<uint> monitors)
        {
            var n = (int)(monitors.Length);
            fixed (uint* monitors_ptr = monitors) // SpanOrArrayLayer
            {
                glInstance.GenPerfMonitorsAMD(n, monitors_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GenPerfMonitorsAMD(this GL.AMDExtension glInstance, uint[] monitors)
        {
            var n = (int)(monitors.Length);
            fixed (uint* monitors_ptr = monitors) // SpanOrArrayLayer
            {
                glInstance.GenPerfMonitorsAMD(n, monitors_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void GenPerfMonitorsAMD(this GL.AMDExtension glInstance, int n, ref uint monitors)
        {
            fixed (uint* monitors_ptr = &monitors) // RefInsteadOfPointerLayer
            {
                glInstance.GenPerfMonitorsAMD(n, monitors_ptr);
            }
        }

        // DeletePerfMonitorsAMD overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void DeletePerfMonitorsAMD(this GL.AMDExtension glInstance, Span<uint> monitors)
        {
            var n = (int)(monitors.Length);
            fixed (uint* monitors_ptr = monitors) // SpanOrArrayLayer
            {
                glInstance.DeletePerfMonitorsAMD(n, monitors_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void DeletePerfMonitorsAMD(this GL.AMDExtension glInstance, uint[] monitors)
        {
            var n = (int)(monitors.Length);
            fixed (uint* monitors_ptr = monitors) // SpanOrArrayLayer
            {
                glInstance.DeletePerfMonitorsAMD(n, monitors_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void DeletePerfMonitorsAMD(this GL.AMDExtension glInstance, int n, ref uint monitors)
        {
            fixed (uint* monitors_ptr = &monitors) // RefInsteadOfPointerLayer
            {
                glInstance.DeletePerfMonitorsAMD(n, monitors_ptr);
            }
        }

        // SelectPerfMonitorCountersAMD overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void SelectPerfMonitorCountersAMD(this GL.AMDExtension glInstance, uint monitor, bool enable, uint group, Span<uint> counterList)
        {
            var numCounters = (int)(counterList.Length);
            fixed (uint* counterList_ptr = counterList) // SpanOrArrayLayer
            {
                var enable_byte = (byte)(enable ? 1 : 0);
                glInstance.SelectPerfMonitorCountersAMD(monitor, enable_byte, group, numCounters, counterList_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void SelectPerfMonitorCountersAMD(this GL.AMDExtension glInstance, uint monitor, bool enable, uint group, uint[] counterList)
        {
            var numCounters = (int)(counterList.Length);
            fixed (uint* counterList_ptr = counterList) // SpanOrArrayLayer
            {
                var enable_byte = (byte)(enable ? 1 : 0);
                glInstance.SelectPerfMonitorCountersAMD(monitor, enable_byte, group, numCounters, counterList_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void SelectPerfMonitorCountersAMD(this GL.AMDExtension glInstance, uint monitor, bool enable, uint group, int numCounters, ref uint counterList)
        {
            fixed (uint* counterList_ptr = &counterList) // RefInsteadOfPointerLayer
            {
                var enable_byte = (byte)(enable ? 1 : 0);
                glInstance.SelectPerfMonitorCountersAMD(monitor, enable_byte, group, numCounters, counterList_ptr);
            }
        }

        // GetPerfMonitorCounterDataAMD overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetPerfMonitorCounterDataAMD(this GL.AMDExtension glInstance, uint monitor, GLEnum pname, Span<uint> data, Span<int> bytesWritten)
        {
            var dataSize = (int)(data.Length * 4);
            fixed (uint* data_ptr = data) // SpanOrArrayLayer
            {
                fixed (int* bytesWritten_ptr = bytesWritten) // SpanOrArrayLayer
                {
                    glInstance.GetPerfMonitorCounterDataAMD(monitor, pname, dataSize, data_ptr, bytesWritten_ptr);
                }
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetPerfMonitorCounterDataAMD(this GL.AMDExtension glInstance, uint monitor, GLEnum pname, uint[] data, int[] bytesWritten)
        {
            var dataSize = (int)(data.Length * 4);
            fixed (uint* data_ptr = data) // SpanOrArrayLayer
            {
                fixed (int* bytesWritten_ptr = bytesWritten) // SpanOrArrayLayer
                {
                    glInstance.GetPerfMonitorCounterDataAMD(monitor, pname, dataSize, data_ptr, bytesWritten_ptr);
                }
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void GetPerfMonitorCounterDataAMD(this GL.AMDExtension glInstance, uint monitor, GLEnum pname, int dataSize, ref uint data, ref int bytesWritten)
        {
            fixed (uint* data_ptr = &data) // RefInsteadOfPointerLayer
            fixed (int* bytesWritten_ptr = &bytesWritten) // RefInsteadOfPointerLayer
            {
                glInstance.GetPerfMonitorCounterDataAMD(monitor, pname, dataSize, data_ptr, bytesWritten_ptr);
            }
        }

        // SetMultisamplefvAMD overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void SetMultisamplefvAMD(this GL.AMDExtension glInstance, GLEnum pname, uint index, ReadOnlySpan<float> val)
        {
            fixed (float* val_ptr = val) // SpanOrArrayLayer
            {
                glInstance.SetMultisamplefvAMD(pname, index, val_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void SetMultisamplefvAMD(this GL.AMDExtension glInstance, GLEnum pname, uint index, float[] val)
        {
            fixed (float* val_ptr = val) // SpanOrArrayLayer
            {
                glInstance.SetMultisamplefvAMD(pname, index, val_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void SetMultisamplefvAMD(this GL.AMDExtension glInstance, GLEnum pname, uint index, in float val)
        {
            fixed (float* val_ptr = &val) // RefInsteadOfPointerLayer
            {
                glInstance.SetMultisamplefvAMD(pname, index, val_ptr);
            }
        }
    }

#pragma warning restore IDE1006 // Naming Styles
}
