// This file is auto generated, do not edit.
using System;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;

namespace Gwi.OpenGL.GLCompat
{
#pragma warning disable IDE1006 // Naming Styles

    public static class INTELOverloads
    {
        // MapTexture2DINTEL overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void* MapTexture2DINTEL(this GL.INTELExtension glInstance, TextureHandle texture, int level, GLEnum access, Span<int> stride, Span<GLEnum> layout)
        {
            void* returnValue;
            fixed (int* stride_ptr = stride) // SpanOrArrayLayer
            {
                fixed (GLEnum* layout_ptr = layout) // SpanOrArrayLayer
                {
                    returnValue = glInstance.MapTexture2DINTEL(texture, level, access, stride_ptr, layout_ptr);
                }
            }
            return returnValue;
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void* MapTexture2DINTEL(this GL.INTELExtension glInstance, TextureHandle texture, int level, GLEnum access, int[] stride, GLEnum[] layout)
        {
            void* returnValue;
            fixed (int* stride_ptr = stride) // SpanOrArrayLayer
            {
                fixed (GLEnum* layout_ptr = layout) // SpanOrArrayLayer
                {
                    returnValue = glInstance.MapTexture2DINTEL(texture, level, access, stride_ptr, layout_ptr);
                }
            }
            return returnValue;
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void* MapTexture2DINTEL(this GL.INTELExtension glInstance, TextureHandle texture, int level, GLEnum access, ref int stride, ref GLEnum layout)
        {
            void* returnValue;
            fixed (int* stride_ptr = &stride) // RefInsteadOfPointerLayer
            fixed (GLEnum* layout_ptr = &layout) // RefInsteadOfPointerLayer
            {
                returnValue = glInstance.MapTexture2DINTEL(texture, level, access, stride_ptr, layout_ptr);
            }
            return returnValue;
        }

        // CreatePerfQueryINTEL overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void CreatePerfQueryINTEL(this GL.INTELExtension glInstance, uint queryId, ref uint queryHandle)
        {
            fixed (uint* queryHandle_ptr = &queryHandle) // RefInsteadOfPointerLayer
            {
                glInstance.CreatePerfQueryINTEL(queryId, queryHandle_ptr);
            }
        }

        // GetFirstPerfQueryIdINTEL overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void GetFirstPerfQueryIdINTEL(this GL.INTELExtension glInstance, ref uint queryId)
        {
            fixed (uint* queryId_ptr = &queryId) // RefInsteadOfPointerLayer
            {
                glInstance.GetFirstPerfQueryIdINTEL(queryId_ptr);
            }
        }

        // GetNextPerfQueryIdINTEL overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void GetNextPerfQueryIdINTEL(this GL.INTELExtension glInstance, uint queryId, ref uint nextQueryId)
        {
            fixed (uint* nextQueryId_ptr = &nextQueryId) // RefInsteadOfPointerLayer
            {
                glInstance.GetNextPerfQueryIdINTEL(queryId, nextQueryId_ptr);
            }
        }

        // GetPerfCounterInfoINTEL overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void GetPerfCounterInfoINTEL(this GL.INTELExtension glInstance, uint queryId, uint counterId, uint counterNameLength, out string counterName, uint counterDescLength, out string counterDesc, ref uint counterOffset, ref uint counterDataSize, ref uint counterTypeEnum, ref uint counterDataTypeEnum, ref ulong rawCounterMaxValue)
        {
            fixed (uint* counterOffset_ptr = &counterOffset) // RefInsteadOfPointerLayer
            fixed (uint* counterDataSize_ptr = &counterDataSize) // RefInsteadOfPointerLayer
            fixed (uint* counterTypeEnum_ptr = &counterTypeEnum) // RefInsteadOfPointerLayer
            fixed (uint* counterDataTypeEnum_ptr = &counterDataTypeEnum) // RefInsteadOfPointerLayer
            fixed (ulong* rawCounterMaxValue_ptr = &rawCounterMaxValue) // RefInsteadOfPointerLayer
            {
                var counterName_ptr = (byte*)Marshal.AllocCoTaskMem((int)counterNameLength);
                var counterDesc_ptr = (byte*)Marshal.AllocCoTaskMem((int)counterDescLength);
                glInstance.GetPerfCounterInfoINTEL(queryId, counterId, counterNameLength, counterName_ptr, counterDescLength, counterDesc_ptr, counterOffset_ptr, counterDataSize_ptr, counterTypeEnum_ptr, counterDataTypeEnum_ptr, rawCounterMaxValue_ptr);
                counterDesc = Marshal.PtrToStringUTF8((IntPtr)counterDesc_ptr)!;
                Marshal.FreeCoTaskMem((IntPtr)counterDesc_ptr);
                counterName = Marshal.PtrToStringUTF8((IntPtr)counterName_ptr)!;
                Marshal.FreeCoTaskMem((IntPtr)counterName_ptr);
            }
        }

        // GetPerfQueryDataINTEL overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void GetPerfQueryDataINTEL(this GL.INTELExtension glInstance, uint queryHandle, uint flags, int dataSize, IntPtr data, ref uint bytesWritten)
        {
            fixed (uint* bytesWritten_ptr = &bytesWritten) // RefInsteadOfPointerLayer
            {
                var data_vptr = (void*)data;
                glInstance.GetPerfQueryDataINTEL(queryHandle, flags, dataSize, data_vptr, bytesWritten_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void GetPerfQueryDataINTEL<T1>(this GL.INTELExtension glInstance, uint queryHandle, uint flags, int dataSize, ref T1 data, ref uint bytesWritten)
            where T1 : unmanaged
        {
            fixed (void* data_ptr = &data) // RefInsteadOfPointerLayer
            fixed (uint* bytesWritten_ptr = &bytesWritten) // RefInsteadOfPointerLayer
            {
                glInstance.GetPerfQueryDataINTEL(queryHandle, flags, dataSize, data_ptr, bytesWritten_ptr);
            }
        }

        // GetPerfQueryIdByNameINTEL overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void GetPerfQueryIdByNameINTEL(this GL.INTELExtension glInstance, byte* queryName, ref uint queryId)
        {
            fixed (uint* queryId_ptr = &queryId) // RefInsteadOfPointerLayer
            {
                glInstance.GetPerfQueryIdByNameINTEL(queryName, queryId_ptr);
            }
        }

        // GetPerfQueryInfoINTEL overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.OutToReturnOverloader
        public static unsafe string GetPerfQueryInfoINTEL(this GL.INTELExtension glInstance, uint queryId, uint queryNameLength, ref uint dataSize, ref uint noCounters, ref uint noInstances, ref uint capsMask)
        {
            string queryName;
            fixed (uint* dataSize_ptr = &dataSize) // RefInsteadOfPointerLayer
            fixed (uint* noCounters_ptr = &noCounters) // RefInsteadOfPointerLayer
            fixed (uint* noInstances_ptr = &noInstances) // RefInsteadOfPointerLayer
            fixed (uint* capsMask_ptr = &capsMask) // RefInsteadOfPointerLayer
            {
                var queryName_ptr = (byte*)Marshal.AllocCoTaskMem((int)queryNameLength);
                glInstance.GetPerfQueryInfoINTEL(queryId, queryNameLength, queryName_ptr, dataSize_ptr, noCounters_ptr, noInstances_ptr, capsMask_ptr);
                queryName = Marshal.PtrToStringUTF8((IntPtr)queryName_ptr)!;
                Marshal.FreeCoTaskMem((IntPtr)queryName_ptr);
            }
            return queryName;
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void GetPerfQueryInfoINTEL(this GL.INTELExtension glInstance, uint queryId, uint queryNameLength, out string queryName, ref uint dataSize, ref uint noCounters, ref uint noInstances, ref uint capsMask)
        {
            fixed (uint* dataSize_ptr = &dataSize) // RefInsteadOfPointerLayer
            fixed (uint* noCounters_ptr = &noCounters) // RefInsteadOfPointerLayer
            fixed (uint* noInstances_ptr = &noInstances) // RefInsteadOfPointerLayer
            fixed (uint* capsMask_ptr = &capsMask) // RefInsteadOfPointerLayer
            {
                var queryName_ptr = (byte*)Marshal.AllocCoTaskMem((int)queryNameLength);
                glInstance.GetPerfQueryInfoINTEL(queryId, queryNameLength, queryName_ptr, dataSize_ptr, noCounters_ptr, noInstances_ptr, capsMask_ptr);
                queryName = Marshal.PtrToStringUTF8((IntPtr)queryName_ptr)!;
                Marshal.FreeCoTaskMem((IntPtr)queryName_ptr);
            }
        }
    }

#pragma warning restore IDE1006 // Naming Styles
}
