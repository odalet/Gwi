// This file is auto generated, do not edit.
using System;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;

namespace Gwi.OpenGL.GLCompat
{
#pragma warning disable IDE1006 // Naming Styles

    public static class SGIOverloads
    {
        // ColorTableSGI overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.VoidPtrToIntPtrOverloader
        public static unsafe void ColorTableSGI(this GL.SGIExtension glInstance, ColorTableTargetSGI target, InternalFormat internalformat, int width, PixelFormat format, PixelType type, IntPtr table)
        {
            var table_vptr = (void*)table;
            glInstance.ColorTableSGI(target, internalformat, width, format, type, table_vptr);
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void ColorTableSGI<T1>(this GL.SGIExtension glInstance, ColorTableTargetSGI target, InternalFormat internalformat, int width, PixelFormat format, PixelType type, ReadOnlySpan<T1> table)
            where T1 : unmanaged
        {
            fixed (void* table_ptr = table) // SpanOrArrayLayer
            {
                glInstance.ColorTableSGI(target, internalformat, width, format, type, table_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void ColorTableSGI<T1>(this GL.SGIExtension glInstance, ColorTableTargetSGI target, InternalFormat internalformat, int width, PixelFormat format, PixelType type, T1[] table)
            where T1 : unmanaged
        {
            fixed (void* table_ptr = table) // SpanOrArrayLayer
            {
                glInstance.ColorTableSGI(target, internalformat, width, format, type, table_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void ColorTableSGI<T1>(this GL.SGIExtension glInstance, ColorTableTargetSGI target, InternalFormat internalformat, int width, PixelFormat format, PixelType type, in T1 table)
            where T1 : unmanaged
        {
            fixed (void* table_ptr = &table) // RefInsteadOfPointerLayer
            {
                glInstance.ColorTableSGI(target, internalformat, width, format, type, table_ptr);
            }
        }

        // ColorTableParameterfvSGI overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void ColorTableParameterfvSGI(this GL.SGIExtension glInstance, ColorTableTargetSGI target, ColorTableParameterPNameSGI pname, ReadOnlySpan<float> parameters)
        {
            fixed (float* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.ColorTableParameterfvSGI(target, pname, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void ColorTableParameterfvSGI(this GL.SGIExtension glInstance, ColorTableTargetSGI target, ColorTableParameterPNameSGI pname, float[] parameters)
        {
            fixed (float* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.ColorTableParameterfvSGI(target, pname, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void ColorTableParameterfvSGI(this GL.SGIExtension glInstance, ColorTableTargetSGI target, ColorTableParameterPNameSGI pname, in float parameters)
        {
            fixed (float* parameters_ptr = &parameters) // RefInsteadOfPointerLayer
            {
                glInstance.ColorTableParameterfvSGI(target, pname, parameters_ptr);
            }
        }

        // ColorTableParameterivSGI overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void ColorTableParameterivSGI(this GL.SGIExtension glInstance, ColorTableTargetSGI target, ColorTableParameterPNameSGI pname, ReadOnlySpan<int> parameters)
        {
            fixed (int* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.ColorTableParameterivSGI(target, pname, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void ColorTableParameterivSGI(this GL.SGIExtension glInstance, ColorTableTargetSGI target, ColorTableParameterPNameSGI pname, int[] parameters)
        {
            fixed (int* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.ColorTableParameterivSGI(target, pname, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void ColorTableParameterivSGI(this GL.SGIExtension glInstance, ColorTableTargetSGI target, ColorTableParameterPNameSGI pname, in int parameters)
        {
            fixed (int* parameters_ptr = &parameters) // RefInsteadOfPointerLayer
            {
                glInstance.ColorTableParameterivSGI(target, pname, parameters_ptr);
            }
        }

        // GetColorTableSGI overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.VoidPtrToIntPtrOverloader
        public static unsafe void GetColorTableSGI(this GL.SGIExtension glInstance, ColorTableTargetSGI target, PixelFormat format, PixelType type, IntPtr table)
        {
            var table_vptr = (void*)table;
            glInstance.GetColorTableSGI(target, format, type, table_vptr);
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetColorTableSGI<T1>(this GL.SGIExtension glInstance, ColorTableTargetSGI target, PixelFormat format, PixelType type, Span<T1> table)
            where T1 : unmanaged
        {
            fixed (void* table_ptr = table) // SpanOrArrayLayer
            {
                glInstance.GetColorTableSGI(target, format, type, table_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetColorTableSGI<T1>(this GL.SGIExtension glInstance, ColorTableTargetSGI target, PixelFormat format, PixelType type, T1[] table)
            where T1 : unmanaged
        {
            fixed (void* table_ptr = table) // SpanOrArrayLayer
            {
                glInstance.GetColorTableSGI(target, format, type, table_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void GetColorTableSGI<T1>(this GL.SGIExtension glInstance, ColorTableTargetSGI target, PixelFormat format, PixelType type, ref T1 table)
            where T1 : unmanaged
        {
            fixed (void* table_ptr = &table) // RefInsteadOfPointerLayer
            {
                glInstance.GetColorTableSGI(target, format, type, table_ptr);
            }
        }

        // GetColorTableParameterfvSGI overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetColorTableParameterfvSGI(this GL.SGIExtension glInstance, ColorTableTargetSGI target, GetColorTableParameterPNameSGI pname, Span<float> parameters)
        {
            fixed (float* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.GetColorTableParameterfvSGI(target, pname, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetColorTableParameterfvSGI(this GL.SGIExtension glInstance, ColorTableTargetSGI target, GetColorTableParameterPNameSGI pname, float[] parameters)
        {
            fixed (float* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.GetColorTableParameterfvSGI(target, pname, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void GetColorTableParameterfvSGI(this GL.SGIExtension glInstance, ColorTableTargetSGI target, GetColorTableParameterPNameSGI pname, ref float parameters)
        {
            fixed (float* parameters_ptr = &parameters) // RefInsteadOfPointerLayer
            {
                glInstance.GetColorTableParameterfvSGI(target, pname, parameters_ptr);
            }
        }

        // GetColorTableParameterivSGI overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetColorTableParameterivSGI(this GL.SGIExtension glInstance, ColorTableTargetSGI target, GetColorTableParameterPNameSGI pname, Span<int> parameters)
        {
            fixed (int* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.GetColorTableParameterivSGI(target, pname, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetColorTableParameterivSGI(this GL.SGIExtension glInstance, ColorTableTargetSGI target, GetColorTableParameterPNameSGI pname, int[] parameters)
        {
            fixed (int* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.GetColorTableParameterivSGI(target, pname, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void GetColorTableParameterivSGI(this GL.SGIExtension glInstance, ColorTableTargetSGI target, GetColorTableParameterPNameSGI pname, ref int parameters)
        {
            fixed (int* parameters_ptr = &parameters) // RefInsteadOfPointerLayer
            {
                glInstance.GetColorTableParameterivSGI(target, pname, parameters_ptr);
            }
        }
    }

#pragma warning restore IDE1006 // Naming Styles
}
