// This file is auto generated, do not edit.
using System;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;

namespace Gwi.OpenGL.GLCompat
{
#pragma warning disable IDE1006 // Naming Styles

    public static class HPOverloads
    {
        // ImageTransformParameterivHP overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void ImageTransformParameterivHP(this GL.HPExtension glInstance, ImageTransformTargetHP target, ImageTransformPNameHP pname, ReadOnlySpan<int> parameters)
        {
            fixed (int* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.ImageTransformParameterivHP(target, pname, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void ImageTransformParameterivHP(this GL.HPExtension glInstance, ImageTransformTargetHP target, ImageTransformPNameHP pname, int[] parameters)
        {
            fixed (int* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.ImageTransformParameterivHP(target, pname, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void ImageTransformParameterivHP(this GL.HPExtension glInstance, ImageTransformTargetHP target, ImageTransformPNameHP pname, in int parameters)
        {
            fixed (int* parameters_ptr = &parameters) // RefInsteadOfPointerLayer
            {
                glInstance.ImageTransformParameterivHP(target, pname, parameters_ptr);
            }
        }

        // ImageTransformParameterfvHP overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void ImageTransformParameterfvHP(this GL.HPExtension glInstance, ImageTransformTargetHP target, ImageTransformPNameHP pname, ReadOnlySpan<float> parameters)
        {
            fixed (float* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.ImageTransformParameterfvHP(target, pname, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void ImageTransformParameterfvHP(this GL.HPExtension glInstance, ImageTransformTargetHP target, ImageTransformPNameHP pname, float[] parameters)
        {
            fixed (float* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.ImageTransformParameterfvHP(target, pname, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void ImageTransformParameterfvHP(this GL.HPExtension glInstance, ImageTransformTargetHP target, ImageTransformPNameHP pname, in float parameters)
        {
            fixed (float* parameters_ptr = &parameters) // RefInsteadOfPointerLayer
            {
                glInstance.ImageTransformParameterfvHP(target, pname, parameters_ptr);
            }
        }

        // GetImageTransformParameterivHP overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetImageTransformParameterivHP(this GL.HPExtension glInstance, ImageTransformTargetHP target, ImageTransformPNameHP pname, Span<int> parameters)
        {
            fixed (int* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.GetImageTransformParameterivHP(target, pname, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetImageTransformParameterivHP(this GL.HPExtension glInstance, ImageTransformTargetHP target, ImageTransformPNameHP pname, int[] parameters)
        {
            fixed (int* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.GetImageTransformParameterivHP(target, pname, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void GetImageTransformParameterivHP(this GL.HPExtension glInstance, ImageTransformTargetHP target, ImageTransformPNameHP pname, ref int parameters)
        {
            fixed (int* parameters_ptr = &parameters) // RefInsteadOfPointerLayer
            {
                glInstance.GetImageTransformParameterivHP(target, pname, parameters_ptr);
            }
        }

        // GetImageTransformParameterfvHP overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetImageTransformParameterfvHP(this GL.HPExtension glInstance, ImageTransformTargetHP target, ImageTransformPNameHP pname, Span<float> parameters)
        {
            fixed (float* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.GetImageTransformParameterfvHP(target, pname, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetImageTransformParameterfvHP(this GL.HPExtension glInstance, ImageTransformTargetHP target, ImageTransformPNameHP pname, float[] parameters)
        {
            fixed (float* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.GetImageTransformParameterfvHP(target, pname, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void GetImageTransformParameterfvHP(this GL.HPExtension glInstance, ImageTransformTargetHP target, ImageTransformPNameHP pname, ref float parameters)
        {
            fixed (float* parameters_ptr = &parameters) // RefInsteadOfPointerLayer
            {
                glInstance.GetImageTransformParameterfvHP(target, pname, parameters_ptr);
            }
        }
    }

#pragma warning restore IDE1006 // Naming Styles
}
