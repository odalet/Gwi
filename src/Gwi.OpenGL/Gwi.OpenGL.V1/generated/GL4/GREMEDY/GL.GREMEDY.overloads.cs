// This file is auto generated, do not edit.
using System;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;

namespace Gwi.OpenGL.GL4
{
#pragma warning disable IDE1006 // Naming Styles

    public static class GREMEDYOverloads
    {
        // StringMarkerGREMEDY overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.VoidPtrToIntPtrOverloader
        public static unsafe void StringMarkerGREMEDY(this GL.GREMEDYExtension glInstance, int len, IntPtr str)
        {
            var str_vptr = (void*)str;
            glInstance.StringMarkerGREMEDY(len, str_vptr);
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void StringMarkerGREMEDY<T1>(this GL.GREMEDYExtension glInstance, ReadOnlySpan<T1> str)
            where T1 : unmanaged
        {
            var len = (int)(str.Length * sizeof(T1));
            fixed (void* str_ptr = str) // SpanOrArrayLayer
            {
                glInstance.StringMarkerGREMEDY(len, str_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void StringMarkerGREMEDY<T1>(this GL.GREMEDYExtension glInstance, T1[] str)
            where T1 : unmanaged
        {
            var len = (int)(str.Length * sizeof(T1));
            fixed (void* str_ptr = str) // SpanOrArrayLayer
            {
                glInstance.StringMarkerGREMEDY(len, str_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void StringMarkerGREMEDY<T1>(this GL.GREMEDYExtension glInstance, int len, in T1 str)
            where T1 : unmanaged
        {
            fixed (void* str_ptr = &str) // RefInsteadOfPointerLayer
            {
                glInstance.StringMarkerGREMEDY(len, str_ptr);
            }
        }
    }

#pragma warning restore IDE1006 // Naming Styles
}
