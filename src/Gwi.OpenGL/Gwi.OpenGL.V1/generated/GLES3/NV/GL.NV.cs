// This file is auto generated, do not edit.
using System;

namespace Gwi.OpenGL.GLES3
{
#pragma warning disable IDE1006 // Naming Styles

    unsafe partial class GL
    {
        private NVExtension? _NV;
        public NVExtension NV => _NV ??= new NVExtension(this);

        public sealed unsafe partial class NVExtension
        {
            private readonly VTable vtable;

            internal NVExtension(GL gl) => vtable = new VTable(gl.Lib);

            public void CreateSemaphoresNV(int n, uint* semaphores) => ((delegate* unmanaged[Cdecl]<int, uint*, void>)vtable.glCreateSemaphoresNV)(n, semaphores);
            public void SemaphoreParameterivNV(uint semaphore, SemaphoreParameterName pname, int* parameters) => ((delegate* unmanaged[Cdecl]<uint, SemaphoreParameterName, int*, void>)vtable.glSemaphoreParameterivNV)(semaphore, pname, parameters);
            public void GetSemaphoreParameterivNV(uint semaphore, SemaphoreParameterName pname, int* parameters) => ((delegate* unmanaged[Cdecl]<uint, SemaphoreParameterName, int*, void>)vtable.glGetSemaphoreParameterivNV)(semaphore, pname, parameters);
            public ulong GetTextureHandleNV(TextureHandle texture) => ((delegate* unmanaged[Cdecl]<TextureHandle, ulong>)vtable.glGetTextureHandleNV)(texture);
            public ulong GetTextureSamplerHandleNV(TextureHandle texture, SamplerHandle sampler) => ((delegate* unmanaged[Cdecl]<TextureHandle, SamplerHandle, ulong>)vtable.glGetTextureSamplerHandleNV)(texture, sampler);
            public void MakeTextureHandleResidentNV(ulong handle) => ((delegate* unmanaged[Cdecl]<ulong, void>)vtable.glMakeTextureHandleResidentNV)(handle);
            public void MakeTextureHandleNonResidentNV(ulong handle) => ((delegate* unmanaged[Cdecl]<ulong, void>)vtable.glMakeTextureHandleNonResidentNV)(handle);
            public ulong GetImageHandleNV(TextureHandle texture, int level, byte layered, int layer, PixelFormat format) => ((delegate* unmanaged[Cdecl]<TextureHandle, int, byte, int, PixelFormat, ulong>)vtable.glGetImageHandleNV)(texture, level, layered, layer, format);
            public void MakeImageHandleResidentNV(ulong handle, GLEnum access) => ((delegate* unmanaged[Cdecl]<ulong, GLEnum, void>)vtable.glMakeImageHandleResidentNV)(handle, access);
            public void MakeImageHandleNonResidentNV(ulong handle) => ((delegate* unmanaged[Cdecl]<ulong, void>)vtable.glMakeImageHandleNonResidentNV)(handle);
            public void UniformHandleui64NV(int location, ulong value) => ((delegate* unmanaged[Cdecl]<int, ulong, void>)vtable.glUniformHandleui64NV)(location, value);
            public void UniformHandleui64vNV(int location, int count, ulong* value) => ((delegate* unmanaged[Cdecl]<int, int, ulong*, void>)vtable.glUniformHandleui64vNV)(location, count, value);
            public void ProgramUniformHandleui64NV(ProgramHandle program, int location, ulong value) => ((delegate* unmanaged[Cdecl]<ProgramHandle, int, ulong, void>)vtable.glProgramUniformHandleui64NV)(program, location, value);
            public void ProgramUniformHandleui64vNV(ProgramHandle program, int location, int count, ulong* values) => ((delegate* unmanaged[Cdecl]<ProgramHandle, int, int, ulong*, void>)vtable.glProgramUniformHandleui64vNV)(program, location, count, values);
            public byte IsTextureHandleResidentNV(ulong handle) => ((delegate* unmanaged[Cdecl]<ulong, byte>)vtable.glIsTextureHandleResidentNV)(handle);
            public byte IsImageHandleResidentNV(ulong handle) => ((delegate* unmanaged[Cdecl]<ulong, byte>)vtable.glIsImageHandleResidentNV)(handle);
            public void BlendParameteriNV(GLEnum pname, int value) => ((delegate* unmanaged[Cdecl]<GLEnum, int, void>)vtable.glBlendParameteriNV)(pname, value);
            public void BlendBarrierNV() => ((delegate* unmanaged[Cdecl]<void>)vtable.glBlendBarrierNV)();
            public void ViewportPositionWScaleNV(uint index, float xcoeff, float ycoeff) => ((delegate* unmanaged[Cdecl]<uint, float, float, void>)vtable.glViewportPositionWScaleNV)(index, xcoeff, ycoeff);
            public void BeginConditionalRenderNV(uint id, ConditionalRenderMode mode) => ((delegate* unmanaged[Cdecl]<uint, ConditionalRenderMode, void>)vtable.glBeginConditionalRenderNV)(id, mode);
            public void EndConditionalRenderNV() => ((delegate* unmanaged[Cdecl]<void>)vtable.glEndConditionalRenderNV)();
            public void SubpixelPrecisionBiasNV(uint xbits, uint ybits) => ((delegate* unmanaged[Cdecl]<uint, uint, void>)vtable.glSubpixelPrecisionBiasNV)(xbits, ybits);
            public void ConservativeRasterParameteriNV(GLEnum pname, int param) => ((delegate* unmanaged[Cdecl]<GLEnum, int, void>)vtable.glConservativeRasterParameteriNV)(pname, param);
            public void CopyBufferSubDataNV(CopyBufferSubDataTarget readTarget, CopyBufferSubDataTarget writeTarget, IntPtr readOffset, IntPtr writeOffset, nint size) => ((delegate* unmanaged[Cdecl]<CopyBufferSubDataTarget, CopyBufferSubDataTarget, IntPtr, IntPtr, nint, void>)vtable.glCopyBufferSubDataNV)(readTarget, writeTarget, readOffset, writeOffset, size);
            public void CoverageMaskNV(byte mask) => ((delegate* unmanaged[Cdecl]<byte, void>)vtable.glCoverageMaskNV)(mask);
            public void CoverageOperationNV(GLEnum operation) => ((delegate* unmanaged[Cdecl]<GLEnum, void>)vtable.glCoverageOperationNV)(operation);
            public void DrawBuffersNV(int n, GLEnum* bufs) => ((delegate* unmanaged[Cdecl]<int, GLEnum*, void>)vtable.glDrawBuffersNV)(n, bufs);
            public void DrawArraysInstancedNV(PrimitiveType mode, int first, int count, int primcount) => ((delegate* unmanaged[Cdecl]<PrimitiveType, int, int, int, void>)vtable.glDrawArraysInstancedNV)(mode, first, count, primcount);
            public void DrawElementsInstancedNV(PrimitiveType mode, int count, PrimitiveType type, void* indices, int primcount) => ((delegate* unmanaged[Cdecl]<PrimitiveType, int, PrimitiveType, void*, int, void>)vtable.glDrawElementsInstancedNV)(mode, count, type, indices, primcount);
            public void DrawVkImageNV(ulong vkImage, SamplerHandle sampler, float x0, float y0, float x1, float y1, float z, float s0, float t0, float s1, float t1) => ((delegate* unmanaged[Cdecl]<ulong, SamplerHandle, float, float, float, float, float, float, float, float, float, void>)vtable.glDrawVkImageNV)(vkImage, sampler, x0, y0, x1, y1, z, s0, t0, s1, t1);
            public IntPtr GetVkProcAddrNV(byte* name) => ((delegate* unmanaged[Cdecl]<byte*, IntPtr>)vtable.glGetVkProcAddrNV)(name);
            public void WaitVkSemaphoreNV(ulong vkSemaphore) => ((delegate* unmanaged[Cdecl]<ulong, void>)vtable.glWaitVkSemaphoreNV)(vkSemaphore);
            public void SignalVkSemaphoreNV(ulong vkSemaphore) => ((delegate* unmanaged[Cdecl]<ulong, void>)vtable.glSignalVkSemaphoreNV)(vkSemaphore);
            public void SignalVkFenceNV(ulong vkFence) => ((delegate* unmanaged[Cdecl]<ulong, void>)vtable.glSignalVkFenceNV)(vkFence);
            public void DeleteFencesNV(int n, uint* fences) => ((delegate* unmanaged[Cdecl]<int, uint*, void>)vtable.glDeleteFencesNV)(n, fences);
            public void GenFencesNV(int n, uint* fences) => ((delegate* unmanaged[Cdecl]<int, uint*, void>)vtable.glGenFencesNV)(n, fences);
            public byte IsFenceNV(uint fence) => ((delegate* unmanaged[Cdecl]<uint, byte>)vtable.glIsFenceNV)(fence);
            public byte TestFenceNV(uint fence) => ((delegate* unmanaged[Cdecl]<uint, byte>)vtable.glTestFenceNV)(fence);
            public void GetFenceivNV(uint fence, FenceParameterNameNV pname, int* parameters) => ((delegate* unmanaged[Cdecl]<uint, FenceParameterNameNV, int*, void>)vtable.glGetFenceivNV)(fence, pname, parameters);
            public void FinishFenceNV(uint fence) => ((delegate* unmanaged[Cdecl]<uint, void>)vtable.glFinishFenceNV)(fence);
            public void SetFenceNV(uint fence, FenceConditionNV condition) => ((delegate* unmanaged[Cdecl]<uint, FenceConditionNV, void>)vtable.glSetFenceNV)(fence, condition);
            public void FragmentCoverageColorNV(uint color) => ((delegate* unmanaged[Cdecl]<uint, void>)vtable.glFragmentCoverageColorNV)(color);
            public void BlitFramebufferNV(int srcX0, int srcY0, int srcX1, int srcY1, int dstX0, int dstY0, int dstX1, int dstY1, ClearBufferMask mask, BlitFramebufferFilter filter) => ((delegate* unmanaged[Cdecl]<int, int, int, int, int, int, int, int, ClearBufferMask, BlitFramebufferFilter, void>)vtable.glBlitFramebufferNV)(srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter);
            public void RasterSamplesEXT(uint samples, byte fixedsamplelocations) => ((delegate* unmanaged[Cdecl]<uint, byte, void>)vtable.glRasterSamplesEXT)(samples, fixedsamplelocations);
            public void CoverageModulationTableNV(int n, float* v) => ((delegate* unmanaged[Cdecl]<int, float*, void>)vtable.glCoverageModulationTableNV)(n, v);
            public void GetCoverageModulationTableNV(int bufSize, float* v) => ((delegate* unmanaged[Cdecl]<int, float*, void>)vtable.glGetCoverageModulationTableNV)(bufSize, v);
            public void CoverageModulationNV(GLEnum components) => ((delegate* unmanaged[Cdecl]<GLEnum, void>)vtable.glCoverageModulationNV)(components);
            public void RenderbufferStorageMultisampleNV(RenderbufferTarget target, int samples, InternalFormat internalformat, int width, int height) => ((delegate* unmanaged[Cdecl]<RenderbufferTarget, int, InternalFormat, int, int, void>)vtable.glRenderbufferStorageMultisampleNV)(target, samples, internalformat, width, height);
            public void Uniform1i64NV(int location, long x) => ((delegate* unmanaged[Cdecl]<int, long, void>)vtable.glUniform1i64NV)(location, x);
            public void Uniform2i64NV(int location, long x, long y) => ((delegate* unmanaged[Cdecl]<int, long, long, void>)vtable.glUniform2i64NV)(location, x, y);
            public void Uniform3i64NV(int location, long x, long y, long z) => ((delegate* unmanaged[Cdecl]<int, long, long, long, void>)vtable.glUniform3i64NV)(location, x, y, z);
            public void Uniform4i64NV(int location, long x, long y, long z, long w) => ((delegate* unmanaged[Cdecl]<int, long, long, long, long, void>)vtable.glUniform4i64NV)(location, x, y, z, w);
            public void Uniform1i64vNV(int location, int count, long* value) => ((delegate* unmanaged[Cdecl]<int, int, long*, void>)vtable.glUniform1i64vNV)(location, count, value);
            public void Uniform2i64vNV(int location, int count, long* value) => ((delegate* unmanaged[Cdecl]<int, int, long*, void>)vtable.glUniform2i64vNV)(location, count, value);
            public void Uniform3i64vNV(int location, int count, long* value) => ((delegate* unmanaged[Cdecl]<int, int, long*, void>)vtable.glUniform3i64vNV)(location, count, value);
            public void Uniform4i64vNV(int location, int count, long* value) => ((delegate* unmanaged[Cdecl]<int, int, long*, void>)vtable.glUniform4i64vNV)(location, count, value);
            public void Uniform1ui64NV(int location, ulong x) => ((delegate* unmanaged[Cdecl]<int, ulong, void>)vtable.glUniform1ui64NV)(location, x);
            public void Uniform2ui64NV(int location, ulong x, ulong y) => ((delegate* unmanaged[Cdecl]<int, ulong, ulong, void>)vtable.glUniform2ui64NV)(location, x, y);
            public void Uniform3ui64NV(int location, ulong x, ulong y, ulong z) => ((delegate* unmanaged[Cdecl]<int, ulong, ulong, ulong, void>)vtable.glUniform3ui64NV)(location, x, y, z);
            public void Uniform4ui64NV(int location, ulong x, ulong y, ulong z, ulong w) => ((delegate* unmanaged[Cdecl]<int, ulong, ulong, ulong, ulong, void>)vtable.glUniform4ui64NV)(location, x, y, z, w);
            public void Uniform1ui64vNV(int location, int count, ulong* value) => ((delegate* unmanaged[Cdecl]<int, int, ulong*, void>)vtable.glUniform1ui64vNV)(location, count, value);
            public void Uniform2ui64vNV(int location, int count, ulong* value) => ((delegate* unmanaged[Cdecl]<int, int, ulong*, void>)vtable.glUniform2ui64vNV)(location, count, value);
            public void Uniform3ui64vNV(int location, int count, ulong* value) => ((delegate* unmanaged[Cdecl]<int, int, ulong*, void>)vtable.glUniform3ui64vNV)(location, count, value);
            public void Uniform4ui64vNV(int location, int count, ulong* value) => ((delegate* unmanaged[Cdecl]<int, int, ulong*, void>)vtable.glUniform4ui64vNV)(location, count, value);
            public void GetUniformi64vNV(ProgramHandle program, int location, long* parameters) => ((delegate* unmanaged[Cdecl]<ProgramHandle, int, long*, void>)vtable.glGetUniformi64vNV)(program, location, parameters);
            public void ProgramUniform1i64NV(ProgramHandle program, int location, long x) => ((delegate* unmanaged[Cdecl]<ProgramHandle, int, long, void>)vtable.glProgramUniform1i64NV)(program, location, x);
            public void ProgramUniform2i64NV(ProgramHandle program, int location, long x, long y) => ((delegate* unmanaged[Cdecl]<ProgramHandle, int, long, long, void>)vtable.glProgramUniform2i64NV)(program, location, x, y);
            public void ProgramUniform3i64NV(ProgramHandle program, int location, long x, long y, long z) => ((delegate* unmanaged[Cdecl]<ProgramHandle, int, long, long, long, void>)vtable.glProgramUniform3i64NV)(program, location, x, y, z);
            public void ProgramUniform4i64NV(ProgramHandle program, int location, long x, long y, long z, long w) => ((delegate* unmanaged[Cdecl]<ProgramHandle, int, long, long, long, long, void>)vtable.glProgramUniform4i64NV)(program, location, x, y, z, w);
            public void ProgramUniform1i64vNV(ProgramHandle program, int location, int count, long* value) => ((delegate* unmanaged[Cdecl]<ProgramHandle, int, int, long*, void>)vtable.glProgramUniform1i64vNV)(program, location, count, value);
            public void ProgramUniform2i64vNV(ProgramHandle program, int location, int count, long* value) => ((delegate* unmanaged[Cdecl]<ProgramHandle, int, int, long*, void>)vtable.glProgramUniform2i64vNV)(program, location, count, value);
            public void ProgramUniform3i64vNV(ProgramHandle program, int location, int count, long* value) => ((delegate* unmanaged[Cdecl]<ProgramHandle, int, int, long*, void>)vtable.glProgramUniform3i64vNV)(program, location, count, value);
            public void ProgramUniform4i64vNV(ProgramHandle program, int location, int count, long* value) => ((delegate* unmanaged[Cdecl]<ProgramHandle, int, int, long*, void>)vtable.glProgramUniform4i64vNV)(program, location, count, value);
            public void ProgramUniform1ui64NV(ProgramHandle program, int location, ulong x) => ((delegate* unmanaged[Cdecl]<ProgramHandle, int, ulong, void>)vtable.glProgramUniform1ui64NV)(program, location, x);
            public void ProgramUniform2ui64NV(ProgramHandle program, int location, ulong x, ulong y) => ((delegate* unmanaged[Cdecl]<ProgramHandle, int, ulong, ulong, void>)vtable.glProgramUniform2ui64NV)(program, location, x, y);
            public void ProgramUniform3ui64NV(ProgramHandle program, int location, ulong x, ulong y, ulong z) => ((delegate* unmanaged[Cdecl]<ProgramHandle, int, ulong, ulong, ulong, void>)vtable.glProgramUniform3ui64NV)(program, location, x, y, z);
            public void ProgramUniform4ui64NV(ProgramHandle program, int location, ulong x, ulong y, ulong z, ulong w) => ((delegate* unmanaged[Cdecl]<ProgramHandle, int, ulong, ulong, ulong, ulong, void>)vtable.glProgramUniform4ui64NV)(program, location, x, y, z, w);
            public void ProgramUniform1ui64vNV(ProgramHandle program, int location, int count, ulong* value) => ((delegate* unmanaged[Cdecl]<ProgramHandle, int, int, ulong*, void>)vtable.glProgramUniform1ui64vNV)(program, location, count, value);
            public void ProgramUniform2ui64vNV(ProgramHandle program, int location, int count, ulong* value) => ((delegate* unmanaged[Cdecl]<ProgramHandle, int, int, ulong*, void>)vtable.glProgramUniform2ui64vNV)(program, location, count, value);
            public void ProgramUniform3ui64vNV(ProgramHandle program, int location, int count, ulong* value) => ((delegate* unmanaged[Cdecl]<ProgramHandle, int, int, ulong*, void>)vtable.glProgramUniform3ui64vNV)(program, location, count, value);
            public void ProgramUniform4ui64vNV(ProgramHandle program, int location, int count, ulong* value) => ((delegate* unmanaged[Cdecl]<ProgramHandle, int, int, ulong*, void>)vtable.glProgramUniform4ui64vNV)(program, location, count, value);
            public void VertexAttribDivisorNV(uint index, uint divisor) => ((delegate* unmanaged[Cdecl]<uint, uint, void>)vtable.glVertexAttribDivisorNV)(index, divisor);
            public void GetInternalformatSampleivNV(TextureTarget target, InternalFormat internalformat, int samples, InternalFormatPName pname, int count, int* parameters) => ((delegate* unmanaged[Cdecl]<TextureTarget, InternalFormat, int, InternalFormatPName, int, int*, void>)vtable.glGetInternalformatSampleivNV)(target, internalformat, samples, pname, count, parameters);
            public void GetMemoryObjectDetachedResourcesuivNV(uint memory, GLEnum pname, int first, int count, uint* parameters) => ((delegate* unmanaged[Cdecl]<uint, GLEnum, int, int, uint*, void>)vtable.glGetMemoryObjectDetachedResourcesuivNV)(memory, pname, first, count, parameters);
            public void ResetMemoryObjectParameterNV(uint memory, GLEnum pname) => ((delegate* unmanaged[Cdecl]<uint, GLEnum, void>)vtable.glResetMemoryObjectParameterNV)(memory, pname);
            public void TexAttachMemoryNV(TextureTarget target, uint memory, ulong offset) => ((delegate* unmanaged[Cdecl]<TextureTarget, uint, ulong, void>)vtable.glTexAttachMemoryNV)(target, memory, offset);
            public void BufferAttachMemoryNV(BufferTargetARB target, uint memory, ulong offset) => ((delegate* unmanaged[Cdecl]<BufferTargetARB, uint, ulong, void>)vtable.glBufferAttachMemoryNV)(target, memory, offset);
            public void TextureAttachMemoryNV(TextureHandle texture, uint memory, ulong offset) => ((delegate* unmanaged[Cdecl]<TextureHandle, uint, ulong, void>)vtable.glTextureAttachMemoryNV)(texture, memory, offset);
            public void NamedBufferAttachMemoryNV(BufferHandle buffer, uint memory, ulong offset) => ((delegate* unmanaged[Cdecl]<BufferHandle, uint, ulong, void>)vtable.glNamedBufferAttachMemoryNV)(buffer, memory, offset);
            public void BufferPageCommitmentMemNV(BufferStorageTarget target, IntPtr offset, nint size, uint memory, ulong memOffset, byte commit) => ((delegate* unmanaged[Cdecl]<BufferStorageTarget, IntPtr, nint, uint, ulong, byte, void>)vtable.glBufferPageCommitmentMemNV)(target, offset, size, memory, memOffset, commit);
            public void TexPageCommitmentMemNV(TextureTarget target, int layer, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, uint memory, ulong offset, byte commit) => ((delegate* unmanaged[Cdecl]<TextureTarget, int, int, int, int, int, int, int, int, uint, ulong, byte, void>)vtable.glTexPageCommitmentMemNV)(target, layer, level, xoffset, yoffset, zoffset, width, height, depth, memory, offset, commit);
            public void NamedBufferPageCommitmentMemNV(BufferHandle buffer, IntPtr offset, nint size, uint memory, ulong memOffset, byte commit) => ((delegate* unmanaged[Cdecl]<BufferHandle, IntPtr, nint, uint, ulong, byte, void>)vtable.glNamedBufferPageCommitmentMemNV)(buffer, offset, size, memory, memOffset, commit);
            public void TexturePageCommitmentMemNV(TextureHandle texture, int layer, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, uint memory, ulong offset, byte commit) => ((delegate* unmanaged[Cdecl]<TextureHandle, int, int, int, int, int, int, int, int, uint, ulong, byte, void>)vtable.glTexturePageCommitmentMemNV)(texture, layer, level, xoffset, yoffset, zoffset, width, height, depth, memory, offset, commit);
            public void DrawMeshTasksNV(uint first, uint count) => ((delegate* unmanaged[Cdecl]<uint, uint, void>)vtable.glDrawMeshTasksNV)(first, count);
            public void DrawMeshTasksIndirectNV(IntPtr indirect) => ((delegate* unmanaged[Cdecl]<IntPtr, void>)vtable.glDrawMeshTasksIndirectNV)(indirect);
            public void MultiDrawMeshTasksIndirectNV(IntPtr indirect, int drawcount, int stride) => ((delegate* unmanaged[Cdecl]<IntPtr, int, int, void>)vtable.glMultiDrawMeshTasksIndirectNV)(indirect, drawcount, stride);
            public void MultiDrawMeshTasksIndirectCountNV(IntPtr indirect, IntPtr drawcount, int maxdrawcount, int stride) => ((delegate* unmanaged[Cdecl]<IntPtr, IntPtr, int, int, void>)vtable.glMultiDrawMeshTasksIndirectCountNV)(indirect, drawcount, maxdrawcount, stride);
            public void UniformMatrix2x3fvNV(int location, int count, byte transpose, float* value) => ((delegate* unmanaged[Cdecl]<int, int, byte, float*, void>)vtable.glUniformMatrix2x3fvNV)(location, count, transpose, value);
            public void UniformMatrix3x2fvNV(int location, int count, byte transpose, float* value) => ((delegate* unmanaged[Cdecl]<int, int, byte, float*, void>)vtable.glUniformMatrix3x2fvNV)(location, count, transpose, value);
            public void UniformMatrix2x4fvNV(int location, int count, byte transpose, float* value) => ((delegate* unmanaged[Cdecl]<int, int, byte, float*, void>)vtable.glUniformMatrix2x4fvNV)(location, count, transpose, value);
            public void UniformMatrix4x2fvNV(int location, int count, byte transpose, float* value) => ((delegate* unmanaged[Cdecl]<int, int, byte, float*, void>)vtable.glUniformMatrix4x2fvNV)(location, count, transpose, value);
            public void UniformMatrix3x4fvNV(int location, int count, byte transpose, float* value) => ((delegate* unmanaged[Cdecl]<int, int, byte, float*, void>)vtable.glUniformMatrix3x4fvNV)(location, count, transpose, value);
            public void UniformMatrix4x3fvNV(int location, int count, byte transpose, float* value) => ((delegate* unmanaged[Cdecl]<int, int, byte, float*, void>)vtable.glUniformMatrix4x3fvNV)(location, count, transpose, value);
            public uint GenPathsNV(int range) => ((delegate* unmanaged[Cdecl]<int, uint>)vtable.glGenPathsNV)(range);
            public void DeletePathsNV(uint path, int range) => ((delegate* unmanaged[Cdecl]<uint, int, void>)vtable.glDeletePathsNV)(path, range);
            public byte IsPathNV(uint path) => ((delegate* unmanaged[Cdecl]<uint, byte>)vtable.glIsPathNV)(path);
            public void PathCommandsNV(uint path, int numCommands, byte* commands, int numCoords, PathCoordType coordType, void* coords) => ((delegate* unmanaged[Cdecl]<uint, int, byte*, int, PathCoordType, void*, void>)vtable.glPathCommandsNV)(path, numCommands, commands, numCoords, coordType, coords);
            public void PathCoordsNV(uint path, int numCoords, PathCoordType coordType, void* coords) => ((delegate* unmanaged[Cdecl]<uint, int, PathCoordType, void*, void>)vtable.glPathCoordsNV)(path, numCoords, coordType, coords);
            public void PathSubCommandsNV(uint path, int commandStart, int commandsToDelete, int numCommands, byte* commands, int numCoords, PathCoordType coordType, void* coords) => ((delegate* unmanaged[Cdecl]<uint, int, int, int, byte*, int, PathCoordType, void*, void>)vtable.glPathSubCommandsNV)(path, commandStart, commandsToDelete, numCommands, commands, numCoords, coordType, coords);
            public void PathSubCoordsNV(uint path, int coordStart, int numCoords, PathCoordType coordType, void* coords) => ((delegate* unmanaged[Cdecl]<uint, int, int, PathCoordType, void*, void>)vtable.glPathSubCoordsNV)(path, coordStart, numCoords, coordType, coords);
            public void PathStringNV(uint path, PathStringFormat format, int length, void* pathString) => ((delegate* unmanaged[Cdecl]<uint, PathStringFormat, int, void*, void>)vtable.glPathStringNV)(path, format, length, pathString);
            public void PathGlyphsNV(uint firstPathName, PathFontTarget fontTarget, void* fontName, PathFontStyle fontStyle, int numGlyphs, PathElementType type, void* charcodes, PathHandleMissingGlyphs handleMissingGlyphs, uint pathParameterTemplate, float emScale) => ((delegate* unmanaged[Cdecl]<uint, PathFontTarget, void*, PathFontStyle, int, PathElementType, void*, PathHandleMissingGlyphs, uint, float, void>)vtable.glPathGlyphsNV)(firstPathName, fontTarget, fontName, fontStyle, numGlyphs, type, charcodes, handleMissingGlyphs, pathParameterTemplate, emScale);
            public void PathGlyphRangeNV(uint firstPathName, PathFontTarget fontTarget, void* fontName, PathFontStyle fontStyle, uint firstGlyph, int numGlyphs, PathHandleMissingGlyphs handleMissingGlyphs, uint pathParameterTemplate, float emScale) => ((delegate* unmanaged[Cdecl]<uint, PathFontTarget, void*, PathFontStyle, uint, int, PathHandleMissingGlyphs, uint, float, void>)vtable.glPathGlyphRangeNV)(firstPathName, fontTarget, fontName, fontStyle, firstGlyph, numGlyphs, handleMissingGlyphs, pathParameterTemplate, emScale);
            public void WeightPathsNV(uint resultPath, int numPaths, uint* paths, float* weights) => ((delegate* unmanaged[Cdecl]<uint, int, uint*, float*, void>)vtable.glWeightPathsNV)(resultPath, numPaths, paths, weights);
            public void CopyPathNV(uint resultPath, uint srcPath) => ((delegate* unmanaged[Cdecl]<uint, uint, void>)vtable.glCopyPathNV)(resultPath, srcPath);
            public void InterpolatePathsNV(uint resultPath, uint pathA, uint pathB, float weight) => ((delegate* unmanaged[Cdecl]<uint, uint, uint, float, void>)vtable.glInterpolatePathsNV)(resultPath, pathA, pathB, weight);
            public void TransformPathNV(uint resultPath, uint srcPath, PathTransformType transformType, float* transformValues) => ((delegate* unmanaged[Cdecl]<uint, uint, PathTransformType, float*, void>)vtable.glTransformPathNV)(resultPath, srcPath, transformType, transformValues);
            public void PathParameterivNV(uint path, PathParameter pname, int* value) => ((delegate* unmanaged[Cdecl]<uint, PathParameter, int*, void>)vtable.glPathParameterivNV)(path, pname, value);
            public void PathParameteriNV(uint path, PathParameter pname, int value) => ((delegate* unmanaged[Cdecl]<uint, PathParameter, int, void>)vtable.glPathParameteriNV)(path, pname, value);
            public void PathParameterfvNV(uint path, PathParameter pname, float* value) => ((delegate* unmanaged[Cdecl]<uint, PathParameter, float*, void>)vtable.glPathParameterfvNV)(path, pname, value);
            public void PathParameterfNV(uint path, PathParameter pname, float value) => ((delegate* unmanaged[Cdecl]<uint, PathParameter, float, void>)vtable.glPathParameterfNV)(path, pname, value);
            public void PathDashArrayNV(uint path, int dashCount, float* dashArray) => ((delegate* unmanaged[Cdecl]<uint, int, float*, void>)vtable.glPathDashArrayNV)(path, dashCount, dashArray);
            public void PathStencilFuncNV(StencilFunction func, int reference, uint mask) => ((delegate* unmanaged[Cdecl]<StencilFunction, int, uint, void>)vtable.glPathStencilFuncNV)(func, reference, mask);
            public void PathStencilDepthOffsetNV(float factor, float units) => ((delegate* unmanaged[Cdecl]<float, float, void>)vtable.glPathStencilDepthOffsetNV)(factor, units);
            public void StencilFillPathNV(uint path, PathFillMode fillMode, uint mask) => ((delegate* unmanaged[Cdecl]<uint, PathFillMode, uint, void>)vtable.glStencilFillPathNV)(path, fillMode, mask);
            public void StencilStrokePathNV(uint path, int reference, uint mask) => ((delegate* unmanaged[Cdecl]<uint, int, uint, void>)vtable.glStencilStrokePathNV)(path, reference, mask);
            public void StencilFillPathInstancedNV(int numPaths, PathElementType pathNameType, void* paths, uint pathBase, PathFillMode fillMode, uint mask, PathTransformType transformType, float* transformValues) => ((delegate* unmanaged[Cdecl]<int, PathElementType, void*, uint, PathFillMode, uint, PathTransformType, float*, void>)vtable.glStencilFillPathInstancedNV)(numPaths, pathNameType, paths, pathBase, fillMode, mask, transformType, transformValues);
            public void StencilStrokePathInstancedNV(int numPaths, PathElementType pathNameType, void* paths, uint pathBase, int reference, uint mask, PathTransformType transformType, float* transformValues) => ((delegate* unmanaged[Cdecl]<int, PathElementType, void*, uint, int, uint, PathTransformType, float*, void>)vtable.glStencilStrokePathInstancedNV)(numPaths, pathNameType, paths, pathBase, reference, mask, transformType, transformValues);
            public void PathCoverDepthFuncNV(DepthFunction func) => ((delegate* unmanaged[Cdecl]<DepthFunction, void>)vtable.glPathCoverDepthFuncNV)(func);
            public void CoverFillPathNV(uint path, PathCoverMode coverMode) => ((delegate* unmanaged[Cdecl]<uint, PathCoverMode, void>)vtable.glCoverFillPathNV)(path, coverMode);
            public void CoverStrokePathNV(uint path, PathCoverMode coverMode) => ((delegate* unmanaged[Cdecl]<uint, PathCoverMode, void>)vtable.glCoverStrokePathNV)(path, coverMode);
            public void CoverFillPathInstancedNV(int numPaths, PathElementType pathNameType, void* paths, uint pathBase, PathCoverMode coverMode, PathTransformType transformType, float* transformValues) => ((delegate* unmanaged[Cdecl]<int, PathElementType, void*, uint, PathCoverMode, PathTransformType, float*, void>)vtable.glCoverFillPathInstancedNV)(numPaths, pathNameType, paths, pathBase, coverMode, transformType, transformValues);
            public void CoverStrokePathInstancedNV(int numPaths, PathElementType pathNameType, void* paths, uint pathBase, PathCoverMode coverMode, PathTransformType transformType, float* transformValues) => ((delegate* unmanaged[Cdecl]<int, PathElementType, void*, uint, PathCoverMode, PathTransformType, float*, void>)vtable.glCoverStrokePathInstancedNV)(numPaths, pathNameType, paths, pathBase, coverMode, transformType, transformValues);
            public void GetPathParameterivNV(uint path, PathParameter pname, int* value) => ((delegate* unmanaged[Cdecl]<uint, PathParameter, int*, void>)vtable.glGetPathParameterivNV)(path, pname, value);
            public void GetPathParameterfvNV(uint path, PathParameter pname, float* value) => ((delegate* unmanaged[Cdecl]<uint, PathParameter, float*, void>)vtable.glGetPathParameterfvNV)(path, pname, value);
            public void GetPathCommandsNV(uint path, byte* commands) => ((delegate* unmanaged[Cdecl]<uint, byte*, void>)vtable.glGetPathCommandsNV)(path, commands);
            public void GetPathCoordsNV(uint path, float* coords) => ((delegate* unmanaged[Cdecl]<uint, float*, void>)vtable.glGetPathCoordsNV)(path, coords);
            public void GetPathDashArrayNV(uint path, float* dashArray) => ((delegate* unmanaged[Cdecl]<uint, float*, void>)vtable.glGetPathDashArrayNV)(path, dashArray);
            public void GetPathMetricsNV(PathMetricMask metricQueryMask, int numPaths, PathElementType pathNameType, void* paths, uint pathBase, int stride, float* metrics) => ((delegate* unmanaged[Cdecl]<PathMetricMask, int, PathElementType, void*, uint, int, float*, void>)vtable.glGetPathMetricsNV)(metricQueryMask, numPaths, pathNameType, paths, pathBase, stride, metrics);
            public void GetPathMetricRangeNV(PathMetricMask metricQueryMask, uint firstPathName, int numPaths, int stride, float* metrics) => ((delegate* unmanaged[Cdecl]<PathMetricMask, uint, int, int, float*, void>)vtable.glGetPathMetricRangeNV)(metricQueryMask, firstPathName, numPaths, stride, metrics);
            public void GetPathSpacingNV(PathListMode pathListMode, int numPaths, PathElementType pathNameType, void* paths, uint pathBase, float advanceScale, float kerningScale, PathTransformType transformType, float* returnedSpacing) => ((delegate* unmanaged[Cdecl]<PathListMode, int, PathElementType, void*, uint, float, float, PathTransformType, float*, void>)vtable.glGetPathSpacingNV)(pathListMode, numPaths, pathNameType, paths, pathBase, advanceScale, kerningScale, transformType, returnedSpacing);
            public byte IsPointInFillPathNV(uint path, uint mask, float x, float y) => ((delegate* unmanaged[Cdecl]<uint, uint, float, float, byte>)vtable.glIsPointInFillPathNV)(path, mask, x, y);
            public byte IsPointInStrokePathNV(uint path, float x, float y) => ((delegate* unmanaged[Cdecl]<uint, float, float, byte>)vtable.glIsPointInStrokePathNV)(path, x, y);
            public float GetPathLengthNV(uint path, int startSegment, int numSegments) => ((delegate* unmanaged[Cdecl]<uint, int, int, float>)vtable.glGetPathLengthNV)(path, startSegment, numSegments);
            public byte PointAlongPathNV(uint path, int startSegment, int numSegments, float distance, float* x, float* y, float* tangentX, float* tangentY) => ((delegate* unmanaged[Cdecl]<uint, int, int, float, float*, float*, float*, float*, byte>)vtable.glPointAlongPathNV)(path, startSegment, numSegments, distance, x, y, tangentX, tangentY);
            public void MatrixLoad3x2fNV(GLEnum matrixMode, float* m) => ((delegate* unmanaged[Cdecl]<GLEnum, float*, void>)vtable.glMatrixLoad3x2fNV)(matrixMode, m);
            public void MatrixLoad3x3fNV(GLEnum matrixMode, float* m) => ((delegate* unmanaged[Cdecl]<GLEnum, float*, void>)vtable.glMatrixLoad3x3fNV)(matrixMode, m);
            public void MatrixLoadTranspose3x3fNV(GLEnum matrixMode, float* m) => ((delegate* unmanaged[Cdecl]<GLEnum, float*, void>)vtable.glMatrixLoadTranspose3x3fNV)(matrixMode, m);
            public void MatrixMult3x2fNV(GLEnum matrixMode, float* m) => ((delegate* unmanaged[Cdecl]<GLEnum, float*, void>)vtable.glMatrixMult3x2fNV)(matrixMode, m);
            public void MatrixMult3x3fNV(GLEnum matrixMode, float* m) => ((delegate* unmanaged[Cdecl]<GLEnum, float*, void>)vtable.glMatrixMult3x3fNV)(matrixMode, m);
            public void MatrixMultTranspose3x3fNV(GLEnum matrixMode, float* m) => ((delegate* unmanaged[Cdecl]<GLEnum, float*, void>)vtable.glMatrixMultTranspose3x3fNV)(matrixMode, m);
            public void StencilThenCoverFillPathNV(uint path, GLEnum fillMode, uint mask, GLEnum coverMode) => ((delegate* unmanaged[Cdecl]<uint, GLEnum, uint, GLEnum, void>)vtable.glStencilThenCoverFillPathNV)(path, fillMode, mask, coverMode);
            public void StencilThenCoverStrokePathNV(uint path, int reference, uint mask, GLEnum coverMode) => ((delegate* unmanaged[Cdecl]<uint, int, uint, GLEnum, void>)vtable.glStencilThenCoverStrokePathNV)(path, reference, mask, coverMode);
            public void StencilThenCoverFillPathInstancedNV(int numPaths, GLEnum pathNameType, void* paths, uint pathBase, GLEnum fillMode, uint mask, GLEnum coverMode, GLEnum transformType, float* transformValues) => ((delegate* unmanaged[Cdecl]<int, GLEnum, void*, uint, GLEnum, uint, GLEnum, GLEnum, float*, void>)vtable.glStencilThenCoverFillPathInstancedNV)(numPaths, pathNameType, paths, pathBase, fillMode, mask, coverMode, transformType, transformValues);
            public void StencilThenCoverStrokePathInstancedNV(int numPaths, GLEnum pathNameType, void* paths, uint pathBase, int reference, uint mask, GLEnum coverMode, GLEnum transformType, float* transformValues) => ((delegate* unmanaged[Cdecl]<int, GLEnum, void*, uint, int, uint, GLEnum, GLEnum, float*, void>)vtable.glStencilThenCoverStrokePathInstancedNV)(numPaths, pathNameType, paths, pathBase, reference, mask, coverMode, transformType, transformValues);
            public GLEnum PathGlyphIndexRangeNV(GLEnum fontTarget, void* fontName, PathFontStyle fontStyle, uint pathParameterTemplate, float emScale, uint* baseAndCount) => ((delegate* unmanaged[Cdecl]<GLEnum, void*, PathFontStyle, uint, float, uint*, GLEnum>)vtable.glPathGlyphIndexRangeNV)(fontTarget, fontName, fontStyle, pathParameterTemplate, emScale, baseAndCount);
            public GLEnum PathGlyphIndexArrayNV(uint firstPathName, GLEnum fontTarget, void* fontName, PathFontStyle fontStyle, uint firstGlyphIndex, int numGlyphs, uint pathParameterTemplate, float emScale) => ((delegate* unmanaged[Cdecl]<uint, GLEnum, void*, PathFontStyle, uint, int, uint, float, GLEnum>)vtable.glPathGlyphIndexArrayNV)(firstPathName, fontTarget, fontName, fontStyle, firstGlyphIndex, numGlyphs, pathParameterTemplate, emScale);
            public GLEnum PathMemoryGlyphIndexArrayNV(uint firstPathName, GLEnum fontTarget, nint fontSize, void* fontData, int faceIndex, uint firstGlyphIndex, int numGlyphs, uint pathParameterTemplate, float emScale) => ((delegate* unmanaged[Cdecl]<uint, GLEnum, nint, void*, int, uint, int, uint, float, GLEnum>)vtable.glPathMemoryGlyphIndexArrayNV)(firstPathName, fontTarget, fontSize, fontData, faceIndex, firstGlyphIndex, numGlyphs, pathParameterTemplate, emScale);
            public void ProgramPathFragmentInputGenNV(ProgramHandle program, int location, GLEnum genMode, int components, float* coeffs) => ((delegate* unmanaged[Cdecl]<ProgramHandle, int, GLEnum, int, float*, void>)vtable.glProgramPathFragmentInputGenNV)(program, location, genMode, components, coeffs);
            public void GetProgramResourcefvNV(ProgramHandle program, ProgramInterface programInterface, uint index, int propCount, GLEnum* props, int count, int* length, float* parameters) => ((delegate* unmanaged[Cdecl]<ProgramHandle, ProgramInterface, uint, int, GLEnum*, int, int*, float*, void>)vtable.glGetProgramResourcefvNV)(program, programInterface, index, propCount, props, count, length, parameters);
            public void PathColorGenNV(PathColor color, PathGenMode genMode, PathColorFormat colorFormat, float* coeffs) => ((delegate* unmanaged[Cdecl]<PathColor, PathGenMode, PathColorFormat, float*, void>)vtable.glPathColorGenNV)(color, genMode, colorFormat, coeffs);
            public void PathTexGenNV(PathColor texCoordSet, PathGenMode genMode, int components, float* coeffs) => ((delegate* unmanaged[Cdecl]<PathColor, PathGenMode, int, float*, void>)vtable.glPathTexGenNV)(texCoordSet, genMode, components, coeffs);
            public void PathFogGenNV(PathGenMode genMode) => ((delegate* unmanaged[Cdecl]<PathGenMode, void>)vtable.glPathFogGenNV)(genMode);
            public void GetPathColorGenivNV(PathColor color, PathGenMode pname, int* value) => ((delegate* unmanaged[Cdecl]<PathColor, PathGenMode, int*, void>)vtable.glGetPathColorGenivNV)(color, pname, value);
            public void GetPathColorGenfvNV(PathColor color, PathGenMode pname, float* value) => ((delegate* unmanaged[Cdecl]<PathColor, PathGenMode, float*, void>)vtable.glGetPathColorGenfvNV)(color, pname, value);
            public void GetPathTexGenivNV(TextureUnit texCoordSet, PathGenMode pname, int* value) => ((delegate* unmanaged[Cdecl]<TextureUnit, PathGenMode, int*, void>)vtable.glGetPathTexGenivNV)(texCoordSet, pname, value);
            public void GetPathTexGenfvNV(TextureUnit texCoordSet, PathGenMode pname, float* value) => ((delegate* unmanaged[Cdecl]<TextureUnit, PathGenMode, float*, void>)vtable.glGetPathTexGenfvNV)(texCoordSet, pname, value);
            public void MatrixFrustumEXT(MatrixMode mode, double left, double right, double bottom, double top, double zNear, double zFar) => ((delegate* unmanaged[Cdecl]<MatrixMode, double, double, double, double, double, double, void>)vtable.glMatrixFrustumEXT)(mode, left, right, bottom, top, zNear, zFar);
            public void MatrixLoadIdentityEXT(MatrixMode mode) => ((delegate* unmanaged[Cdecl]<MatrixMode, void>)vtable.glMatrixLoadIdentityEXT)(mode);
            public void MatrixLoadTransposefEXT(MatrixMode mode, float* m) => ((delegate* unmanaged[Cdecl]<MatrixMode, float*, void>)vtable.glMatrixLoadTransposefEXT)(mode, m);
            public void MatrixLoadTransposedEXT(MatrixMode mode, double* m) => ((delegate* unmanaged[Cdecl]<MatrixMode, double*, void>)vtable.glMatrixLoadTransposedEXT)(mode, m);
            public void MatrixLoadfEXT(MatrixMode mode, float* m) => ((delegate* unmanaged[Cdecl]<MatrixMode, float*, void>)vtable.glMatrixLoadfEXT)(mode, m);
            public void MatrixLoaddEXT(MatrixMode mode, double* m) => ((delegate* unmanaged[Cdecl]<MatrixMode, double*, void>)vtable.glMatrixLoaddEXT)(mode, m);
            public void MatrixMultTransposefEXT(MatrixMode mode, float* m) => ((delegate* unmanaged[Cdecl]<MatrixMode, float*, void>)vtable.glMatrixMultTransposefEXT)(mode, m);
            public void MatrixMultTransposedEXT(MatrixMode mode, double* m) => ((delegate* unmanaged[Cdecl]<MatrixMode, double*, void>)vtable.glMatrixMultTransposedEXT)(mode, m);
            public void MatrixMultfEXT(MatrixMode mode, float* m) => ((delegate* unmanaged[Cdecl]<MatrixMode, float*, void>)vtable.glMatrixMultfEXT)(mode, m);
            public void MatrixMultdEXT(MatrixMode mode, double* m) => ((delegate* unmanaged[Cdecl]<MatrixMode, double*, void>)vtable.glMatrixMultdEXT)(mode, m);
            public void MatrixOrthoEXT(MatrixMode mode, double left, double right, double bottom, double top, double zNear, double zFar) => ((delegate* unmanaged[Cdecl]<MatrixMode, double, double, double, double, double, double, void>)vtable.glMatrixOrthoEXT)(mode, left, right, bottom, top, zNear, zFar);
            public void MatrixPopEXT(MatrixMode mode) => ((delegate* unmanaged[Cdecl]<MatrixMode, void>)vtable.glMatrixPopEXT)(mode);
            public void MatrixPushEXT(MatrixMode mode) => ((delegate* unmanaged[Cdecl]<MatrixMode, void>)vtable.glMatrixPushEXT)(mode);
            public void MatrixRotatefEXT(MatrixMode mode, float angle, float x, float y, float z) => ((delegate* unmanaged[Cdecl]<MatrixMode, float, float, float, float, void>)vtable.glMatrixRotatefEXT)(mode, angle, x, y, z);
            public void MatrixRotatedEXT(MatrixMode mode, double angle, double x, double y, double z) => ((delegate* unmanaged[Cdecl]<MatrixMode, double, double, double, double, void>)vtable.glMatrixRotatedEXT)(mode, angle, x, y, z);
            public void MatrixScalefEXT(MatrixMode mode, float x, float y, float z) => ((delegate* unmanaged[Cdecl]<MatrixMode, float, float, float, void>)vtable.glMatrixScalefEXT)(mode, x, y, z);
            public void MatrixScaledEXT(MatrixMode mode, double x, double y, double z) => ((delegate* unmanaged[Cdecl]<MatrixMode, double, double, double, void>)vtable.glMatrixScaledEXT)(mode, x, y, z);
            public void MatrixTranslatefEXT(MatrixMode mode, float x, float y, float z) => ((delegate* unmanaged[Cdecl]<MatrixMode, float, float, float, void>)vtable.glMatrixTranslatefEXT)(mode, x, y, z);
            public void MatrixTranslatedEXT(MatrixMode mode, double x, double y, double z) => ((delegate* unmanaged[Cdecl]<MatrixMode, double, double, double, void>)vtable.glMatrixTranslatedEXT)(mode, x, y, z);
            public void PolygonModeNV(MaterialFace face, PolygonMode mode) => ((delegate* unmanaged[Cdecl]<MaterialFace, PolygonMode, void>)vtable.glPolygonModeNV)(face, mode);
            public void ReadBufferNV(GLEnum mode) => ((delegate* unmanaged[Cdecl]<GLEnum, void>)vtable.glReadBufferNV)(mode);
            public void FramebufferSampleLocationsfvNV(FramebufferTarget target, uint start, int count, float* v) => ((delegate* unmanaged[Cdecl]<FramebufferTarget, uint, int, float*, void>)vtable.glFramebufferSampleLocationsfvNV)(target, start, count, v);
            public void NamedFramebufferSampleLocationsfvNV(FramebufferHandle framebuffer, uint start, int count, float* v) => ((delegate* unmanaged[Cdecl]<FramebufferHandle, uint, int, float*, void>)vtable.glNamedFramebufferSampleLocationsfvNV)(framebuffer, start, count, v);
            public void ResolveDepthValuesNV() => ((delegate* unmanaged[Cdecl]<void>)vtable.glResolveDepthValuesNV)();
            public void ScissorExclusiveNV(int x, int y, int width, int height) => ((delegate* unmanaged[Cdecl]<int, int, int, int, void>)vtable.glScissorExclusiveNV)(x, y, width, height);
            public void ScissorExclusiveArrayvNV(uint first, int count, int* v) => ((delegate* unmanaged[Cdecl]<uint, int, int*, void>)vtable.glScissorExclusiveArrayvNV)(first, count, v);
            public void BindShadingRateImageNV(TextureHandle texture) => ((delegate* unmanaged[Cdecl]<TextureHandle, void>)vtable.glBindShadingRateImageNV)(texture);
            public void GetShadingRateImagePaletteNV(uint viewport, uint entry, GLEnum* rate) => ((delegate* unmanaged[Cdecl]<uint, uint, GLEnum*, void>)vtable.glGetShadingRateImagePaletteNV)(viewport, entry, rate);
            public void GetShadingRateSampleLocationivNV(GLEnum rate, uint samples, uint index, int* location) => ((delegate* unmanaged[Cdecl]<GLEnum, uint, uint, int*, void>)vtable.glGetShadingRateSampleLocationivNV)(rate, samples, index, location);
            public void ShadingRateImageBarrierNV(byte synchronize) => ((delegate* unmanaged[Cdecl]<byte, void>)vtable.glShadingRateImageBarrierNV)(synchronize);
            public void ShadingRateImagePaletteNV(uint viewport, uint first, int count, GLEnum* rates) => ((delegate* unmanaged[Cdecl]<uint, uint, int, GLEnum*, void>)vtable.glShadingRateImagePaletteNV)(viewport, first, count, rates);
            public void ShadingRateSampleOrderNV(GLEnum order) => ((delegate* unmanaged[Cdecl]<GLEnum, void>)vtable.glShadingRateSampleOrderNV)(order);
            public void ShadingRateSampleOrderCustomNV(GLEnum rate, uint samples, int* locations) => ((delegate* unmanaged[Cdecl]<GLEnum, uint, int*, void>)vtable.glShadingRateSampleOrderCustomNV)(rate, samples, locations);
            public void ViewportArrayvNV(uint first, int count, float* v) => ((delegate* unmanaged[Cdecl]<uint, int, float*, void>)vtable.glViewportArrayvNV)(first, count, v);
            public void ViewportIndexedfNV(uint index, float x, float y, float w, float h) => ((delegate* unmanaged[Cdecl]<uint, float, float, float, float, void>)vtable.glViewportIndexedfNV)(index, x, y, w, h);
            public void ViewportIndexedfvNV(uint index, float* v) => ((delegate* unmanaged[Cdecl]<uint, float*, void>)vtable.glViewportIndexedfvNV)(index, v);
            public void ScissorArrayvNV(uint first, int count, int* v) => ((delegate* unmanaged[Cdecl]<uint, int, int*, void>)vtable.glScissorArrayvNV)(first, count, v);
            public void ScissorIndexedNV(uint index, int left, int bottom, int width, int height) => ((delegate* unmanaged[Cdecl]<uint, int, int, int, int, void>)vtable.glScissorIndexedNV)(index, left, bottom, width, height);
            public void ScissorIndexedvNV(uint index, int* v) => ((delegate* unmanaged[Cdecl]<uint, int*, void>)vtable.glScissorIndexedvNV)(index, v);
            public void DepthRangeArrayfvNV(uint first, int count, float* v) => ((delegate* unmanaged[Cdecl]<uint, int, float*, void>)vtable.glDepthRangeArrayfvNV)(first, count, v);
            public void DepthRangeIndexedfNV(uint index, float n, float f) => ((delegate* unmanaged[Cdecl]<uint, float, float, void>)vtable.glDepthRangeIndexedfNV)(index, n, f);
            public void GetFloati_vNV(GetPName target, uint index, float* data) => ((delegate* unmanaged[Cdecl]<GetPName, uint, float*, void>)vtable.glGetFloati_vNV)(target, index, data);
            public void EnableiNV(EnableCap target, uint index) => ((delegate* unmanaged[Cdecl]<EnableCap, uint, void>)vtable.glEnableiNV)(target, index);
            public void DisableiNV(EnableCap target, uint index) => ((delegate* unmanaged[Cdecl]<EnableCap, uint, void>)vtable.glDisableiNV)(target, index);
            public byte IsEnablediNV(EnableCap target, uint index) => ((delegate* unmanaged[Cdecl]<EnableCap, uint, byte>)vtable.glIsEnablediNV)(target, index);
            public void ViewportSwizzleNV(uint index, GLEnum swizzlex, GLEnum swizzley, GLEnum swizzlez, GLEnum swizzlew) => ((delegate* unmanaged[Cdecl]<uint, GLEnum, GLEnum, GLEnum, GLEnum, void>)vtable.glViewportSwizzleNV)(index, swizzlex, swizzley, swizzlez, swizzlew);
        }
    }

#pragma warning restore IDE1006 // Naming Styles
}
