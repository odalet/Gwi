// This file is auto generated, do not edit.
using System;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;

namespace Gwi.OpenGL.GLES3
{
#pragma warning disable IDE1006 // Naming Styles

    public static class ANGLEOverloads
    {
        // DrawElementsInstancedANGLE overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.PointerToOffsetOverloader
        public static unsafe void DrawElementsInstancedANGLE(this GL.ANGLEExtension glInstance, PrimitiveType mode, int count, PrimitiveType type, nint offset, int primcount)
        {
            void* indices = (void*)offset;
            glInstance.DrawElementsInstancedANGLE(mode, count, type, indices, primcount);
        }

        // GetTranslatedShaderSourceANGLE overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.OutToReturnOverloader
        public static unsafe string GetTranslatedShaderSourceANGLE(this GL.ANGLEExtension glInstance, ShaderHandle shader, int bufSize, Span<int> length)
        {
            string source;
            fixed (int* length_ptr = length) // SpanOrArrayLayer
            {
                var source_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                glInstance.GetTranslatedShaderSourceANGLE(shader, bufSize, length_ptr, source_ptr);
                source = Marshal.PtrToStringUTF8((IntPtr)source_ptr)!;
                Marshal.FreeCoTaskMem((IntPtr)source_ptr);
            }
            return source;
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetTranslatedShaderSourceANGLE(this GL.ANGLEExtension glInstance, ShaderHandle shader, int bufSize, Span<int> length, out string source)
        {
            fixed (int* length_ptr = length) // SpanOrArrayLayer
            {
                var source_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                glInstance.GetTranslatedShaderSourceANGLE(shader, bufSize, length_ptr, source_ptr);
                source = Marshal.PtrToStringUTF8((IntPtr)source_ptr)!;
                Marshal.FreeCoTaskMem((IntPtr)source_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.OutToReturnOverloader
        public static unsafe string GetTranslatedShaderSourceANGLE(this GL.ANGLEExtension glInstance, ShaderHandle shader, int bufSize, int[] length)
        {
            string source;
            fixed (int* length_ptr = length) // SpanOrArrayLayer
            {
                var source_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                glInstance.GetTranslatedShaderSourceANGLE(shader, bufSize, length_ptr, source_ptr);
                source = Marshal.PtrToStringUTF8((IntPtr)source_ptr)!;
                Marshal.FreeCoTaskMem((IntPtr)source_ptr);
            }
            return source;
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetTranslatedShaderSourceANGLE(this GL.ANGLEExtension glInstance, ShaderHandle shader, int bufSize, int[] length, out string source)
        {
            fixed (int* length_ptr = length) // SpanOrArrayLayer
            {
                var source_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                glInstance.GetTranslatedShaderSourceANGLE(shader, bufSize, length_ptr, source_ptr);
                source = Marshal.PtrToStringUTF8((IntPtr)source_ptr)!;
                Marshal.FreeCoTaskMem((IntPtr)source_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.OutToReturnOverloader
        public static unsafe string GetTranslatedShaderSourceANGLE(this GL.ANGLEExtension glInstance, ShaderHandle shader, int bufSize, ref int length)
        {
            string source;
            fixed (int* length_ptr = &length) // RefInsteadOfPointerLayer
            {
                var source_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                glInstance.GetTranslatedShaderSourceANGLE(shader, bufSize, length_ptr, source_ptr);
                source = Marshal.PtrToStringUTF8((IntPtr)source_ptr)!;
                Marshal.FreeCoTaskMem((IntPtr)source_ptr);
            }
            return source;
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void GetTranslatedShaderSourceANGLE(this GL.ANGLEExtension glInstance, ShaderHandle shader, int bufSize, ref int length, out string source)
        {
            fixed (int* length_ptr = &length) // RefInsteadOfPointerLayer
            {
                var source_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                glInstance.GetTranslatedShaderSourceANGLE(shader, bufSize, length_ptr, source_ptr);
                source = Marshal.PtrToStringUTF8((IntPtr)source_ptr)!;
                Marshal.FreeCoTaskMem((IntPtr)source_ptr);
            }
        }
    }

#pragma warning restore IDE1006 // Naming Styles
}
