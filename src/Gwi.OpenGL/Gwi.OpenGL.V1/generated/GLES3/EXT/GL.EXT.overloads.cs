// This file is auto generated, do not edit.
using System;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;

namespace Gwi.OpenGL.GLES3
{
#pragma warning disable IDE1006 // Naming Styles

    public static class EXTOverloads
    {
        // EGLImageTargetTexStorageEXT overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void EGLImageTargetTexStorageEXT(this GL.EXTExtension glInstance, GLEnum target, IntPtr image, in int attrib_list)
        {
            fixed (int* attrib_list_ptr = &attrib_list) // RefInsteadOfPointerLayer
            {
                var image_vptr = (void*)image;
                glInstance.EGLImageTargetTexStorageEXT(target, image_vptr, attrib_list_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void EGLImageTargetTexStorageEXT<T1>(this GL.EXTExtension glInstance, GLEnum target, ref T1 image, in int attrib_list)
            where T1 : unmanaged
        {
            fixed (void* image_ptr = &image) // RefInsteadOfPointerLayer
            fixed (int* attrib_list_ptr = &attrib_list) // RefInsteadOfPointerLayer
            {
                glInstance.EGLImageTargetTexStorageEXT(target, image_ptr, attrib_list_ptr);
            }
        }

        // EGLImageTargetTextureStorageEXT overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void EGLImageTargetTextureStorageEXT(this GL.EXTExtension glInstance, TextureHandle texture, IntPtr image, in int attrib_list)
        {
            fixed (int* attrib_list_ptr = &attrib_list) // RefInsteadOfPointerLayer
            {
                var image_vptr = (void*)image;
                glInstance.EGLImageTargetTextureStorageEXT(texture, image_vptr, attrib_list_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void EGLImageTargetTextureStorageEXT<T1>(this GL.EXTExtension glInstance, TextureHandle texture, ref T1 image, in int attrib_list)
            where T1 : unmanaged
        {
            fixed (void* image_ptr = &image) // RefInsteadOfPointerLayer
            fixed (int* attrib_list_ptr = &attrib_list) // RefInsteadOfPointerLayer
            {
                glInstance.EGLImageTargetTextureStorageEXT(texture, image_ptr, attrib_list_ptr);
            }
        }

        // DrawElementsInstancedBaseInstanceEXT overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.PointerToOffsetOverloader
        public static unsafe void DrawElementsInstancedBaseInstanceEXT(this GL.EXTExtension glInstance, PrimitiveType mode, int count, PrimitiveType type, nint offset, int instancecount, uint baseinstance)
        {
            void* indices = (void*)offset;
            glInstance.DrawElementsInstancedBaseInstanceEXT(mode, count, type, indices, instancecount, baseinstance);
        }

        // DrawElementsInstancedBaseVertexBaseInstanceEXT overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.PointerToOffsetOverloader
        public static unsafe void DrawElementsInstancedBaseVertexBaseInstanceEXT(this GL.EXTExtension glInstance, PrimitiveType mode, int count, DrawElementsType type, nint offset, int instancecount, int basevertex, uint baseinstance)
        {
            void* indices = (void*)offset;
            glInstance.DrawElementsInstancedBaseVertexBaseInstanceEXT(mode, count, type, indices, instancecount, basevertex, baseinstance);
        }

        // BindFragDataLocationIndexedEXT overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.Transformer
        public static unsafe void BindFragDataLocationIndexedEXT(this GL.EXTExtension glInstance, ProgramHandle program, uint colorNumber, uint index, string name)
        {
            byte* name_ptr = (byte*)Marshal.StringToCoTaskMemUTF8(name);
            glInstance.BindFragDataLocationIndexedEXT(program, colorNumber, index, name_ptr);
            Marshal.FreeCoTaskMem((IntPtr)name_ptr);
        }

        // BindFragDataLocationEXT overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.Transformer
        public static unsafe void BindFragDataLocationEXT(this GL.EXTExtension glInstance, ProgramHandle program, uint color, string name)
        {
            byte* name_ptr = (byte*)Marshal.StringToCoTaskMemUTF8(name);
            glInstance.BindFragDataLocationEXT(program, color, name_ptr);
            Marshal.FreeCoTaskMem((IntPtr)name_ptr);
        }

        // GetProgramResourceLocationIndexEXT overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.Transformer
        public static unsafe int GetProgramResourceLocationIndexEXT(this GL.EXTExtension glInstance, ProgramHandle program, ProgramInterface programInterface, string name)
        {
            int returnValue;
            byte* name_ptr = (byte*)Marshal.StringToCoTaskMemUTF8(name);
            returnValue = glInstance.GetProgramResourceLocationIndexEXT(program, programInterface, name_ptr);
            Marshal.FreeCoTaskMem((IntPtr)name_ptr);
            return returnValue;
        }

        // GetFragDataIndexEXT overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.Transformer
        public static unsafe int GetFragDataIndexEXT(this GL.EXTExtension glInstance, ProgramHandle program, string name)
        {
            int returnValue;
            byte* name_ptr = (byte*)Marshal.StringToCoTaskMemUTF8(name);
            returnValue = glInstance.GetFragDataIndexEXT(program, name_ptr);
            Marshal.FreeCoTaskMem((IntPtr)name_ptr);
            return returnValue;
        }

        // BufferStorageEXT overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.VoidPtrToIntPtrOverloader
        public static unsafe void BufferStorageEXT(this GL.EXTExtension glInstance, BufferStorageTarget target, nint size, IntPtr data, BufferStorageMask flags)
        {
            var data_vptr = (void*)data;
            glInstance.BufferStorageEXT(target, size, data_vptr, flags);
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void BufferStorageEXT<T1>(this GL.EXTExtension glInstance, BufferStorageTarget target, ReadOnlySpan<T1> data, BufferStorageMask flags)
            where T1 : unmanaged
        {
            var size = (nint)(data.Length * sizeof(T1));
            fixed (void* data_ptr = data) // SpanOrArrayLayer
            {
                glInstance.BufferStorageEXT(target, size, data_ptr, flags);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void BufferStorageEXT<T1>(this GL.EXTExtension glInstance, BufferStorageTarget target, T1[] data, BufferStorageMask flags)
            where T1 : unmanaged
        {
            var size = (nint)(data.Length * sizeof(T1));
            fixed (void* data_ptr = data) // SpanOrArrayLayer
            {
                glInstance.BufferStorageEXT(target, size, data_ptr, flags);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void BufferStorageEXT<T1>(this GL.EXTExtension glInstance, BufferStorageTarget target, nint size, in T1 data, BufferStorageMask flags)
            where T1 : unmanaged
        {
            fixed (void* data_ptr = &data) // RefInsteadOfPointerLayer
            {
                glInstance.BufferStorageEXT(target, size, data_ptr, flags);
            }
        }

        // ClearTexImageEXT overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.VoidPtrToIntPtrOverloader
        public static unsafe void ClearTexImageEXT(this GL.EXTExtension glInstance, TextureHandle texture, int level, PixelFormat format, PixelType type, IntPtr data)
        {
            var data_vptr = (void*)data;
            glInstance.ClearTexImageEXT(texture, level, format, type, data_vptr);
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void ClearTexImageEXT<T1>(this GL.EXTExtension glInstance, TextureHandle texture, int level, PixelFormat format, PixelType type, ReadOnlySpan<T1> data)
            where T1 : unmanaged
        {
            fixed (void* data_ptr = data) // SpanOrArrayLayer
            {
                glInstance.ClearTexImageEXT(texture, level, format, type, data_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void ClearTexImageEXT<T1>(this GL.EXTExtension glInstance, TextureHandle texture, int level, PixelFormat format, PixelType type, T1[] data)
            where T1 : unmanaged
        {
            fixed (void* data_ptr = data) // SpanOrArrayLayer
            {
                glInstance.ClearTexImageEXT(texture, level, format, type, data_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void ClearTexImageEXT<T1>(this GL.EXTExtension glInstance, TextureHandle texture, int level, PixelFormat format, PixelType type, in T1 data)
            where T1 : unmanaged
        {
            fixed (void* data_ptr = &data) // RefInsteadOfPointerLayer
            {
                glInstance.ClearTexImageEXT(texture, level, format, type, data_ptr);
            }
        }

        // ClearTexSubImageEXT overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.VoidPtrToIntPtrOverloader
        public static unsafe void ClearTexSubImageEXT(this GL.EXTExtension glInstance, TextureHandle texture, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, PixelFormat format, PixelType type, IntPtr data)
        {
            var data_vptr = (void*)data;
            glInstance.ClearTexSubImageEXT(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, type, data_vptr);
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void ClearTexSubImageEXT<T1>(this GL.EXTExtension glInstance, TextureHandle texture, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, PixelFormat format, PixelType type, ReadOnlySpan<T1> data)
            where T1 : unmanaged
        {
            fixed (void* data_ptr = data) // SpanOrArrayLayer
            {
                glInstance.ClearTexSubImageEXT(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, type, data_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void ClearTexSubImageEXT<T1>(this GL.EXTExtension glInstance, TextureHandle texture, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, PixelFormat format, PixelType type, T1[] data)
            where T1 : unmanaged
        {
            fixed (void* data_ptr = data) // SpanOrArrayLayer
            {
                glInstance.ClearTexSubImageEXT(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, type, data_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void ClearTexSubImageEXT<T1>(this GL.EXTExtension glInstance, TextureHandle texture, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, PixelFormat format, PixelType type, in T1 data)
            where T1 : unmanaged
        {
            fixed (void* data_ptr = &data) // RefInsteadOfPointerLayer
            {
                glInstance.ClearTexSubImageEXT(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, type, data_ptr);
            }
        }

        // LabelObjectEXT overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.Transformer
        public static unsafe void LabelObjectEXT(this GL.EXTExtension glInstance, GLEnum type, uint obj, int length, string label)
        {
            byte* label_ptr = (byte*)Marshal.StringToCoTaskMemUTF8(label);
            glInstance.LabelObjectEXT(type, obj, length, label_ptr);
            Marshal.FreeCoTaskMem((IntPtr)label_ptr);
        }

        // GetObjectLabelEXT overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.OutToReturnOverloader
        public static unsafe string GetObjectLabelEXT(this GL.EXTExtension glInstance, GLEnum type, uint obj, int bufSize, Span<int> length)
        {
            string label;
            fixed (int* length_ptr = length) // SpanOrArrayLayer
            {
                var label_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                glInstance.GetObjectLabelEXT(type, obj, bufSize, length_ptr, label_ptr);
                label = Marshal.PtrToStringUTF8((IntPtr)label_ptr)!;
                Marshal.FreeCoTaskMem((IntPtr)label_ptr);
            }
            return label;
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetObjectLabelEXT(this GL.EXTExtension glInstance, GLEnum type, uint obj, int bufSize, Span<int> length, out string label)
        {
            fixed (int* length_ptr = length) // SpanOrArrayLayer
            {
                var label_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                glInstance.GetObjectLabelEXT(type, obj, bufSize, length_ptr, label_ptr);
                label = Marshal.PtrToStringUTF8((IntPtr)label_ptr)!;
                Marshal.FreeCoTaskMem((IntPtr)label_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.OutToReturnOverloader
        public static unsafe string GetObjectLabelEXT(this GL.EXTExtension glInstance, GLEnum type, uint obj, int bufSize, int[] length)
        {
            string label;
            fixed (int* length_ptr = length) // SpanOrArrayLayer
            {
                var label_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                glInstance.GetObjectLabelEXT(type, obj, bufSize, length_ptr, label_ptr);
                label = Marshal.PtrToStringUTF8((IntPtr)label_ptr)!;
                Marshal.FreeCoTaskMem((IntPtr)label_ptr);
            }
            return label;
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetObjectLabelEXT(this GL.EXTExtension glInstance, GLEnum type, uint obj, int bufSize, int[] length, out string label)
        {
            fixed (int* length_ptr = length) // SpanOrArrayLayer
            {
                var label_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                glInstance.GetObjectLabelEXT(type, obj, bufSize, length_ptr, label_ptr);
                label = Marshal.PtrToStringUTF8((IntPtr)label_ptr)!;
                Marshal.FreeCoTaskMem((IntPtr)label_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.OutToReturnOverloader
        public static unsafe string GetObjectLabelEXT(this GL.EXTExtension glInstance, GLEnum type, uint obj, int bufSize, ref int length)
        {
            string label;
            fixed (int* length_ptr = &length) // RefInsteadOfPointerLayer
            {
                var label_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                glInstance.GetObjectLabelEXT(type, obj, bufSize, length_ptr, label_ptr);
                label = Marshal.PtrToStringUTF8((IntPtr)label_ptr)!;
                Marshal.FreeCoTaskMem((IntPtr)label_ptr);
            }
            return label;
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void GetObjectLabelEXT(this GL.EXTExtension glInstance, GLEnum type, uint obj, int bufSize, ref int length, out string label)
        {
            fixed (int* length_ptr = &length) // RefInsteadOfPointerLayer
            {
                var label_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                glInstance.GetObjectLabelEXT(type, obj, bufSize, length_ptr, label_ptr);
                label = Marshal.PtrToStringUTF8((IntPtr)label_ptr)!;
                Marshal.FreeCoTaskMem((IntPtr)label_ptr);
            }
        }

        // InsertEventMarkerEXT overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.Transformer
        public static unsafe void InsertEventMarkerEXT(this GL.EXTExtension glInstance, int length, string marker)
        {
            byte* marker_ptr = (byte*)Marshal.StringToCoTaskMemUTF8(marker);
            glInstance.InsertEventMarkerEXT(length, marker_ptr);
            Marshal.FreeCoTaskMem((IntPtr)marker_ptr);
        }

        // PushGroupMarkerEXT overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.Transformer
        public static unsafe void PushGroupMarkerEXT(this GL.EXTExtension glInstance, int length, string marker)
        {
            byte* marker_ptr = (byte*)Marshal.StringToCoTaskMemUTF8(marker);
            glInstance.PushGroupMarkerEXT(length, marker_ptr);
            Marshal.FreeCoTaskMem((IntPtr)marker_ptr);
        }

        // DiscardFramebufferEXT overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void DiscardFramebufferEXT(this GL.EXTExtension glInstance, FramebufferTarget target, ReadOnlySpan<InvalidateFramebufferAttachment> attachments)
        {
            var numAttachments = (int)(attachments.Length);
            fixed (InvalidateFramebufferAttachment* attachments_ptr = attachments) // SpanOrArrayLayer
            {
                glInstance.DiscardFramebufferEXT(target, numAttachments, attachments_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void DiscardFramebufferEXT(this GL.EXTExtension glInstance, FramebufferTarget target, InvalidateFramebufferAttachment[] attachments)
        {
            var numAttachments = (int)(attachments.Length);
            fixed (InvalidateFramebufferAttachment* attachments_ptr = attachments) // SpanOrArrayLayer
            {
                glInstance.DiscardFramebufferEXT(target, numAttachments, attachments_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void DiscardFramebufferEXT(this GL.EXTExtension glInstance, FramebufferTarget target, int numAttachments, in InvalidateFramebufferAttachment attachments)
        {
            fixed (InvalidateFramebufferAttachment* attachments_ptr = &attachments) // RefInsteadOfPointerLayer
            {
                glInstance.DiscardFramebufferEXT(target, numAttachments, attachments_ptr);
            }
        }

        // GenQueriesEXT overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GenQueriesEXT(this GL.EXTExtension glInstance, Span<QueryHandle> ids)
        {
            var n = (int)(ids.Length);
            fixed (QueryHandle* ids_ptr = ids) // SpanOrArrayLayer
            {
                glInstance.GenQueriesEXT(n, ids_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GenQueriesEXT(this GL.EXTExtension glInstance, QueryHandle[] ids)
        {
            var n = (int)(ids.Length);
            fixed (QueryHandle* ids_ptr = ids) // SpanOrArrayLayer
            {
                glInstance.GenQueriesEXT(n, ids_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void GenQueriesEXT(this GL.EXTExtension glInstance, int n, ref QueryHandle ids)
        {
            fixed (QueryHandle* ids_ptr = &ids) // RefInsteadOfPointerLayer
            {
                glInstance.GenQueriesEXT(n, ids_ptr);
            }
        }

        // DeleteQueriesEXT overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void DeleteQueriesEXT(this GL.EXTExtension glInstance, ReadOnlySpan<QueryHandle> ids)
        {
            var n = (int)(ids.Length);
            fixed (QueryHandle* ids_ptr = ids) // SpanOrArrayLayer
            {
                glInstance.DeleteQueriesEXT(n, ids_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void DeleteQueriesEXT(this GL.EXTExtension glInstance, QueryHandle[] ids)
        {
            var n = (int)(ids.Length);
            fixed (QueryHandle* ids_ptr = ids) // SpanOrArrayLayer
            {
                glInstance.DeleteQueriesEXT(n, ids_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void DeleteQueriesEXT(this GL.EXTExtension glInstance, int n, in QueryHandle ids)
        {
            fixed (QueryHandle* ids_ptr = &ids) // RefInsteadOfPointerLayer
            {
                glInstance.DeleteQueriesEXT(n, ids_ptr);
            }
        }

        // GetQueryivEXT overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetQueryivEXT(this GL.EXTExtension glInstance, QueryTarget target, QueryParameterName pname, Span<int> parameters)
        {
            fixed (int* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.GetQueryivEXT(target, pname, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetQueryivEXT(this GL.EXTExtension glInstance, QueryTarget target, QueryParameterName pname, int[] parameters)
        {
            fixed (int* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.GetQueryivEXT(target, pname, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void GetQueryivEXT(this GL.EXTExtension glInstance, QueryTarget target, QueryParameterName pname, ref int parameters)
        {
            fixed (int* parameters_ptr = &parameters) // RefInsteadOfPointerLayer
            {
                glInstance.GetQueryivEXT(target, pname, parameters_ptr);
            }
        }

        // GetQueryObjectivEXT overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetQueryObjectivEXT(this GL.EXTExtension glInstance, QueryHandle id, QueryObjectParameterName pname, Span<int> parameters)
        {
            fixed (int* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.GetQueryObjectivEXT(id, pname, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetQueryObjectivEXT(this GL.EXTExtension glInstance, QueryHandle id, QueryObjectParameterName pname, int[] parameters)
        {
            fixed (int* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.GetQueryObjectivEXT(id, pname, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void GetQueryObjectivEXT(this GL.EXTExtension glInstance, QueryHandle id, QueryObjectParameterName pname, ref int parameters)
        {
            fixed (int* parameters_ptr = &parameters) // RefInsteadOfPointerLayer
            {
                glInstance.GetQueryObjectivEXT(id, pname, parameters_ptr);
            }
        }

        // GetQueryObjectuivEXT overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetQueryObjectuivEXT(this GL.EXTExtension glInstance, QueryHandle id, QueryObjectParameterName pname, Span<uint> parameters)
        {
            fixed (uint* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.GetQueryObjectuivEXT(id, pname, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetQueryObjectuivEXT(this GL.EXTExtension glInstance, QueryHandle id, QueryObjectParameterName pname, uint[] parameters)
        {
            fixed (uint* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.GetQueryObjectuivEXT(id, pname, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void GetQueryObjectuivEXT(this GL.EXTExtension glInstance, QueryHandle id, QueryObjectParameterName pname, ref uint parameters)
        {
            fixed (uint* parameters_ptr = &parameters) // RefInsteadOfPointerLayer
            {
                glInstance.GetQueryObjectuivEXT(id, pname, parameters_ptr);
            }
        }

        // GetQueryObjecti64vEXT overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetQueryObjecti64vEXT(this GL.EXTExtension glInstance, QueryHandle id, QueryObjectParameterName pname, Span<long> parameters)
        {
            fixed (long* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.GetQueryObjecti64vEXT(id, pname, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetQueryObjecti64vEXT(this GL.EXTExtension glInstance, QueryHandle id, QueryObjectParameterName pname, long[] parameters)
        {
            fixed (long* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.GetQueryObjecti64vEXT(id, pname, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void GetQueryObjecti64vEXT(this GL.EXTExtension glInstance, QueryHandle id, QueryObjectParameterName pname, ref long parameters)
        {
            fixed (long* parameters_ptr = &parameters) // RefInsteadOfPointerLayer
            {
                glInstance.GetQueryObjecti64vEXT(id, pname, parameters_ptr);
            }
        }

        // GetQueryObjectui64vEXT overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetQueryObjectui64vEXT(this GL.EXTExtension glInstance, QueryHandle id, QueryObjectParameterName pname, Span<ulong> parameters)
        {
            fixed (ulong* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.GetQueryObjectui64vEXT(id, pname, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetQueryObjectui64vEXT(this GL.EXTExtension glInstance, QueryHandle id, QueryObjectParameterName pname, ulong[] parameters)
        {
            fixed (ulong* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.GetQueryObjectui64vEXT(id, pname, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void GetQueryObjectui64vEXT(this GL.EXTExtension glInstance, QueryHandle id, QueryObjectParameterName pname, ref ulong parameters)
        {
            fixed (ulong* parameters_ptr = &parameters) // RefInsteadOfPointerLayer
            {
                glInstance.GetQueryObjectui64vEXT(id, pname, parameters_ptr);
            }
        }

        // GetInteger64vEXT overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetInteger64vEXT(this GL.EXTExtension glInstance, GetPName pname, Span<long> data)
        {
            fixed (long* data_ptr = data) // SpanOrArrayLayer
            {
                glInstance.GetInteger64vEXT(pname, data_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetInteger64vEXT(this GL.EXTExtension glInstance, GetPName pname, long[] data)
        {
            fixed (long* data_ptr = data) // SpanOrArrayLayer
            {
                glInstance.GetInteger64vEXT(pname, data_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void GetInteger64vEXT(this GL.EXTExtension glInstance, GetPName pname, ref long data)
        {
            fixed (long* data_ptr = &data) // RefInsteadOfPointerLayer
            {
                glInstance.GetInteger64vEXT(pname, data_ptr);
            }
        }

        // DrawBuffersEXT overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void DrawBuffersEXT(this GL.EXTExtension glInstance, ReadOnlySpan<GLEnum> bufs)
        {
            var n = (int)(bufs.Length);
            fixed (GLEnum* bufs_ptr = bufs) // SpanOrArrayLayer
            {
                glInstance.DrawBuffersEXT(n, bufs_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void DrawBuffersEXT(this GL.EXTExtension glInstance, GLEnum[] bufs)
        {
            var n = (int)(bufs.Length);
            fixed (GLEnum* bufs_ptr = bufs) // SpanOrArrayLayer
            {
                glInstance.DrawBuffersEXT(n, bufs_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void DrawBuffersEXT(this GL.EXTExtension glInstance, int n, in GLEnum bufs)
        {
            fixed (GLEnum* bufs_ptr = &bufs) // RefInsteadOfPointerLayer
            {
                glInstance.DrawBuffersEXT(n, bufs_ptr);
            }
        }

        // ColorMaskiEXT overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.BoolOverloader
        public static unsafe void ColorMaskiEXT(this GL.EXTExtension glInstance, uint index, bool r, bool g, bool b, bool a)
        {
            var r_byte = (byte)(r ? 1 : 0);
            var g_byte = (byte)(g ? 1 : 0);
            var b_byte = (byte)(b ? 1 : 0);
            var a_byte = (byte)(a ? 1 : 0);
            glInstance.ColorMaskiEXT(index, r_byte, g_byte, b_byte, a_byte);
        }

        // DrawElementsBaseVertexEXT overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.PointerToOffsetOverloader
        public static unsafe void DrawElementsBaseVertexEXT(this GL.EXTExtension glInstance, PrimitiveType mode, int count, DrawElementsType type, nint offset, int basevertex)
        {
            void* indices = (void*)offset;
            glInstance.DrawElementsBaseVertexEXT(mode, count, type, indices, basevertex);
        }

        // DrawRangeElementsBaseVertexEXT overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.PointerToOffsetOverloader
        public static unsafe void DrawRangeElementsBaseVertexEXT(this GL.EXTExtension glInstance, PrimitiveType mode, uint start, uint end, int count, DrawElementsType type, nint offset, int basevertex)
        {
            void* indices = (void*)offset;
            glInstance.DrawRangeElementsBaseVertexEXT(mode, start, end, count, type, indices, basevertex);
        }

        // DrawElementsInstancedBaseVertexEXT overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.PointerToOffsetOverloader
        public static unsafe void DrawElementsInstancedBaseVertexEXT(this GL.EXTExtension glInstance, PrimitiveType mode, int count, DrawElementsType type, nint offset, int instancecount, int basevertex)
        {
            void* indices = (void*)offset;
            glInstance.DrawElementsInstancedBaseVertexEXT(mode, count, type, indices, instancecount, basevertex);
        }

        // MultiDrawElementsBaseVertexEXT overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void MultiDrawElementsBaseVertexEXT(this GL.EXTExtension glInstance, PrimitiveType mode, ReadOnlySpan<int> count, DrawElementsType type, void** indices, int drawcount, ReadOnlySpan<int> basevertex)
        {
            fixed (int* count_ptr = count) // SpanOrArrayLayer
            {
                fixed (int* basevertex_ptr = basevertex) // SpanOrArrayLayer
                {
                    glInstance.MultiDrawElementsBaseVertexEXT(mode, count_ptr, type, indices, drawcount, basevertex_ptr);
                }
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void MultiDrawElementsBaseVertexEXT(this GL.EXTExtension glInstance, PrimitiveType mode, int[] count, DrawElementsType type, void** indices, int drawcount, int[] basevertex)
        {
            fixed (int* count_ptr = count) // SpanOrArrayLayer
            {
                fixed (int* basevertex_ptr = basevertex) // SpanOrArrayLayer
                {
                    glInstance.MultiDrawElementsBaseVertexEXT(mode, count_ptr, type, indices, drawcount, basevertex_ptr);
                }
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void MultiDrawElementsBaseVertexEXT(this GL.EXTExtension glInstance, PrimitiveType mode, in int count, DrawElementsType type, void** indices, int drawcount, in int basevertex)
        {
            fixed (int* count_ptr = &count) // RefInsteadOfPointerLayer
            fixed (int* basevertex_ptr = &basevertex) // RefInsteadOfPointerLayer
            {
                glInstance.MultiDrawElementsBaseVertexEXT(mode, count_ptr, type, indices, drawcount, basevertex_ptr);
            }
        }

        // DrawElementsInstancedEXT overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.PointerToOffsetOverloader
        public static unsafe void DrawElementsInstancedEXT(this GL.EXTExtension glInstance, PrimitiveType mode, int count, DrawElementsType type, nint offset, int primcount)
        {
            void* indices = (void*)offset;
            glInstance.DrawElementsInstancedEXT(mode, count, type, indices, primcount);
        }

        // BufferStorageExternalEXT overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.VoidPtrToIntPtrOverloader
        public static unsafe void BufferStorageExternalEXT(this GL.EXTExtension glInstance, GLEnum target, IntPtr offset, nint size, IntPtr clientBuffer, BufferStorageMask flags)
        {
            var clientBuffer_vptr = (void*)clientBuffer;
            glInstance.BufferStorageExternalEXT(target, offset, size, clientBuffer_vptr, flags);
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void BufferStorageExternalEXT<T1>(this GL.EXTExtension glInstance, GLEnum target, IntPtr offset, nint size, ref T1 clientBuffer, BufferStorageMask flags)
            where T1 : unmanaged
        {
            fixed (void* clientBuffer_ptr = &clientBuffer) // RefInsteadOfPointerLayer
            {
                glInstance.BufferStorageExternalEXT(target, offset, size, clientBuffer_ptr, flags);
            }
        }

        // NamedBufferStorageExternalEXT overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.VoidPtrToIntPtrOverloader
        public static unsafe void NamedBufferStorageExternalEXT(this GL.EXTExtension glInstance, BufferHandle buffer, IntPtr offset, nint size, IntPtr clientBuffer, BufferStorageMask flags)
        {
            var clientBuffer_vptr = (void*)clientBuffer;
            glInstance.NamedBufferStorageExternalEXT(buffer, offset, size, clientBuffer_vptr, flags);
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void NamedBufferStorageExternalEXT<T1>(this GL.EXTExtension glInstance, BufferHandle buffer, IntPtr offset, nint size, ref T1 clientBuffer, BufferStorageMask flags)
            where T1 : unmanaged
        {
            fixed (void* clientBuffer_ptr = &clientBuffer) // RefInsteadOfPointerLayer
            {
                glInstance.NamedBufferStorageExternalEXT(buffer, offset, size, clientBuffer_ptr, flags);
            }
        }

        // GetUnsignedBytevEXT overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetUnsignedBytevEXT(this GL.EXTExtension glInstance, GetPName pname, Span<byte> data)
        {
            fixed (byte* data_ptr = data) // SpanOrArrayLayer
            {
                glInstance.GetUnsignedBytevEXT(pname, data_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetUnsignedBytevEXT(this GL.EXTExtension glInstance, GetPName pname, byte[] data)
        {
            fixed (byte* data_ptr = data) // SpanOrArrayLayer
            {
                glInstance.GetUnsignedBytevEXT(pname, data_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void GetUnsignedBytevEXT(this GL.EXTExtension glInstance, GetPName pname, ref byte data)
        {
            fixed (byte* data_ptr = &data) // RefInsteadOfPointerLayer
            {
                glInstance.GetUnsignedBytevEXT(pname, data_ptr);
            }
        }

        // GetUnsignedBytei_vEXT overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetUnsignedBytei_vEXT(this GL.EXTExtension glInstance, GLEnum target, uint index, Span<byte> data)
        {
            fixed (byte* data_ptr = data) // SpanOrArrayLayer
            {
                glInstance.GetUnsignedBytei_vEXT(target, index, data_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetUnsignedBytei_vEXT(this GL.EXTExtension glInstance, GLEnum target, uint index, byte[] data)
        {
            fixed (byte* data_ptr = data) // SpanOrArrayLayer
            {
                glInstance.GetUnsignedBytei_vEXT(target, index, data_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void GetUnsignedBytei_vEXT(this GL.EXTExtension glInstance, GLEnum target, uint index, ref byte data)
        {
            fixed (byte* data_ptr = &data) // RefInsteadOfPointerLayer
            {
                glInstance.GetUnsignedBytei_vEXT(target, index, data_ptr);
            }
        }

        // DeleteMemoryObjectsEXT overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void DeleteMemoryObjectsEXT(this GL.EXTExtension glInstance, ReadOnlySpan<uint> memoryObjects)
        {
            var n = (int)(memoryObjects.Length);
            fixed (uint* memoryObjects_ptr = memoryObjects) // SpanOrArrayLayer
            {
                glInstance.DeleteMemoryObjectsEXT(n, memoryObjects_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void DeleteMemoryObjectsEXT(this GL.EXTExtension glInstance, uint[] memoryObjects)
        {
            var n = (int)(memoryObjects.Length);
            fixed (uint* memoryObjects_ptr = memoryObjects) // SpanOrArrayLayer
            {
                glInstance.DeleteMemoryObjectsEXT(n, memoryObjects_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void DeleteMemoryObjectsEXT(this GL.EXTExtension glInstance, int n, in uint memoryObjects)
        {
            fixed (uint* memoryObjects_ptr = &memoryObjects) // RefInsteadOfPointerLayer
            {
                glInstance.DeleteMemoryObjectsEXT(n, memoryObjects_ptr);
            }
        }

        // CreateMemoryObjectsEXT overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void CreateMemoryObjectsEXT(this GL.EXTExtension glInstance, int n, ref uint memoryObjects)
        {
            fixed (uint* memoryObjects_ptr = &memoryObjects) // RefInsteadOfPointerLayer
            {
                glInstance.CreateMemoryObjectsEXT(n, memoryObjects_ptr);
            }
        }

        // MemoryObjectParameterivEXT overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void MemoryObjectParameterivEXT(this GL.EXTExtension glInstance, uint memoryObject, MemoryObjectParameterName pname, in int parameters)
        {
            fixed (int* parameters_ptr = &parameters) // RefInsteadOfPointerLayer
            {
                glInstance.MemoryObjectParameterivEXT(memoryObject, pname, parameters_ptr);
            }
        }

        // GetMemoryObjectParameterivEXT overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void GetMemoryObjectParameterivEXT(this GL.EXTExtension glInstance, uint memoryObject, MemoryObjectParameterName pname, ref int parameters)
        {
            fixed (int* parameters_ptr = &parameters) // RefInsteadOfPointerLayer
            {
                glInstance.GetMemoryObjectParameterivEXT(memoryObject, pname, parameters_ptr);
            }
        }

        // TexStorageMem2DMultisampleEXT overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.BoolOverloader
        public static unsafe void TexStorageMem2DMultisampleEXT(this GL.EXTExtension glInstance, TextureTarget target, int samples, SizedInternalFormat internalFormat, int width, int height, bool fixedSampleLocations, uint memory, ulong offset)
        {
            var fixedSampleLocations_byte = (byte)(fixedSampleLocations ? 1 : 0);
            glInstance.TexStorageMem2DMultisampleEXT(target, samples, internalFormat, width, height, fixedSampleLocations_byte, memory, offset);
        }

        // TexStorageMem3DMultisampleEXT overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.BoolOverloader
        public static unsafe void TexStorageMem3DMultisampleEXT(this GL.EXTExtension glInstance, TextureTarget target, int samples, SizedInternalFormat internalFormat, int width, int height, int depth, bool fixedSampleLocations, uint memory, ulong offset)
        {
            var fixedSampleLocations_byte = (byte)(fixedSampleLocations ? 1 : 0);
            glInstance.TexStorageMem3DMultisampleEXT(target, samples, internalFormat, width, height, depth, fixedSampleLocations_byte, memory, offset);
        }

        // TextureStorageMem2DMultisampleEXT overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.BoolOverloader
        public static unsafe void TextureStorageMem2DMultisampleEXT(this GL.EXTExtension glInstance, TextureHandle texture, int samples, SizedInternalFormat internalFormat, int width, int height, bool fixedSampleLocations, uint memory, ulong offset)
        {
            var fixedSampleLocations_byte = (byte)(fixedSampleLocations ? 1 : 0);
            glInstance.TextureStorageMem2DMultisampleEXT(texture, samples, internalFormat, width, height, fixedSampleLocations_byte, memory, offset);
        }

        // TextureStorageMem3DMultisampleEXT overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.BoolOverloader
        public static unsafe void TextureStorageMem3DMultisampleEXT(this GL.EXTExtension glInstance, TextureHandle texture, int samples, SizedInternalFormat internalFormat, int width, int height, int depth, bool fixedSampleLocations, uint memory, ulong offset)
        {
            var fixedSampleLocations_byte = (byte)(fixedSampleLocations ? 1 : 0);
            glInstance.TextureStorageMem3DMultisampleEXT(texture, samples, internalFormat, width, height, depth, fixedSampleLocations_byte, memory, offset);
        }

        // ImportMemoryWin32HandleEXT overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.VoidPtrToIntPtrOverloader
        public static unsafe void ImportMemoryWin32HandleEXT(this GL.EXTExtension glInstance, uint memory, ulong size, ExternalHandleType handleType, IntPtr handle)
        {
            var handle_vptr = (void*)handle;
            glInstance.ImportMemoryWin32HandleEXT(memory, size, handleType, handle_vptr);
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void ImportMemoryWin32HandleEXT<T1>(this GL.EXTExtension glInstance, uint memory, ulong size, ExternalHandleType handleType, ref T1 handle)
            where T1 : unmanaged
        {
            fixed (void* handle_ptr = &handle) // RefInsteadOfPointerLayer
            {
                glInstance.ImportMemoryWin32HandleEXT(memory, size, handleType, handle_ptr);
            }
        }

        // ImportMemoryWin32NameEXT overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.VoidPtrToIntPtrOverloader
        public static unsafe void ImportMemoryWin32NameEXT(this GL.EXTExtension glInstance, uint memory, ulong size, ExternalHandleType handleType, IntPtr name)
        {
            var name_vptr = (void*)name;
            glInstance.ImportMemoryWin32NameEXT(memory, size, handleType, name_vptr);
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void ImportMemoryWin32NameEXT<T1>(this GL.EXTExtension glInstance, uint memory, ulong size, ExternalHandleType handleType, in T1 name)
            where T1 : unmanaged
        {
            fixed (void* name_ptr = &name) // RefInsteadOfPointerLayer
            {
                glInstance.ImportMemoryWin32NameEXT(memory, size, handleType, name_ptr);
            }
        }

        // MultiDrawArraysEXT overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void MultiDrawArraysEXT(this GL.EXTExtension glInstance, PrimitiveType mode, ReadOnlySpan<int> first, ReadOnlySpan<int> count, int primcount)
        {
            fixed (int* first_ptr = first) // SpanOrArrayLayer
            {
                fixed (int* count_ptr = count) // SpanOrArrayLayer
                {
                    glInstance.MultiDrawArraysEXT(mode, first_ptr, count_ptr, primcount);
                }
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void MultiDrawArraysEXT(this GL.EXTExtension glInstance, PrimitiveType mode, int[] first, int[] count, int primcount)
        {
            fixed (int* first_ptr = first) // SpanOrArrayLayer
            {
                fixed (int* count_ptr = count) // SpanOrArrayLayer
                {
                    glInstance.MultiDrawArraysEXT(mode, first_ptr, count_ptr, primcount);
                }
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void MultiDrawArraysEXT(this GL.EXTExtension glInstance, PrimitiveType mode, in int first, in int count, int primcount)
        {
            fixed (int* first_ptr = &first) // RefInsteadOfPointerLayer
            fixed (int* count_ptr = &count) // RefInsteadOfPointerLayer
            {
                glInstance.MultiDrawArraysEXT(mode, first_ptr, count_ptr, primcount);
            }
        }

        // MultiDrawElementsEXT overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void MultiDrawElementsEXT(this GL.EXTExtension glInstance, PrimitiveType mode, ReadOnlySpan<int> count, DrawElementsType type, void** indices, int primcount)
        {
            fixed (int* count_ptr = count) // SpanOrArrayLayer
            {
                glInstance.MultiDrawElementsEXT(mode, count_ptr, type, indices, primcount);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void MultiDrawElementsEXT(this GL.EXTExtension glInstance, PrimitiveType mode, int[] count, DrawElementsType type, void** indices, int primcount)
        {
            fixed (int* count_ptr = count) // SpanOrArrayLayer
            {
                glInstance.MultiDrawElementsEXT(mode, count_ptr, type, indices, primcount);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void MultiDrawElementsEXT(this GL.EXTExtension glInstance, PrimitiveType mode, in int count, DrawElementsType type, void** indices, int primcount)
        {
            fixed (int* count_ptr = &count) // RefInsteadOfPointerLayer
            {
                glInstance.MultiDrawElementsEXT(mode, count_ptr, type, indices, primcount);
            }
        }

        // MultiDrawArraysIndirectEXT overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.VoidPtrToIntPtrOverloader
        public static unsafe void MultiDrawArraysIndirectEXT(this GL.EXTExtension glInstance, PrimitiveType mode, IntPtr indirect, int drawcount, int stride)
        {
            var indirect_vptr = (void*)indirect;
            glInstance.MultiDrawArraysIndirectEXT(mode, indirect_vptr, drawcount, stride);
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void MultiDrawArraysIndirectEXT<T1>(this GL.EXTExtension glInstance, PrimitiveType mode, ReadOnlySpan<T1> indirect, int drawcount, int stride)
            where T1 : unmanaged
        {
            fixed (void* indirect_ptr = indirect) // SpanOrArrayLayer
            {
                glInstance.MultiDrawArraysIndirectEXT(mode, indirect_ptr, drawcount, stride);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void MultiDrawArraysIndirectEXT<T1>(this GL.EXTExtension glInstance, PrimitiveType mode, T1[] indirect, int drawcount, int stride)
            where T1 : unmanaged
        {
            fixed (void* indirect_ptr = indirect) // SpanOrArrayLayer
            {
                glInstance.MultiDrawArraysIndirectEXT(mode, indirect_ptr, drawcount, stride);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void MultiDrawArraysIndirectEXT<T1>(this GL.EXTExtension glInstance, PrimitiveType mode, in T1 indirect, int drawcount, int stride)
            where T1 : unmanaged
        {
            fixed (void* indirect_ptr = &indirect) // RefInsteadOfPointerLayer
            {
                glInstance.MultiDrawArraysIndirectEXT(mode, indirect_ptr, drawcount, stride);
            }
        }

        // MultiDrawElementsIndirectEXT overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.VoidPtrToIntPtrOverloader
        public static unsafe void MultiDrawElementsIndirectEXT(this GL.EXTExtension glInstance, PrimitiveType mode, DrawElementsType type, IntPtr indirect, int drawcount, int stride)
        {
            var indirect_vptr = (void*)indirect;
            glInstance.MultiDrawElementsIndirectEXT(mode, type, indirect_vptr, drawcount, stride);
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void MultiDrawElementsIndirectEXT<T1>(this GL.EXTExtension glInstance, PrimitiveType mode, DrawElementsType type, ReadOnlySpan<T1> indirect, int drawcount, int stride)
            where T1 : unmanaged
        {
            fixed (void* indirect_ptr = indirect) // SpanOrArrayLayer
            {
                glInstance.MultiDrawElementsIndirectEXT(mode, type, indirect_ptr, drawcount, stride);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void MultiDrawElementsIndirectEXT<T1>(this GL.EXTExtension glInstance, PrimitiveType mode, DrawElementsType type, T1[] indirect, int drawcount, int stride)
            where T1 : unmanaged
        {
            fixed (void* indirect_ptr = indirect) // SpanOrArrayLayer
            {
                glInstance.MultiDrawElementsIndirectEXT(mode, type, indirect_ptr, drawcount, stride);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void MultiDrawElementsIndirectEXT<T1>(this GL.EXTExtension glInstance, PrimitiveType mode, DrawElementsType type, in T1 indirect, int drawcount, int stride)
            where T1 : unmanaged
        {
            fixed (void* indirect_ptr = &indirect) // RefInsteadOfPointerLayer
            {
                glInstance.MultiDrawElementsIndirectEXT(mode, type, indirect_ptr, drawcount, stride);
            }
        }

        // DrawBuffersIndexedEXT overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void DrawBuffersIndexedEXT(this GL.EXTExtension glInstance, int n, ReadOnlySpan<GLEnum> location, ReadOnlySpan<int> indices)
        {
            fixed (GLEnum* location_ptr = location) // SpanOrArrayLayer
            {
                fixed (int* indices_ptr = indices) // SpanOrArrayLayer
                {
                    glInstance.DrawBuffersIndexedEXT(n, location_ptr, indices_ptr);
                }
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void DrawBuffersIndexedEXT(this GL.EXTExtension glInstance, int n, GLEnum[] location, int[] indices)
        {
            fixed (GLEnum* location_ptr = location) // SpanOrArrayLayer
            {
                fixed (int* indices_ptr = indices) // SpanOrArrayLayer
                {
                    glInstance.DrawBuffersIndexedEXT(n, location_ptr, indices_ptr);
                }
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void DrawBuffersIndexedEXT(this GL.EXTExtension glInstance, int n, in GLEnum location, in int indices)
        {
            fixed (GLEnum* location_ptr = &location) // RefInsteadOfPointerLayer
            fixed (int* indices_ptr = &indices) // RefInsteadOfPointerLayer
            {
                glInstance.DrawBuffersIndexedEXT(n, location_ptr, indices_ptr);
            }
        }

        // GetIntegeri_vEXT overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void GetIntegeri_vEXT(this GL.EXTExtension glInstance, GetPName target, uint index, ref int data)
        {
            fixed (int* data_ptr = &data) // RefInsteadOfPointerLayer
            {
                glInstance.GetIntegeri_vEXT(target, index, data_ptr);
            }
        }

        // RasterSamplesEXT overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.BoolOverloader
        public static unsafe void RasterSamplesEXT(this GL.EXTExtension glInstance, uint samples, bool fixedsamplelocations)
        {
            var fixedsamplelocations_byte = (byte)(fixedsamplelocations ? 1 : 0);
            glInstance.RasterSamplesEXT(samples, fixedsamplelocations_byte);
        }

        // ReadnPixelsEXT overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.VoidPtrToIntPtrOverloader
        public static unsafe void ReadnPixelsEXT(this GL.EXTExtension glInstance, int x, int y, int width, int height, PixelFormat format, PixelType type, int bufSize, IntPtr data)
        {
            var data_vptr = (void*)data;
            glInstance.ReadnPixelsEXT(x, y, width, height, format, type, bufSize, data_vptr);
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void ReadnPixelsEXT<T1>(this GL.EXTExtension glInstance, int x, int y, int width, int height, PixelFormat format, PixelType type, Span<T1> data)
            where T1 : unmanaged
        {
            var bufSize = (int)(data.Length * sizeof(T1));
            fixed (void* data_ptr = data) // SpanOrArrayLayer
            {
                glInstance.ReadnPixelsEXT(x, y, width, height, format, type, bufSize, data_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void ReadnPixelsEXT<T1>(this GL.EXTExtension glInstance, int x, int y, int width, int height, PixelFormat format, PixelType type, T1[] data)
            where T1 : unmanaged
        {
            var bufSize = (int)(data.Length * sizeof(T1));
            fixed (void* data_ptr = data) // SpanOrArrayLayer
            {
                glInstance.ReadnPixelsEXT(x, y, width, height, format, type, bufSize, data_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void ReadnPixelsEXT<T1>(this GL.EXTExtension glInstance, int x, int y, int width, int height, PixelFormat format, PixelType type, int bufSize, ref T1 data)
            where T1 : unmanaged
        {
            fixed (void* data_ptr = &data) // RefInsteadOfPointerLayer
            {
                glInstance.ReadnPixelsEXT(x, y, width, height, format, type, bufSize, data_ptr);
            }
        }

        // GetnUniformfvEXT overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetnUniformfvEXT(this GL.EXTExtension glInstance, ProgramHandle program, int location, Span<float> parameters)
        {
            var bufSize = (int)(parameters.Length * 4);
            fixed (float* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.GetnUniformfvEXT(program, location, bufSize, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetnUniformfvEXT(this GL.EXTExtension glInstance, ProgramHandle program, int location, float[] parameters)
        {
            var bufSize = (int)(parameters.Length * 4);
            fixed (float* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.GetnUniformfvEXT(program, location, bufSize, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void GetnUniformfvEXT(this GL.EXTExtension glInstance, ProgramHandle program, int location, int bufSize, ref float parameters)
        {
            fixed (float* parameters_ptr = &parameters) // RefInsteadOfPointerLayer
            {
                glInstance.GetnUniformfvEXT(program, location, bufSize, parameters_ptr);
            }
        }

        // GetnUniformivEXT overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetnUniformivEXT(this GL.EXTExtension glInstance, ProgramHandle program, int location, Span<int> parameters)
        {
            var bufSize = (int)(parameters.Length * 4);
            fixed (int* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.GetnUniformivEXT(program, location, bufSize, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetnUniformivEXT(this GL.EXTExtension glInstance, ProgramHandle program, int location, int[] parameters)
        {
            var bufSize = (int)(parameters.Length * 4);
            fixed (int* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.GetnUniformivEXT(program, location, bufSize, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void GetnUniformivEXT(this GL.EXTExtension glInstance, ProgramHandle program, int location, int bufSize, ref int parameters)
        {
            fixed (int* parameters_ptr = &parameters) // RefInsteadOfPointerLayer
            {
                glInstance.GetnUniformivEXT(program, location, bufSize, parameters_ptr);
            }
        }

        // GenSemaphoresEXT overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GenSemaphoresEXT(this GL.EXTExtension glInstance, Span<uint> semaphores)
        {
            var n = (int)(semaphores.Length);
            fixed (uint* semaphores_ptr = semaphores) // SpanOrArrayLayer
            {
                glInstance.GenSemaphoresEXT(n, semaphores_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GenSemaphoresEXT(this GL.EXTExtension glInstance, uint[] semaphores)
        {
            var n = (int)(semaphores.Length);
            fixed (uint* semaphores_ptr = semaphores) // SpanOrArrayLayer
            {
                glInstance.GenSemaphoresEXT(n, semaphores_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void GenSemaphoresEXT(this GL.EXTExtension glInstance, int n, ref uint semaphores)
        {
            fixed (uint* semaphores_ptr = &semaphores) // RefInsteadOfPointerLayer
            {
                glInstance.GenSemaphoresEXT(n, semaphores_ptr);
            }
        }

        // DeleteSemaphoresEXT overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void DeleteSemaphoresEXT(this GL.EXTExtension glInstance, ReadOnlySpan<uint> semaphores)
        {
            var n = (int)(semaphores.Length);
            fixed (uint* semaphores_ptr = semaphores) // SpanOrArrayLayer
            {
                glInstance.DeleteSemaphoresEXT(n, semaphores_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void DeleteSemaphoresEXT(this GL.EXTExtension glInstance, uint[] semaphores)
        {
            var n = (int)(semaphores.Length);
            fixed (uint* semaphores_ptr = semaphores) // SpanOrArrayLayer
            {
                glInstance.DeleteSemaphoresEXT(n, semaphores_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void DeleteSemaphoresEXT(this GL.EXTExtension glInstance, int n, in uint semaphores)
        {
            fixed (uint* semaphores_ptr = &semaphores) // RefInsteadOfPointerLayer
            {
                glInstance.DeleteSemaphoresEXT(n, semaphores_ptr);
            }
        }

        // SemaphoreParameterui64vEXT overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void SemaphoreParameterui64vEXT(this GL.EXTExtension glInstance, uint semaphore, SemaphoreParameterName pname, in ulong parameters)
        {
            fixed (ulong* parameters_ptr = &parameters) // RefInsteadOfPointerLayer
            {
                glInstance.SemaphoreParameterui64vEXT(semaphore, pname, parameters_ptr);
            }
        }

        // GetSemaphoreParameterui64vEXT overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void GetSemaphoreParameterui64vEXT(this GL.EXTExtension glInstance, uint semaphore, SemaphoreParameterName pname, ref ulong parameters)
        {
            fixed (ulong* parameters_ptr = &parameters) // RefInsteadOfPointerLayer
            {
                glInstance.GetSemaphoreParameterui64vEXT(semaphore, pname, parameters_ptr);
            }
        }

        // WaitSemaphoreEXT overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void WaitSemaphoreEXT(this GL.EXTExtension glInstance, uint semaphore, uint numBufferBarriers, ReadOnlySpan<BufferHandle> buffers, uint numTextureBarriers, ReadOnlySpan<TextureHandle> textures, ReadOnlySpan<TextureLayout> srcLayouts)
        {
            fixed (BufferHandle* buffers_ptr = buffers) // SpanOrArrayLayer
            {
                fixed (TextureHandle* textures_ptr = textures) // SpanOrArrayLayer
                {
                    fixed (TextureLayout* srcLayouts_ptr = srcLayouts) // SpanOrArrayLayer
                    {
                        glInstance.WaitSemaphoreEXT(semaphore, numBufferBarriers, buffers_ptr, numTextureBarriers, textures_ptr, srcLayouts_ptr);
                    }
                }
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void WaitSemaphoreEXT(this GL.EXTExtension glInstance, uint semaphore, uint numBufferBarriers, BufferHandle[] buffers, uint numTextureBarriers, TextureHandle[] textures, TextureLayout[] srcLayouts)
        {
            fixed (BufferHandle* buffers_ptr = buffers) // SpanOrArrayLayer
            {
                fixed (TextureHandle* textures_ptr = textures) // SpanOrArrayLayer
                {
                    fixed (TextureLayout* srcLayouts_ptr = srcLayouts) // SpanOrArrayLayer
                    {
                        glInstance.WaitSemaphoreEXT(semaphore, numBufferBarriers, buffers_ptr, numTextureBarriers, textures_ptr, srcLayouts_ptr);
                    }
                }
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void WaitSemaphoreEXT(this GL.EXTExtension glInstance, uint semaphore, uint numBufferBarriers, in BufferHandle buffers, uint numTextureBarriers, in TextureHandle textures, in TextureLayout srcLayouts)
        {
            fixed (BufferHandle* buffers_ptr = &buffers) // RefInsteadOfPointerLayer
            fixed (TextureHandle* textures_ptr = &textures) // RefInsteadOfPointerLayer
            fixed (TextureLayout* srcLayouts_ptr = &srcLayouts) // RefInsteadOfPointerLayer
            {
                glInstance.WaitSemaphoreEXT(semaphore, numBufferBarriers, buffers_ptr, numTextureBarriers, textures_ptr, srcLayouts_ptr);
            }
        }

        // SignalSemaphoreEXT overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void SignalSemaphoreEXT(this GL.EXTExtension glInstance, uint semaphore, uint numBufferBarriers, ReadOnlySpan<BufferHandle> buffers, uint numTextureBarriers, ReadOnlySpan<TextureHandle> textures, ReadOnlySpan<TextureLayout> dstLayouts)
        {
            fixed (BufferHandle* buffers_ptr = buffers) // SpanOrArrayLayer
            {
                fixed (TextureHandle* textures_ptr = textures) // SpanOrArrayLayer
                {
                    fixed (TextureLayout* dstLayouts_ptr = dstLayouts) // SpanOrArrayLayer
                    {
                        glInstance.SignalSemaphoreEXT(semaphore, numBufferBarriers, buffers_ptr, numTextureBarriers, textures_ptr, dstLayouts_ptr);
                    }
                }
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void SignalSemaphoreEXT(this GL.EXTExtension glInstance, uint semaphore, uint numBufferBarriers, BufferHandle[] buffers, uint numTextureBarriers, TextureHandle[] textures, TextureLayout[] dstLayouts)
        {
            fixed (BufferHandle* buffers_ptr = buffers) // SpanOrArrayLayer
            {
                fixed (TextureHandle* textures_ptr = textures) // SpanOrArrayLayer
                {
                    fixed (TextureLayout* dstLayouts_ptr = dstLayouts) // SpanOrArrayLayer
                    {
                        glInstance.SignalSemaphoreEXT(semaphore, numBufferBarriers, buffers_ptr, numTextureBarriers, textures_ptr, dstLayouts_ptr);
                    }
                }
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void SignalSemaphoreEXT(this GL.EXTExtension glInstance, uint semaphore, uint numBufferBarriers, in BufferHandle buffers, uint numTextureBarriers, in TextureHandle textures, in TextureLayout dstLayouts)
        {
            fixed (BufferHandle* buffers_ptr = &buffers) // RefInsteadOfPointerLayer
            fixed (TextureHandle* textures_ptr = &textures) // RefInsteadOfPointerLayer
            fixed (TextureLayout* dstLayouts_ptr = &dstLayouts) // RefInsteadOfPointerLayer
            {
                glInstance.SignalSemaphoreEXT(semaphore, numBufferBarriers, buffers_ptr, numTextureBarriers, textures_ptr, dstLayouts_ptr);
            }
        }

        // ImportSemaphoreWin32HandleEXT overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.VoidPtrToIntPtrOverloader
        public static unsafe void ImportSemaphoreWin32HandleEXT(this GL.EXTExtension glInstance, uint semaphore, ExternalHandleType handleType, IntPtr handle)
        {
            var handle_vptr = (void*)handle;
            glInstance.ImportSemaphoreWin32HandleEXT(semaphore, handleType, handle_vptr);
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void ImportSemaphoreWin32HandleEXT<T1>(this GL.EXTExtension glInstance, uint semaphore, ExternalHandleType handleType, ref T1 handle)
            where T1 : unmanaged
        {
            fixed (void* handle_ptr = &handle) // RefInsteadOfPointerLayer
            {
                glInstance.ImportSemaphoreWin32HandleEXT(semaphore, handleType, handle_ptr);
            }
        }

        // ImportSemaphoreWin32NameEXT overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.VoidPtrToIntPtrOverloader
        public static unsafe void ImportSemaphoreWin32NameEXT(this GL.EXTExtension glInstance, uint semaphore, ExternalHandleType handleType, IntPtr name)
        {
            var name_vptr = (void*)name;
            glInstance.ImportSemaphoreWin32NameEXT(semaphore, handleType, name_vptr);
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void ImportSemaphoreWin32NameEXT<T1>(this GL.EXTExtension glInstance, uint semaphore, ExternalHandleType handleType, in T1 name)
            where T1 : unmanaged
        {
            fixed (void* name_ptr = &name) // RefInsteadOfPointerLayer
            {
                glInstance.ImportSemaphoreWin32NameEXT(semaphore, handleType, name_ptr);
            }
        }

        // CreateShaderProgramEXT overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.Transformer
        public static unsafe ProgramHandle CreateShaderProgramEXT(this GL.EXTExtension glInstance, ShaderType type, string str)
        {
            ProgramHandle returnValue;
            byte* str_ptr = (byte*)Marshal.StringToCoTaskMemUTF8(str);
            returnValue = glInstance.CreateShaderProgramEXT(type, str_ptr);
            Marshal.FreeCoTaskMem((IntPtr)str_ptr);
            return returnValue;
        }

        // DeleteProgramPipelinesEXT overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void DeleteProgramPipelinesEXT(this GL.EXTExtension glInstance, ReadOnlySpan<ProgramPipelineHandle> pipelines)
        {
            var n = (int)(pipelines.Length);
            fixed (ProgramPipelineHandle* pipelines_ptr = pipelines) // SpanOrArrayLayer
            {
                glInstance.DeleteProgramPipelinesEXT(n, pipelines_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void DeleteProgramPipelinesEXT(this GL.EXTExtension glInstance, ProgramPipelineHandle[] pipelines)
        {
            var n = (int)(pipelines.Length);
            fixed (ProgramPipelineHandle* pipelines_ptr = pipelines) // SpanOrArrayLayer
            {
                glInstance.DeleteProgramPipelinesEXT(n, pipelines_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void DeleteProgramPipelinesEXT(this GL.EXTExtension glInstance, int n, in ProgramPipelineHandle pipelines)
        {
            fixed (ProgramPipelineHandle* pipelines_ptr = &pipelines) // RefInsteadOfPointerLayer
            {
                glInstance.DeleteProgramPipelinesEXT(n, pipelines_ptr);
            }
        }

        // GenProgramPipelinesEXT overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GenProgramPipelinesEXT(this GL.EXTExtension glInstance, Span<ProgramPipelineHandle> pipelines)
        {
            var n = (int)(pipelines.Length);
            fixed (ProgramPipelineHandle* pipelines_ptr = pipelines) // SpanOrArrayLayer
            {
                glInstance.GenProgramPipelinesEXT(n, pipelines_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GenProgramPipelinesEXT(this GL.EXTExtension glInstance, ProgramPipelineHandle[] pipelines)
        {
            var n = (int)(pipelines.Length);
            fixed (ProgramPipelineHandle* pipelines_ptr = pipelines) // SpanOrArrayLayer
            {
                glInstance.GenProgramPipelinesEXT(n, pipelines_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void GenProgramPipelinesEXT(this GL.EXTExtension glInstance, int n, ref ProgramPipelineHandle pipelines)
        {
            fixed (ProgramPipelineHandle* pipelines_ptr = &pipelines) // RefInsteadOfPointerLayer
            {
                glInstance.GenProgramPipelinesEXT(n, pipelines_ptr);
            }
        }

        // GetProgramPipelineInfoLogEXT overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.OutToReturnOverloader
        public static unsafe string GetProgramPipelineInfoLogEXT(this GL.EXTExtension glInstance, ProgramPipelineHandle pipeline, int bufSize, Span<int> length)
        {
            string infoLog;
            fixed (int* length_ptr = length) // SpanOrArrayLayer
            {
                var infoLog_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                glInstance.GetProgramPipelineInfoLogEXT(pipeline, bufSize, length_ptr, infoLog_ptr);
                infoLog = Marshal.PtrToStringUTF8((IntPtr)infoLog_ptr)!;
                Marshal.FreeCoTaskMem((IntPtr)infoLog_ptr);
            }
            return infoLog;
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetProgramPipelineInfoLogEXT(this GL.EXTExtension glInstance, ProgramPipelineHandle pipeline, int bufSize, Span<int> length, out string infoLog)
        {
            fixed (int* length_ptr = length) // SpanOrArrayLayer
            {
                var infoLog_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                glInstance.GetProgramPipelineInfoLogEXT(pipeline, bufSize, length_ptr, infoLog_ptr);
                infoLog = Marshal.PtrToStringUTF8((IntPtr)infoLog_ptr)!;
                Marshal.FreeCoTaskMem((IntPtr)infoLog_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.OutToReturnOverloader
        public static unsafe string GetProgramPipelineInfoLogEXT(this GL.EXTExtension glInstance, ProgramPipelineHandle pipeline, int bufSize, int[] length)
        {
            string infoLog;
            fixed (int* length_ptr = length) // SpanOrArrayLayer
            {
                var infoLog_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                glInstance.GetProgramPipelineInfoLogEXT(pipeline, bufSize, length_ptr, infoLog_ptr);
                infoLog = Marshal.PtrToStringUTF8((IntPtr)infoLog_ptr)!;
                Marshal.FreeCoTaskMem((IntPtr)infoLog_ptr);
            }
            return infoLog;
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetProgramPipelineInfoLogEXT(this GL.EXTExtension glInstance, ProgramPipelineHandle pipeline, int bufSize, int[] length, out string infoLog)
        {
            fixed (int* length_ptr = length) // SpanOrArrayLayer
            {
                var infoLog_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                glInstance.GetProgramPipelineInfoLogEXT(pipeline, bufSize, length_ptr, infoLog_ptr);
                infoLog = Marshal.PtrToStringUTF8((IntPtr)infoLog_ptr)!;
                Marshal.FreeCoTaskMem((IntPtr)infoLog_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.OutToReturnOverloader
        public static unsafe string GetProgramPipelineInfoLogEXT(this GL.EXTExtension glInstance, ProgramPipelineHandle pipeline, int bufSize, ref int length)
        {
            string infoLog;
            fixed (int* length_ptr = &length) // RefInsteadOfPointerLayer
            {
                var infoLog_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                glInstance.GetProgramPipelineInfoLogEXT(pipeline, bufSize, length_ptr, infoLog_ptr);
                infoLog = Marshal.PtrToStringUTF8((IntPtr)infoLog_ptr)!;
                Marshal.FreeCoTaskMem((IntPtr)infoLog_ptr);
            }
            return infoLog;
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void GetProgramPipelineInfoLogEXT(this GL.EXTExtension glInstance, ProgramPipelineHandle pipeline, int bufSize, ref int length, out string infoLog)
        {
            fixed (int* length_ptr = &length) // RefInsteadOfPointerLayer
            {
                var infoLog_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                glInstance.GetProgramPipelineInfoLogEXT(pipeline, bufSize, length_ptr, infoLog_ptr);
                infoLog = Marshal.PtrToStringUTF8((IntPtr)infoLog_ptr)!;
                Marshal.FreeCoTaskMem((IntPtr)infoLog_ptr);
            }
        }

        // GetProgramPipelineivEXT overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void GetProgramPipelineivEXT(this GL.EXTExtension glInstance, ProgramPipelineHandle pipeline, PipelineParameterName pname, ref int parameters)
        {
            fixed (int* parameters_ptr = &parameters) // RefInsteadOfPointerLayer
            {
                glInstance.GetProgramPipelineivEXT(pipeline, pname, parameters_ptr);
            }
        }

        // ProgramUniform1fvEXT overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void ProgramUniform1fvEXT(this GL.EXTExtension glInstance, ProgramHandle program, int location, ReadOnlySpan<float> value)
        {
            var count = (int)(value.Length);
            fixed (float* value_ptr = value) // SpanOrArrayLayer
            {
                glInstance.ProgramUniform1fvEXT(program, location, count, value_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void ProgramUniform1fvEXT(this GL.EXTExtension glInstance, ProgramHandle program, int location, float[] value)
        {
            var count = (int)(value.Length);
            fixed (float* value_ptr = value) // SpanOrArrayLayer
            {
                glInstance.ProgramUniform1fvEXT(program, location, count, value_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void ProgramUniform1fvEXT(this GL.EXTExtension glInstance, ProgramHandle program, int location, int count, in float value)
        {
            fixed (float* value_ptr = &value) // RefInsteadOfPointerLayer
            {
                glInstance.ProgramUniform1fvEXT(program, location, count, value_ptr);
            }
        }

        // ProgramUniform1ivEXT overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void ProgramUniform1ivEXT(this GL.EXTExtension glInstance, ProgramHandle program, int location, ReadOnlySpan<int> value)
        {
            var count = (int)(value.Length);
            fixed (int* value_ptr = value) // SpanOrArrayLayer
            {
                glInstance.ProgramUniform1ivEXT(program, location, count, value_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void ProgramUniform1ivEXT(this GL.EXTExtension glInstance, ProgramHandle program, int location, int[] value)
        {
            var count = (int)(value.Length);
            fixed (int* value_ptr = value) // SpanOrArrayLayer
            {
                glInstance.ProgramUniform1ivEXT(program, location, count, value_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void ProgramUniform1ivEXT(this GL.EXTExtension glInstance, ProgramHandle program, int location, int count, in int value)
        {
            fixed (int* value_ptr = &value) // RefInsteadOfPointerLayer
            {
                glInstance.ProgramUniform1ivEXT(program, location, count, value_ptr);
            }
        }

        // ProgramUniform2fvEXT overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void ProgramUniform2fvEXT(this GL.EXTExtension glInstance, ProgramHandle program, int location, ReadOnlySpan<float> value)
        {
            var count = (int)(value.Length / 2);
            fixed (float* value_ptr = value) // SpanOrArrayLayer
            {
                glInstance.ProgramUniform2fvEXT(program, location, count, value_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void ProgramUniform2fvEXT(this GL.EXTExtension glInstance, ProgramHandle program, int location, float[] value)
        {
            var count = (int)(value.Length / 2);
            fixed (float* value_ptr = value) // SpanOrArrayLayer
            {
                glInstance.ProgramUniform2fvEXT(program, location, count, value_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void ProgramUniform2fvEXT(this GL.EXTExtension glInstance, ProgramHandle program, int location, int count, in float value)
        {
            fixed (float* value_ptr = &value) // RefInsteadOfPointerLayer
            {
                glInstance.ProgramUniform2fvEXT(program, location, count, value_ptr);
            }
        }

        // ProgramUniform2ivEXT overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void ProgramUniform2ivEXT(this GL.EXTExtension glInstance, ProgramHandle program, int location, ReadOnlySpan<int> value)
        {
            var count = (int)(value.Length / 2);
            fixed (int* value_ptr = value) // SpanOrArrayLayer
            {
                glInstance.ProgramUniform2ivEXT(program, location, count, value_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void ProgramUniform2ivEXT(this GL.EXTExtension glInstance, ProgramHandle program, int location, int[] value)
        {
            var count = (int)(value.Length / 2);
            fixed (int* value_ptr = value) // SpanOrArrayLayer
            {
                glInstance.ProgramUniform2ivEXT(program, location, count, value_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void ProgramUniform2ivEXT(this GL.EXTExtension glInstance, ProgramHandle program, int location, int count, in int value)
        {
            fixed (int* value_ptr = &value) // RefInsteadOfPointerLayer
            {
                glInstance.ProgramUniform2ivEXT(program, location, count, value_ptr);
            }
        }

        // ProgramUniform3fvEXT overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void ProgramUniform3fvEXT(this GL.EXTExtension glInstance, ProgramHandle program, int location, ReadOnlySpan<float> value)
        {
            var count = (int)(value.Length / 3);
            fixed (float* value_ptr = value) // SpanOrArrayLayer
            {
                glInstance.ProgramUniform3fvEXT(program, location, count, value_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void ProgramUniform3fvEXT(this GL.EXTExtension glInstance, ProgramHandle program, int location, float[] value)
        {
            var count = (int)(value.Length / 3);
            fixed (float* value_ptr = value) // SpanOrArrayLayer
            {
                glInstance.ProgramUniform3fvEXT(program, location, count, value_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void ProgramUniform3fvEXT(this GL.EXTExtension glInstance, ProgramHandle program, int location, int count, in float value)
        {
            fixed (float* value_ptr = &value) // RefInsteadOfPointerLayer
            {
                glInstance.ProgramUniform3fvEXT(program, location, count, value_ptr);
            }
        }

        // ProgramUniform3ivEXT overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void ProgramUniform3ivEXT(this GL.EXTExtension glInstance, ProgramHandle program, int location, ReadOnlySpan<int> value)
        {
            var count = (int)(value.Length / 3);
            fixed (int* value_ptr = value) // SpanOrArrayLayer
            {
                glInstance.ProgramUniform3ivEXT(program, location, count, value_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void ProgramUniform3ivEXT(this GL.EXTExtension glInstance, ProgramHandle program, int location, int[] value)
        {
            var count = (int)(value.Length / 3);
            fixed (int* value_ptr = value) // SpanOrArrayLayer
            {
                glInstance.ProgramUniform3ivEXT(program, location, count, value_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void ProgramUniform3ivEXT(this GL.EXTExtension glInstance, ProgramHandle program, int location, int count, in int value)
        {
            fixed (int* value_ptr = &value) // RefInsteadOfPointerLayer
            {
                glInstance.ProgramUniform3ivEXT(program, location, count, value_ptr);
            }
        }

        // ProgramUniform4fvEXT overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void ProgramUniform4fvEXT(this GL.EXTExtension glInstance, ProgramHandle program, int location, ReadOnlySpan<float> value)
        {
            var count = (int)(value.Length / 4);
            fixed (float* value_ptr = value) // SpanOrArrayLayer
            {
                glInstance.ProgramUniform4fvEXT(program, location, count, value_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void ProgramUniform4fvEXT(this GL.EXTExtension glInstance, ProgramHandle program, int location, float[] value)
        {
            var count = (int)(value.Length / 4);
            fixed (float* value_ptr = value) // SpanOrArrayLayer
            {
                glInstance.ProgramUniform4fvEXT(program, location, count, value_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void ProgramUniform4fvEXT(this GL.EXTExtension glInstance, ProgramHandle program, int location, int count, in float value)
        {
            fixed (float* value_ptr = &value) // RefInsteadOfPointerLayer
            {
                glInstance.ProgramUniform4fvEXT(program, location, count, value_ptr);
            }
        }

        // ProgramUniform4ivEXT overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void ProgramUniform4ivEXT(this GL.EXTExtension glInstance, ProgramHandle program, int location, ReadOnlySpan<int> value)
        {
            var count = (int)(value.Length / 4);
            fixed (int* value_ptr = value) // SpanOrArrayLayer
            {
                glInstance.ProgramUniform4ivEXT(program, location, count, value_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void ProgramUniform4ivEXT(this GL.EXTExtension glInstance, ProgramHandle program, int location, int[] value)
        {
            var count = (int)(value.Length / 4);
            fixed (int* value_ptr = value) // SpanOrArrayLayer
            {
                glInstance.ProgramUniform4ivEXT(program, location, count, value_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void ProgramUniform4ivEXT(this GL.EXTExtension glInstance, ProgramHandle program, int location, int count, in int value)
        {
            fixed (int* value_ptr = &value) // RefInsteadOfPointerLayer
            {
                glInstance.ProgramUniform4ivEXT(program, location, count, value_ptr);
            }
        }

        // ProgramUniformMatrix2fvEXT overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void ProgramUniformMatrix2fvEXT(this GL.EXTExtension glInstance, ProgramHandle program, int location, bool transpose, ReadOnlySpan<float> value)
        {
            var count = (int)(value.Length / 4);
            fixed (float* value_ptr = value) // SpanOrArrayLayer
            {
                var transpose_byte = (byte)(transpose ? 1 : 0);
                glInstance.ProgramUniformMatrix2fvEXT(program, location, count, transpose_byte, value_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void ProgramUniformMatrix2fvEXT(this GL.EXTExtension glInstance, ProgramHandle program, int location, bool transpose, float[] value)
        {
            var count = (int)(value.Length / 4);
            fixed (float* value_ptr = value) // SpanOrArrayLayer
            {
                var transpose_byte = (byte)(transpose ? 1 : 0);
                glInstance.ProgramUniformMatrix2fvEXT(program, location, count, transpose_byte, value_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void ProgramUniformMatrix2fvEXT(this GL.EXTExtension glInstance, ProgramHandle program, int location, int count, bool transpose, in float value)
        {
            fixed (float* value_ptr = &value) // RefInsteadOfPointerLayer
            {
                var transpose_byte = (byte)(transpose ? 1 : 0);
                glInstance.ProgramUniformMatrix2fvEXT(program, location, count, transpose_byte, value_ptr);
            }
        }

        // ProgramUniformMatrix3fvEXT overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void ProgramUniformMatrix3fvEXT(this GL.EXTExtension glInstance, ProgramHandle program, int location, bool transpose, ReadOnlySpan<float> value)
        {
            var count = (int)(value.Length / 9);
            fixed (float* value_ptr = value) // SpanOrArrayLayer
            {
                var transpose_byte = (byte)(transpose ? 1 : 0);
                glInstance.ProgramUniformMatrix3fvEXT(program, location, count, transpose_byte, value_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void ProgramUniformMatrix3fvEXT(this GL.EXTExtension glInstance, ProgramHandle program, int location, bool transpose, float[] value)
        {
            var count = (int)(value.Length / 9);
            fixed (float* value_ptr = value) // SpanOrArrayLayer
            {
                var transpose_byte = (byte)(transpose ? 1 : 0);
                glInstance.ProgramUniformMatrix3fvEXT(program, location, count, transpose_byte, value_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void ProgramUniformMatrix3fvEXT(this GL.EXTExtension glInstance, ProgramHandle program, int location, int count, bool transpose, in float value)
        {
            fixed (float* value_ptr = &value) // RefInsteadOfPointerLayer
            {
                var transpose_byte = (byte)(transpose ? 1 : 0);
                glInstance.ProgramUniformMatrix3fvEXT(program, location, count, transpose_byte, value_ptr);
            }
        }

        // ProgramUniformMatrix4fvEXT overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void ProgramUniformMatrix4fvEXT(this GL.EXTExtension glInstance, ProgramHandle program, int location, bool transpose, ReadOnlySpan<float> value)
        {
            var count = (int)(value.Length / 16);
            fixed (float* value_ptr = value) // SpanOrArrayLayer
            {
                var transpose_byte = (byte)(transpose ? 1 : 0);
                glInstance.ProgramUniformMatrix4fvEXT(program, location, count, transpose_byte, value_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void ProgramUniformMatrix4fvEXT(this GL.EXTExtension glInstance, ProgramHandle program, int location, bool transpose, float[] value)
        {
            var count = (int)(value.Length / 16);
            fixed (float* value_ptr = value) // SpanOrArrayLayer
            {
                var transpose_byte = (byte)(transpose ? 1 : 0);
                glInstance.ProgramUniformMatrix4fvEXT(program, location, count, transpose_byte, value_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void ProgramUniformMatrix4fvEXT(this GL.EXTExtension glInstance, ProgramHandle program, int location, int count, bool transpose, in float value)
        {
            fixed (float* value_ptr = &value) // RefInsteadOfPointerLayer
            {
                var transpose_byte = (byte)(transpose ? 1 : 0);
                glInstance.ProgramUniformMatrix4fvEXT(program, location, count, transpose_byte, value_ptr);
            }
        }

        // ProgramUniform1uivEXT overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void ProgramUniform1uivEXT(this GL.EXTExtension glInstance, ProgramHandle program, int location, ReadOnlySpan<uint> value)
        {
            var count = (int)(value.Length);
            fixed (uint* value_ptr = value) // SpanOrArrayLayer
            {
                glInstance.ProgramUniform1uivEXT(program, location, count, value_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void ProgramUniform1uivEXT(this GL.EXTExtension glInstance, ProgramHandle program, int location, uint[] value)
        {
            var count = (int)(value.Length);
            fixed (uint* value_ptr = value) // SpanOrArrayLayer
            {
                glInstance.ProgramUniform1uivEXT(program, location, count, value_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void ProgramUniform1uivEXT(this GL.EXTExtension glInstance, ProgramHandle program, int location, int count, in uint value)
        {
            fixed (uint* value_ptr = &value) // RefInsteadOfPointerLayer
            {
                glInstance.ProgramUniform1uivEXT(program, location, count, value_ptr);
            }
        }

        // ProgramUniform2uivEXT overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void ProgramUniform2uivEXT(this GL.EXTExtension glInstance, ProgramHandle program, int location, ReadOnlySpan<uint> value)
        {
            var count = (int)(value.Length / 2);
            fixed (uint* value_ptr = value) // SpanOrArrayLayer
            {
                glInstance.ProgramUniform2uivEXT(program, location, count, value_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void ProgramUniform2uivEXT(this GL.EXTExtension glInstance, ProgramHandle program, int location, uint[] value)
        {
            var count = (int)(value.Length / 2);
            fixed (uint* value_ptr = value) // SpanOrArrayLayer
            {
                glInstance.ProgramUniform2uivEXT(program, location, count, value_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void ProgramUniform2uivEXT(this GL.EXTExtension glInstance, ProgramHandle program, int location, int count, in uint value)
        {
            fixed (uint* value_ptr = &value) // RefInsteadOfPointerLayer
            {
                glInstance.ProgramUniform2uivEXT(program, location, count, value_ptr);
            }
        }

        // ProgramUniform3uivEXT overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void ProgramUniform3uivEXT(this GL.EXTExtension glInstance, ProgramHandle program, int location, ReadOnlySpan<uint> value)
        {
            var count = (int)(value.Length / 3);
            fixed (uint* value_ptr = value) // SpanOrArrayLayer
            {
                glInstance.ProgramUniform3uivEXT(program, location, count, value_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void ProgramUniform3uivEXT(this GL.EXTExtension glInstance, ProgramHandle program, int location, uint[] value)
        {
            var count = (int)(value.Length / 3);
            fixed (uint* value_ptr = value) // SpanOrArrayLayer
            {
                glInstance.ProgramUniform3uivEXT(program, location, count, value_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void ProgramUniform3uivEXT(this GL.EXTExtension glInstance, ProgramHandle program, int location, int count, in uint value)
        {
            fixed (uint* value_ptr = &value) // RefInsteadOfPointerLayer
            {
                glInstance.ProgramUniform3uivEXT(program, location, count, value_ptr);
            }
        }

        // ProgramUniform4uivEXT overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void ProgramUniform4uivEXT(this GL.EXTExtension glInstance, ProgramHandle program, int location, ReadOnlySpan<uint> value)
        {
            var count = (int)(value.Length / 4);
            fixed (uint* value_ptr = value) // SpanOrArrayLayer
            {
                glInstance.ProgramUniform4uivEXT(program, location, count, value_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void ProgramUniform4uivEXT(this GL.EXTExtension glInstance, ProgramHandle program, int location, uint[] value)
        {
            var count = (int)(value.Length / 4);
            fixed (uint* value_ptr = value) // SpanOrArrayLayer
            {
                glInstance.ProgramUniform4uivEXT(program, location, count, value_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void ProgramUniform4uivEXT(this GL.EXTExtension glInstance, ProgramHandle program, int location, int count, in uint value)
        {
            fixed (uint* value_ptr = &value) // RefInsteadOfPointerLayer
            {
                glInstance.ProgramUniform4uivEXT(program, location, count, value_ptr);
            }
        }

        // ProgramUniformMatrix2x3fvEXT overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void ProgramUniformMatrix2x3fvEXT(this GL.EXTExtension glInstance, ProgramHandle program, int location, bool transpose, ReadOnlySpan<float> value)
        {
            var count = (int)(value.Length / 6);
            fixed (float* value_ptr = value) // SpanOrArrayLayer
            {
                var transpose_byte = (byte)(transpose ? 1 : 0);
                glInstance.ProgramUniformMatrix2x3fvEXT(program, location, count, transpose_byte, value_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void ProgramUniformMatrix2x3fvEXT(this GL.EXTExtension glInstance, ProgramHandle program, int location, bool transpose, float[] value)
        {
            var count = (int)(value.Length / 6);
            fixed (float* value_ptr = value) // SpanOrArrayLayer
            {
                var transpose_byte = (byte)(transpose ? 1 : 0);
                glInstance.ProgramUniformMatrix2x3fvEXT(program, location, count, transpose_byte, value_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void ProgramUniformMatrix2x3fvEXT(this GL.EXTExtension glInstance, ProgramHandle program, int location, int count, bool transpose, in float value)
        {
            fixed (float* value_ptr = &value) // RefInsteadOfPointerLayer
            {
                var transpose_byte = (byte)(transpose ? 1 : 0);
                glInstance.ProgramUniformMatrix2x3fvEXT(program, location, count, transpose_byte, value_ptr);
            }
        }

        // ProgramUniformMatrix3x2fvEXT overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void ProgramUniformMatrix3x2fvEXT(this GL.EXTExtension glInstance, ProgramHandle program, int location, bool transpose, ReadOnlySpan<float> value)
        {
            var count = (int)(value.Length / 6);
            fixed (float* value_ptr = value) // SpanOrArrayLayer
            {
                var transpose_byte = (byte)(transpose ? 1 : 0);
                glInstance.ProgramUniformMatrix3x2fvEXT(program, location, count, transpose_byte, value_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void ProgramUniformMatrix3x2fvEXT(this GL.EXTExtension glInstance, ProgramHandle program, int location, bool transpose, float[] value)
        {
            var count = (int)(value.Length / 6);
            fixed (float* value_ptr = value) // SpanOrArrayLayer
            {
                var transpose_byte = (byte)(transpose ? 1 : 0);
                glInstance.ProgramUniformMatrix3x2fvEXT(program, location, count, transpose_byte, value_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void ProgramUniformMatrix3x2fvEXT(this GL.EXTExtension glInstance, ProgramHandle program, int location, int count, bool transpose, in float value)
        {
            fixed (float* value_ptr = &value) // RefInsteadOfPointerLayer
            {
                var transpose_byte = (byte)(transpose ? 1 : 0);
                glInstance.ProgramUniformMatrix3x2fvEXT(program, location, count, transpose_byte, value_ptr);
            }
        }

        // ProgramUniformMatrix2x4fvEXT overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void ProgramUniformMatrix2x4fvEXT(this GL.EXTExtension glInstance, ProgramHandle program, int location, bool transpose, ReadOnlySpan<float> value)
        {
            var count = (int)(value.Length / 8);
            fixed (float* value_ptr = value) // SpanOrArrayLayer
            {
                var transpose_byte = (byte)(transpose ? 1 : 0);
                glInstance.ProgramUniformMatrix2x4fvEXT(program, location, count, transpose_byte, value_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void ProgramUniformMatrix2x4fvEXT(this GL.EXTExtension glInstance, ProgramHandle program, int location, bool transpose, float[] value)
        {
            var count = (int)(value.Length / 8);
            fixed (float* value_ptr = value) // SpanOrArrayLayer
            {
                var transpose_byte = (byte)(transpose ? 1 : 0);
                glInstance.ProgramUniformMatrix2x4fvEXT(program, location, count, transpose_byte, value_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void ProgramUniformMatrix2x4fvEXT(this GL.EXTExtension glInstance, ProgramHandle program, int location, int count, bool transpose, in float value)
        {
            fixed (float* value_ptr = &value) // RefInsteadOfPointerLayer
            {
                var transpose_byte = (byte)(transpose ? 1 : 0);
                glInstance.ProgramUniformMatrix2x4fvEXT(program, location, count, transpose_byte, value_ptr);
            }
        }

        // ProgramUniformMatrix4x2fvEXT overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void ProgramUniformMatrix4x2fvEXT(this GL.EXTExtension glInstance, ProgramHandle program, int location, bool transpose, ReadOnlySpan<float> value)
        {
            var count = (int)(value.Length / 8);
            fixed (float* value_ptr = value) // SpanOrArrayLayer
            {
                var transpose_byte = (byte)(transpose ? 1 : 0);
                glInstance.ProgramUniformMatrix4x2fvEXT(program, location, count, transpose_byte, value_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void ProgramUniformMatrix4x2fvEXT(this GL.EXTExtension glInstance, ProgramHandle program, int location, bool transpose, float[] value)
        {
            var count = (int)(value.Length / 8);
            fixed (float* value_ptr = value) // SpanOrArrayLayer
            {
                var transpose_byte = (byte)(transpose ? 1 : 0);
                glInstance.ProgramUniformMatrix4x2fvEXT(program, location, count, transpose_byte, value_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void ProgramUniformMatrix4x2fvEXT(this GL.EXTExtension glInstance, ProgramHandle program, int location, int count, bool transpose, in float value)
        {
            fixed (float* value_ptr = &value) // RefInsteadOfPointerLayer
            {
                var transpose_byte = (byte)(transpose ? 1 : 0);
                glInstance.ProgramUniformMatrix4x2fvEXT(program, location, count, transpose_byte, value_ptr);
            }
        }

        // ProgramUniformMatrix3x4fvEXT overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void ProgramUniformMatrix3x4fvEXT(this GL.EXTExtension glInstance, ProgramHandle program, int location, bool transpose, ReadOnlySpan<float> value)
        {
            var count = (int)(value.Length / 12);
            fixed (float* value_ptr = value) // SpanOrArrayLayer
            {
                var transpose_byte = (byte)(transpose ? 1 : 0);
                glInstance.ProgramUniformMatrix3x4fvEXT(program, location, count, transpose_byte, value_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void ProgramUniformMatrix3x4fvEXT(this GL.EXTExtension glInstance, ProgramHandle program, int location, bool transpose, float[] value)
        {
            var count = (int)(value.Length / 12);
            fixed (float* value_ptr = value) // SpanOrArrayLayer
            {
                var transpose_byte = (byte)(transpose ? 1 : 0);
                glInstance.ProgramUniformMatrix3x4fvEXT(program, location, count, transpose_byte, value_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void ProgramUniformMatrix3x4fvEXT(this GL.EXTExtension glInstance, ProgramHandle program, int location, int count, bool transpose, in float value)
        {
            fixed (float* value_ptr = &value) // RefInsteadOfPointerLayer
            {
                var transpose_byte = (byte)(transpose ? 1 : 0);
                glInstance.ProgramUniformMatrix3x4fvEXT(program, location, count, transpose_byte, value_ptr);
            }
        }

        // ProgramUniformMatrix4x3fvEXT overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void ProgramUniformMatrix4x3fvEXT(this GL.EXTExtension glInstance, ProgramHandle program, int location, bool transpose, ReadOnlySpan<float> value)
        {
            var count = (int)(value.Length / 12);
            fixed (float* value_ptr = value) // SpanOrArrayLayer
            {
                var transpose_byte = (byte)(transpose ? 1 : 0);
                glInstance.ProgramUniformMatrix4x3fvEXT(program, location, count, transpose_byte, value_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void ProgramUniformMatrix4x3fvEXT(this GL.EXTExtension glInstance, ProgramHandle program, int location, bool transpose, float[] value)
        {
            var count = (int)(value.Length / 12);
            fixed (float* value_ptr = value) // SpanOrArrayLayer
            {
                var transpose_byte = (byte)(transpose ? 1 : 0);
                glInstance.ProgramUniformMatrix4x3fvEXT(program, location, count, transpose_byte, value_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void ProgramUniformMatrix4x3fvEXT(this GL.EXTExtension glInstance, ProgramHandle program, int location, int count, bool transpose, in float value)
        {
            fixed (float* value_ptr = &value) // RefInsteadOfPointerLayer
            {
                var transpose_byte = (byte)(transpose ? 1 : 0);
                glInstance.ProgramUniformMatrix4x3fvEXT(program, location, count, transpose_byte, value_ptr);
            }
        }

        // ClearPixelLocalStorageuiEXT overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void ClearPixelLocalStorageuiEXT(this GL.EXTExtension glInstance, int offset, ReadOnlySpan<uint> values)
        {
            var n = (int)(values.Length);
            fixed (uint* values_ptr = values) // SpanOrArrayLayer
            {
                glInstance.ClearPixelLocalStorageuiEXT(offset, n, values_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void ClearPixelLocalStorageuiEXT(this GL.EXTExtension glInstance, int offset, uint[] values)
        {
            var n = (int)(values.Length);
            fixed (uint* values_ptr = values) // SpanOrArrayLayer
            {
                glInstance.ClearPixelLocalStorageuiEXT(offset, n, values_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void ClearPixelLocalStorageuiEXT(this GL.EXTExtension glInstance, int offset, int n, in uint values)
        {
            fixed (uint* values_ptr = &values) // RefInsteadOfPointerLayer
            {
                glInstance.ClearPixelLocalStorageuiEXT(offset, n, values_ptr);
            }
        }

        // TexPageCommitmentEXT overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.BoolOverloader
        public static unsafe void TexPageCommitmentEXT(this GL.EXTExtension glInstance, GLEnum target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, bool commit)
        {
            var commit_byte = (byte)(commit ? 1 : 0);
            glInstance.TexPageCommitmentEXT(target, level, xoffset, yoffset, zoffset, width, height, depth, commit_byte);
        }

        // TexParameterIivEXT overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void TexParameterIivEXT(this GL.EXTExtension glInstance, TextureTarget target, TextureParameterName pname, ReadOnlySpan<int> parameters)
        {
            fixed (int* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.TexParameterIivEXT(target, pname, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void TexParameterIivEXT(this GL.EXTExtension glInstance, TextureTarget target, TextureParameterName pname, int[] parameters)
        {
            fixed (int* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.TexParameterIivEXT(target, pname, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void TexParameterIivEXT(this GL.EXTExtension glInstance, TextureTarget target, TextureParameterName pname, in int parameters)
        {
            fixed (int* parameters_ptr = &parameters) // RefInsteadOfPointerLayer
            {
                glInstance.TexParameterIivEXT(target, pname, parameters_ptr);
            }
        }

        // TexParameterIuivEXT overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void TexParameterIuivEXT(this GL.EXTExtension glInstance, TextureTarget target, TextureParameterName pname, ReadOnlySpan<uint> parameters)
        {
            fixed (uint* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.TexParameterIuivEXT(target, pname, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void TexParameterIuivEXT(this GL.EXTExtension glInstance, TextureTarget target, TextureParameterName pname, uint[] parameters)
        {
            fixed (uint* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.TexParameterIuivEXT(target, pname, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void TexParameterIuivEXT(this GL.EXTExtension glInstance, TextureTarget target, TextureParameterName pname, in uint parameters)
        {
            fixed (uint* parameters_ptr = &parameters) // RefInsteadOfPointerLayer
            {
                glInstance.TexParameterIuivEXT(target, pname, parameters_ptr);
            }
        }

        // GetTexParameterIivEXT overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetTexParameterIivEXT(this GL.EXTExtension glInstance, TextureTarget target, GetTextureParameter pname, Span<int> parameters)
        {
            fixed (int* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.GetTexParameterIivEXT(target, pname, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetTexParameterIivEXT(this GL.EXTExtension glInstance, TextureTarget target, GetTextureParameter pname, int[] parameters)
        {
            fixed (int* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.GetTexParameterIivEXT(target, pname, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void GetTexParameterIivEXT(this GL.EXTExtension glInstance, TextureTarget target, GetTextureParameter pname, ref int parameters)
        {
            fixed (int* parameters_ptr = &parameters) // RefInsteadOfPointerLayer
            {
                glInstance.GetTexParameterIivEXT(target, pname, parameters_ptr);
            }
        }

        // GetTexParameterIuivEXT overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetTexParameterIuivEXT(this GL.EXTExtension glInstance, TextureTarget target, GetTextureParameter pname, Span<uint> parameters)
        {
            fixed (uint* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.GetTexParameterIuivEXT(target, pname, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetTexParameterIuivEXT(this GL.EXTExtension glInstance, TextureTarget target, GetTextureParameter pname, uint[] parameters)
        {
            fixed (uint* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.GetTexParameterIuivEXT(target, pname, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void GetTexParameterIuivEXT(this GL.EXTExtension glInstance, TextureTarget target, GetTextureParameter pname, ref uint parameters)
        {
            fixed (uint* parameters_ptr = &parameters) // RefInsteadOfPointerLayer
            {
                glInstance.GetTexParameterIuivEXT(target, pname, parameters_ptr);
            }
        }

        // SamplerParameterIivEXT overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void SamplerParameterIivEXT(this GL.EXTExtension glInstance, SamplerHandle sampler, SamplerParameterI pname, ReadOnlySpan<int> param)
        {
            fixed (int* param_ptr = param) // SpanOrArrayLayer
            {
                glInstance.SamplerParameterIivEXT(sampler, pname, param_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void SamplerParameterIivEXT(this GL.EXTExtension glInstance, SamplerHandle sampler, SamplerParameterI pname, int[] param)
        {
            fixed (int* param_ptr = param) // SpanOrArrayLayer
            {
                glInstance.SamplerParameterIivEXT(sampler, pname, param_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void SamplerParameterIivEXT(this GL.EXTExtension glInstance, SamplerHandle sampler, SamplerParameterI pname, in int param)
        {
            fixed (int* param_ptr = &param) // RefInsteadOfPointerLayer
            {
                glInstance.SamplerParameterIivEXT(sampler, pname, param_ptr);
            }
        }

        // SamplerParameterIuivEXT overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void SamplerParameterIuivEXT(this GL.EXTExtension glInstance, SamplerHandle sampler, SamplerParameterI pname, ReadOnlySpan<uint> param)
        {
            fixed (uint* param_ptr = param) // SpanOrArrayLayer
            {
                glInstance.SamplerParameterIuivEXT(sampler, pname, param_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void SamplerParameterIuivEXT(this GL.EXTExtension glInstance, SamplerHandle sampler, SamplerParameterI pname, uint[] param)
        {
            fixed (uint* param_ptr = param) // SpanOrArrayLayer
            {
                glInstance.SamplerParameterIuivEXT(sampler, pname, param_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void SamplerParameterIuivEXT(this GL.EXTExtension glInstance, SamplerHandle sampler, SamplerParameterI pname, in uint param)
        {
            fixed (uint* param_ptr = &param) // RefInsteadOfPointerLayer
            {
                glInstance.SamplerParameterIuivEXT(sampler, pname, param_ptr);
            }
        }

        // GetSamplerParameterIivEXT overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetSamplerParameterIivEXT(this GL.EXTExtension glInstance, SamplerHandle sampler, SamplerParameterI pname, Span<int> parameters)
        {
            fixed (int* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.GetSamplerParameterIivEXT(sampler, pname, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetSamplerParameterIivEXT(this GL.EXTExtension glInstance, SamplerHandle sampler, SamplerParameterI pname, int[] parameters)
        {
            fixed (int* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.GetSamplerParameterIivEXT(sampler, pname, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void GetSamplerParameterIivEXT(this GL.EXTExtension glInstance, SamplerHandle sampler, SamplerParameterI pname, ref int parameters)
        {
            fixed (int* parameters_ptr = &parameters) // RefInsteadOfPointerLayer
            {
                glInstance.GetSamplerParameterIivEXT(sampler, pname, parameters_ptr);
            }
        }

        // GetSamplerParameterIuivEXT overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetSamplerParameterIuivEXT(this GL.EXTExtension glInstance, SamplerHandle sampler, SamplerParameterI pname, Span<uint> parameters)
        {
            fixed (uint* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.GetSamplerParameterIuivEXT(sampler, pname, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void GetSamplerParameterIuivEXT(this GL.EXTExtension glInstance, SamplerHandle sampler, SamplerParameterI pname, uint[] parameters)
        {
            fixed (uint* parameters_ptr = parameters) // SpanOrArrayLayer
            {
                glInstance.GetSamplerParameterIuivEXT(sampler, pname, parameters_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void GetSamplerParameterIuivEXT(this GL.EXTExtension glInstance, SamplerHandle sampler, SamplerParameterI pname, ref uint parameters)
        {
            fixed (uint* parameters_ptr = &parameters) // RefInsteadOfPointerLayer
            {
                glInstance.GetSamplerParameterIuivEXT(sampler, pname, parameters_ptr);
            }
        }

        // WindowRectanglesEXT overloads

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void WindowRectanglesEXT(this GL.EXTExtension glInstance, GLEnum mode, int count, ReadOnlySpan<int> box)
        {
            fixed (int* box_ptr = box) // SpanOrArrayLayer
            {
                glInstance.WindowRectanglesEXT(mode, count, box_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.SpanAndArrayOverloader
        public static unsafe void WindowRectanglesEXT(this GL.EXTExtension glInstance, GLEnum mode, int count, int[] box)
        {
            fixed (int* box_ptr = box) // SpanOrArrayLayer
            {
                glInstance.WindowRectanglesEXT(mode, count, box_ptr);
            }
        }

        // Generated by Gwi.OpenGL.BindingGenerator.Parsing.RefInsteadOfPointerOverloader
        public static unsafe void WindowRectanglesEXT(this GL.EXTExtension glInstance, GLEnum mode, int count, in int box)
        {
            fixed (int* box_ptr = &box) // RefInsteadOfPointerLayer
            {
                glInstance.WindowRectanglesEXT(mode, count, box_ptr);
            }
        }
    }

#pragma warning restore IDE1006 // Naming Styles
}
